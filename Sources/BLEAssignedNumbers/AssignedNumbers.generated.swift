/// This file is generated by CodeGenerator.
/// Do not modify this file directly.

import Foundation


public enum AssignedNumbers {
    /// From `assigned_numbers/uuids/browse_group_identifiers.yaml`.
    public enum BrowseGroupIdentifiers {
        /// PublicBrowseRoot. ID is `org.bluetooth.browse_group.public_browse_root`.
        public static let publicbrowseroot = AssignedNumberWithID(
            name: "PublicBrowseRoot",
            id: "org.bluetooth.browse_group.public_browse_root",
            uuidByte3: 0x10,
            uuidByte4: 0x2
        )

        public static let all: [any AssignedNumberProtocol] = [
            publicbrowseroot,
        ]
    }

    /// From `assigned_numbers/uuids/characteristic_uuids.yaml`.
    public enum CharacteristicUuids {
        /// ACS Control Point. ID is `org.bluetooth.characteristic.acs_control_point`.
        public static let acsControlPoint = AssignedNumberWithID(
            name: "ACS Control Point",
            id: "org.bluetooth.characteristic.acs_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x33
        )

        /// ACS Data In. ID is `org.bluetooth.characteristic.acs_data_in`.
        public static let acsDataIn = AssignedNumberWithID(
            name: "ACS Data In",
            id: "org.bluetooth.characteristic.acs_data_in",
            uuidByte3: 0x2b,
            uuidByte4: 0x30
        )

        /// ACS Data Out Indicate. ID is `org.bluetooth.characteristic.acs_data_out_indicate`.
        public static let acsDataOutIndicate = AssignedNumberWithID(
            name: "ACS Data Out Indicate",
            id: "org.bluetooth.characteristic.acs_data_out_indicate",
            uuidByte3: 0x2b,
            uuidByte4: 0x32
        )

        /// ACS Data Out Notify. ID is `org.bluetooth.characteristic.acs_data_out_notify`.
        public static let acsDataOutNotify = AssignedNumberWithID(
            name: "ACS Data Out Notify",
            id: "org.bluetooth.characteristic.acs_data_out_notify",
            uuidByte3: 0x2b,
            uuidByte4: 0x31
        )

        /// ACS Status. ID is `org.bluetooth.characteristic.acs_status`.
        public static let acsStatus = AssignedNumberWithID(
            name: "ACS Status",
            id: "org.bluetooth.characteristic.acs_status",
            uuidByte3: 0x2b,
            uuidByte4: 0x2f
        )

        /// Active Preset Index. ID is `org.bluetooth.characteristic.active_preset_index`.
        public static let activePresetIndex = AssignedNumberWithID(
            name: "Active Preset Index",
            id: "org.bluetooth.characteristic.active_preset_index",
            uuidByte3: 0x2b,
            uuidByte4: 0xdc
        )

        /// Activity Goal. ID is `org.bluetooth.characteristic.activity_goal`.
        public static let activityGoal = AssignedNumberWithID(
            name: "Activity Goal",
            id: "org.bluetooth.characteristic.activity_goal",
            uuidByte3: 0x2b,
            uuidByte4: 0x4e
        )

        /// Advertising Constant Tone Extension Interval. ID is `org.bluetooth.characteristic.advertising_constant_tone_extension_interval`.
        public static let advertisingConstantToneExtensionInterval = AssignedNumberWithID(
            name: "Advertising Constant Tone Extension Interval",
            id: "org.bluetooth.characteristic.advertising_constant_tone_extension_interval",
            uuidByte3: 0x2b,
            uuidByte4: 0xb1
        )

        /// Advertising Constant Tone Extension Minimum Length. ID is `org.bluetooth.characteristic.advertising_constant_tone_extension_minimum_length`.
        public static let advertisingConstantToneExtensionMinimumLength = AssignedNumberWithID(
            name: "Advertising Constant Tone Extension Minimum Length",
            id: "org.bluetooth.characteristic.advertising_constant_tone_extension_minimum_length",
            uuidByte3: 0x2b,
            uuidByte4: 0xae
        )

        /// Advertising Constant Tone Extension Minimum Transmit Count. ID is `org.bluetooth.characteristic.advertising_constant_tone_extension_minimum_transmit_count`.
        public static let advertisingConstantToneExtensionMinimumTransmitCount = AssignedNumberWithID(
            name: "Advertising Constant Tone Extension Minimum Transmit Count",
            id: "org.bluetooth.characteristic.advertising_constant_tone_extension_minimum_transmit_count",
            uuidByte3: 0x2b,
            uuidByte4: 0xaf
        )

        /// Advertising Constant Tone Extension PHY. ID is `org.bluetooth.characteristic.advertising_constant_tone_extension_phy`.
        public static let advertisingConstantToneExtensionPhy = AssignedNumberWithID(
            name: "Advertising Constant Tone Extension PHY",
            id: "org.bluetooth.characteristic.advertising_constant_tone_extension_phy",
            uuidByte3: 0x2b,
            uuidByte4: 0xb2
        )

        /// Advertising Constant Tone Extension Transmit Duration. ID is `org.bluetooth.characteristic.advertising_constant_tone_extension_transmit_duration`.
        public static let advertisingConstantToneExtensionTransmitDuration = AssignedNumberWithID(
            name: "Advertising Constant Tone Extension Transmit Duration",
            id: "org.bluetooth.characteristic.advertising_constant_tone_extension_transmit_duration",
            uuidByte3: 0x2b,
            uuidByte4: 0xb0
        )

        /// Aerobic Heart Rate Lower Limit. ID is `org.bluetooth.characteristic.aerobic_heart_rate_lower_limit`.
        public static let aerobicHeartRateLowerLimit = AssignedNumberWithID(
            name: "Aerobic Heart Rate Lower Limit",
            id: "org.bluetooth.characteristic.aerobic_heart_rate_lower_limit",
            uuidByte3: 0x2a,
            uuidByte4: 0x7e
        )

        /// Aerobic Heart Rate Upper Limit. ID is `org.bluetooth.characteristic.aerobic_heart_rate_upper_limit`.
        public static let aerobicHeartRateUpperLimit = AssignedNumberWithID(
            name: "Aerobic Heart Rate Upper Limit",
            id: "org.bluetooth.characteristic.aerobic_heart_rate_upper_limit",
            uuidByte3: 0x2a,
            uuidByte4: 0x84
        )

        /// Aerobic Threshold. ID is `org.bluetooth.characteristic.aerobic_threshold`.
        public static let aerobicThreshold = AssignedNumberWithID(
            name: "Aerobic Threshold",
            id: "org.bluetooth.characteristic.aerobic_threshold",
            uuidByte3: 0x2a,
            uuidByte4: 0x7f
        )

        /// Age. ID is `org.bluetooth.characteristic.age`.
        public static let age = AssignedNumberWithID(
            name: "Age",
            id: "org.bluetooth.characteristic.age",
            uuidByte3: 0x2a,
            uuidByte4: 0x80
        )

        /// Aggregate. ID is `org.bluetooth.characteristic.aggregate`.
        public static let aggregate = AssignedNumberWithID(
            name: "Aggregate",
            id: "org.bluetooth.characteristic.aggregate",
            uuidByte3: 0x2a,
            uuidByte4: 0x5a
        )

        /// Alert Category ID. ID is `org.bluetooth.characteristic.alert_category_id`.
        public static let alertCategoryId = AssignedNumberWithID(
            name: "Alert Category ID",
            id: "org.bluetooth.characteristic.alert_category_id",
            uuidByte3: 0x2a,
            uuidByte4: 0x43
        )

        /// Alert Category ID Bit Mask. ID is `org.bluetooth.characteristic.alert_category_id_bit_mask`.
        public static let alertCategoryIdBitMask = AssignedNumberWithID(
            name: "Alert Category ID Bit Mask",
            id: "org.bluetooth.characteristic.alert_category_id_bit_mask",
            uuidByte3: 0x2a,
            uuidByte4: 0x42
        )

        /// Alert Level. ID is `org.bluetooth.characteristic.alert_level`.
        public static let alertLevel = AssignedNumberWithID(
            name: "Alert Level",
            id: "org.bluetooth.characteristic.alert_level",
            uuidByte3: 0x2a,
            uuidByte4: 0x6
        )

        /// Alert Notification Control Point. ID is `org.bluetooth.characteristic.alert_notification_control_point`.
        public static let alertNotificationControlPoint = AssignedNumberWithID(
            name: "Alert Notification Control Point",
            id: "org.bluetooth.characteristic.alert_notification_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x44
        )

        /// Alert Status. ID is `org.bluetooth.characteristic.alert_status`.
        public static let alertStatus = AssignedNumberWithID(
            name: "Alert Status",
            id: "org.bluetooth.characteristic.alert_status",
            uuidByte3: 0x2a,
            uuidByte4: 0x3f
        )

        /// Altitude. ID is `org.bluetooth.characteristic.altitude`.
        public static let altitude = AssignedNumberWithID(
            name: "Altitude",
            id: "org.bluetooth.characteristic.altitude",
            uuidByte3: 0x2a,
            uuidByte4: 0xb3
        )

        /// Ammonia Concentration. ID is `org.bluetooth.characteristic.ammonia_concentration`.
        public static let ammoniaConcentration = AssignedNumberWithID(
            name: "Ammonia Concentration",
            id: "org.bluetooth.characteristic.ammonia_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xcf
        )

        /// Anaerobic Heart Rate Lower Limit. ID is `org.bluetooth.characteristic.anaerobic_heart_rate_lower_limit`.
        public static let anaerobicHeartRateLowerLimit = AssignedNumberWithID(
            name: "Anaerobic Heart Rate Lower Limit",
            id: "org.bluetooth.characteristic.anaerobic_heart_rate_lower_limit",
            uuidByte3: 0x2a,
            uuidByte4: 0x81
        )

        /// Anaerobic Heart Rate Upper Limit. ID is `org.bluetooth.characteristic.anaerobic_heart_rate_upper_limit`.
        public static let anaerobicHeartRateUpperLimit = AssignedNumberWithID(
            name: "Anaerobic Heart Rate Upper Limit",
            id: "org.bluetooth.characteristic.anaerobic_heart_rate_upper_limit",
            uuidByte3: 0x2a,
            uuidByte4: 0x82
        )

        /// Anaerobic Threshold. ID is `org.bluetooth.characteristic.anaerobic_threshold`.
        public static let anaerobicThreshold = AssignedNumberWithID(
            name: "Anaerobic Threshold",
            id: "org.bluetooth.characteristic.anaerobic_threshold",
            uuidByte3: 0x2a,
            uuidByte4: 0x83
        )

        /// AP Sync Key Material. ID is `org.bluetooth.characteristic.ap_sync_key_material`.
        public static let apSyncKeyMaterial = AssignedNumberWithID(
            name: "AP Sync Key Material",
            id: "org.bluetooth.characteristic.ap_sync_key_material",
            uuidByte3: 0x2b,
            uuidByte4: 0xf7
        )

        /// Apparent Energy 32. ID is `org.bluetooth.characteristic.apparent_energy_32`.
        public static let apparentEnergy32 = AssignedNumberWithID(
            name: "Apparent Energy 32",
            id: "org.bluetooth.characteristic.apparent_energy_32",
            uuidByte3: 0x2b,
            uuidByte4: 0x89
        )

        /// Apparent Power. ID is `org.bluetooth.characteristic.apparent_power`.
        public static let apparentPower = AssignedNumberWithID(
            name: "Apparent Power",
            id: "org.bluetooth.characteristic.apparent_power",
            uuidByte3: 0x2b,
            uuidByte4: 0x8a
        )

        /// Apparent Wind Direction. ID is `org.bluetooth.characteristic.apparent_wind_direction`.
        public static let apparentWindDirection = AssignedNumberWithID(
            name: "Apparent Wind Direction",
            id: "org.bluetooth.characteristic.apparent_wind_direction",
            uuidByte3: 0x2a,
            uuidByte4: 0x73
        )

        /// Apparent Wind Speed. ID is `org.bluetooth.characteristic.apparent_wind_speed`.
        public static let apparentWindSpeed = AssignedNumberWithID(
            name: "Apparent Wind Speed",
            id: "org.bluetooth.characteristic.apparent_wind_speed",
            uuidByte3: 0x2a,
            uuidByte4: 0x72
        )

        /// Appearance. ID is `org.bluetooth.characteristic.gap.appearance`.
        public static let appearance = AssignedNumberWithID(
            name: "Appearance",
            id: "org.bluetooth.characteristic.gap.appearance",
            uuidByte3: 0x2a,
            uuidByte4: 0x1
        )

        /// ASE Control Point. ID is `org.bluetooth.characteristic.ase_control_point`.
        public static let aseControlPoint = AssignedNumberWithID(
            name: "ASE Control Point",
            id: "org.bluetooth.characteristic.ase_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xc6
        )

        /// Audio Input Control Point. ID is `org.bluetooth.characteristic.audio_input_control_point`.
        public static let audioInputControlPoint = AssignedNumberWithID(
            name: "Audio Input Control Point",
            id: "org.bluetooth.characteristic.audio_input_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x7b
        )

        /// Audio Input Description. ID is `org.bluetooth.characteristic.audio_input_description`.
        public static let audioInputDescription = AssignedNumberWithID(
            name: "Audio Input Description",
            id: "org.bluetooth.characteristic.audio_input_description",
            uuidByte3: 0x2b,
            uuidByte4: 0x7c
        )

        /// Audio Input State. ID is `org.bluetooth.characteristic.audio_input_state`.
        public static let audioInputState = AssignedNumberWithID(
            name: "Audio Input State",
            id: "org.bluetooth.characteristic.audio_input_state",
            uuidByte3: 0x2b,
            uuidByte4: 0x77
        )

        /// Audio Input Status. ID is `org.bluetooth.characteristic.audio_input_status`.
        public static let audioInputStatus = AssignedNumberWithID(
            name: "Audio Input Status",
            id: "org.bluetooth.characteristic.audio_input_status",
            uuidByte3: 0x2b,
            uuidByte4: 0x7a
        )

        /// Audio Input Type. ID is `org.bluetooth.characteristic.audio_input_type`.
        public static let audioInputType = AssignedNumberWithID(
            name: "Audio Input Type",
            id: "org.bluetooth.characteristic.audio_input_type",
            uuidByte3: 0x2b,
            uuidByte4: 0x79
        )

        /// Audio Location. ID is `org.bluetooth.characteristic.audio_location`.
        public static let audioLocation = AssignedNumberWithID(
            name: "Audio Location",
            id: "org.bluetooth.characteristic.audio_location",
            uuidByte3: 0x2b,
            uuidByte4: 0x81
        )

        /// Audio Output Description. ID is `org.bluetooth.characteristic.audio_output_description`.
        public static let audioOutputDescription = AssignedNumberWithID(
            name: "Audio Output Description",
            id: "org.bluetooth.characteristic.audio_output_description",
            uuidByte3: 0x2b,
            uuidByte4: 0x83
        )

        /// Available Audio Contexts. ID is `org.bluetooth.characteristic.available_audio_contexts`.
        public static let availableAudioContexts = AssignedNumberWithID(
            name: "Available Audio Contexts",
            id: "org.bluetooth.characteristic.available_audio_contexts",
            uuidByte3: 0x2b,
            uuidByte4: 0xcd
        )

        /// Average Current. ID is `org.bluetooth.characteristic.average_current`.
        public static let averageCurrent = AssignedNumberWithID(
            name: "Average Current",
            id: "org.bluetooth.characteristic.average_current",
            uuidByte3: 0x2a,
            uuidByte4: 0xe0
        )

        /// Average Voltage. ID is `org.bluetooth.characteristic.average_voltage`.
        public static let averageVoltage = AssignedNumberWithID(
            name: "Average Voltage",
            id: "org.bluetooth.characteristic.average_voltage",
            uuidByte3: 0x2a,
            uuidByte4: 0xe1
        )

        /// Barometric Pressure Trend. ID is `org.bluetooth.characteristic.barometric_pressure_trend`.
        public static let barometricPressureTrend = AssignedNumberWithID(
            name: "Barometric Pressure Trend",
            id: "org.bluetooth.characteristic.barometric_pressure_trend",
            uuidByte3: 0x2a,
            uuidByte4: 0xa3
        )

        /// Battery Critical Status. ID is `org.bluetooth.characteristic.battery_critical_status`.
        public static let batteryCriticalStatus = AssignedNumberWithID(
            name: "Battery Critical Status",
            id: "org.bluetooth.characteristic.battery_critical_status",
            uuidByte3: 0x2b,
            uuidByte4: 0xe9
        )

        /// Battery Energy Status. ID is `org.bluetooth.characteristic.battery_energy_status`.
        public static let batteryEnergyStatus = AssignedNumberWithID(
            name: "Battery Energy Status",
            id: "org.bluetooth.characteristic.battery_energy_status",
            uuidByte3: 0x2b,
            uuidByte4: 0xf0
        )

        /// Battery Health Information. ID is `org.bluetooth.characteristic.battery_health_information`.
        public static let batteryHealthInformation = AssignedNumberWithID(
            name: "Battery Health Information",
            id: "org.bluetooth.characteristic.battery_health_information",
            uuidByte3: 0x2b,
            uuidByte4: 0xeb
        )

        /// Battery Health Status. ID is `org.bluetooth.characteristic.battery_health_status`.
        public static let batteryHealthStatus = AssignedNumberWithID(
            name: "Battery Health Status",
            id: "org.bluetooth.characteristic.battery_health_status",
            uuidByte3: 0x2b,
            uuidByte4: 0xea
        )

        /// Battery Information. ID is `org.bluetooth.characteristic.battery_information`.
        public static let batteryInformation = AssignedNumberWithID(
            name: "Battery Information",
            id: "org.bluetooth.characteristic.battery_information",
            uuidByte3: 0x2b,
            uuidByte4: 0xec
        )

        /// Battery Level. ID is `org.bluetooth.characteristic.battery_level`.
        public static let batteryLevel = AssignedNumberWithID(
            name: "Battery Level",
            id: "org.bluetooth.characteristic.battery_level",
            uuidByte3: 0x2a,
            uuidByte4: 0x19
        )

        /// Battery Level Status. ID is `org.bluetooth.characteristic.battery_level_status`.
        public static let batteryLevelStatus = AssignedNumberWithID(
            name: "Battery Level Status",
            id: "org.bluetooth.characteristic.battery_level_status",
            uuidByte3: 0x2b,
            uuidByte4: 0xed
        )

        /// Battery Time Status. ID is `org.bluetooth.characteristic.battery_time_status`.
        public static let batteryTimeStatus = AssignedNumberWithID(
            name: "Battery Time Status",
            id: "org.bluetooth.characteristic.battery_time_status",
            uuidByte3: 0x2b,
            uuidByte4: 0xee
        )

        /// Bearer List Current Calls. ID is `org.bluetooth.characteristic.bearer_list_current_calls`.
        public static let bearerListCurrentCalls = AssignedNumberWithID(
            name: "Bearer List Current Calls",
            id: "org.bluetooth.characteristic.bearer_list_current_calls",
            uuidByte3: 0x2b,
            uuidByte4: 0xb9
        )

        /// Bearer Provider Name. ID is `org.bluetooth.characteristic.bearer_provider_name`.
        public static let bearerProviderName = AssignedNumberWithID(
            name: "Bearer Provider Name",
            id: "org.bluetooth.characteristic.bearer_provider_name",
            uuidByte3: 0x2b,
            uuidByte4: 0xb3
        )

        /// Bearer Signal Strength. ID is `org.bluetooth.characteristic.bearer_signal_strength`.
        public static let bearerSignalStrength = AssignedNumberWithID(
            name: "Bearer Signal Strength",
            id: "org.bluetooth.characteristic.bearer_signal_strength",
            uuidByte3: 0x2b,
            uuidByte4: 0xb7
        )

        /// Bearer Signal Strength Reporting Interval. ID is `org.bluetooth.characteristic.bearer_signal_strength_reporting_interval`.
        public static let bearerSignalStrengthReportingInterval = AssignedNumberWithID(
            name: "Bearer Signal Strength Reporting Interval",
            id: "org.bluetooth.characteristic.bearer_signal_strength_reporting_interval",
            uuidByte3: 0x2b,
            uuidByte4: 0xb8
        )

        /// Bearer Technology. ID is `org.bluetooth.characteristic.bearer_technology`.
        public static let bearerTechnology = AssignedNumberWithID(
            name: "Bearer Technology",
            id: "org.bluetooth.characteristic.bearer_technology",
            uuidByte3: 0x2b,
            uuidByte4: 0xb5
        )

        /// Bearer UCI. ID is `org.bluetooth.characteristic.bearer_uci`.
        public static let bearerUci = AssignedNumberWithID(
            name: "Bearer UCI",
            id: "org.bluetooth.characteristic.bearer_uci",
            uuidByte3: 0x2b,
            uuidByte4: 0xb4
        )

        /// Bearer URI Schemes Supported List. ID is `org.bluetooth.characteristic.bearer_uri_schemes_supported_list`.
        public static let bearerUriSchemesSupportedList = AssignedNumberWithID(
            name: "Bearer URI Schemes Supported List",
            id: "org.bluetooth.characteristic.bearer_uri_schemes_supported_list",
            uuidByte3: 0x2b,
            uuidByte4: 0xb6
        )

        /// BGR Features. ID is `org.bluetooth.characteristic.bgr_features`.
        public static let bgrFeatures = AssignedNumberWithID(
            name: "BGR Features",
            id: "org.bluetooth.characteristic.bgr_features",
            uuidByte3: 0x2c,
            uuidByte4: 0x4
        )

        /// BGS Features. ID is `org.bluetooth.characteristic.bgs_features`.
        public static let bgsFeatures = AssignedNumberWithID(
            name: "BGS Features",
            id: "org.bluetooth.characteristic.bgs_features",
            uuidByte3: 0x2c,
            uuidByte4: 0x3
        )

        /// Blood Pressure Feature. ID is `org.bluetooth.characteristic.blood_pressure_feature`.
        public static let bloodPressureFeature = AssignedNumberWithID(
            name: "Blood Pressure Feature",
            id: "org.bluetooth.characteristic.blood_pressure_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x49
        )

        /// Blood Pressure Measurement. ID is `org.bluetooth.characteristic.blood_pressure_measurement`.
        public static let bloodPressureMeasurement = AssignedNumberWithID(
            name: "Blood Pressure Measurement",
            id: "org.bluetooth.characteristic.blood_pressure_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x35
        )

        /// Blood Pressure Record. ID is `org.bluetooth.characteristic.blood_pressure_record`.
        public static let bloodPressureRecord = AssignedNumberWithID(
            name: "Blood Pressure Record",
            id: "org.bluetooth.characteristic.blood_pressure_record",
            uuidByte3: 0x2b,
            uuidByte4: 0x36
        )

        /// Bluetooth SIG Data. ID is `org.bluetooth.characteristic.bluetooth_sig_data`.
        public static let bluetoothSigData = AssignedNumberWithID(
            name: "Bluetooth SIG Data",
            id: "org.bluetooth.characteristic.bluetooth_sig_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x39
        )

        /// Body Composition Feature. ID is `org.bluetooth.characteristic.body_composition_feature`.
        public static let bodyCompositionFeature = AssignedNumberWithID(
            name: "Body Composition Feature",
            id: "org.bluetooth.characteristic.body_composition_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x9b
        )

        /// Body Composition Measurement. ID is `org.bluetooth.characteristic.body_composition_measurement`.
        public static let bodyCompositionMeasurement = AssignedNumberWithID(
            name: "Body Composition Measurement",
            id: "org.bluetooth.characteristic.body_composition_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x9c
        )

        /// Body Sensor Location. ID is `org.bluetooth.characteristic.body_sensor_location`.
        public static let bodySensorLocation = AssignedNumberWithID(
            name: "Body Sensor Location",
            id: "org.bluetooth.characteristic.body_sensor_location",
            uuidByte3: 0x2a,
            uuidByte4: 0x38
        )

        /// Bond Management Control Point. ID is `org.bluetooth.characteristic.bond_management_control_point`.
        public static let bondManagementControlPoint = AssignedNumberWithID(
            name: "Bond Management Control Point",
            id: "org.bluetooth.characteristic.bond_management_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0xa4
        )

        /// Bond Management Feature. ID is `org.bluetooth.characteristic.bond_management_feature`.
        public static let bondManagementFeature = AssignedNumberWithID(
            name: "Bond Management Feature",
            id: "org.bluetooth.characteristic.bond_management_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0xa5
        )

        /// Boolean. ID is `org.bluetooth.characteristic.boolean`.
        public static let boolean = AssignedNumberWithID(
            name: "Boolean",
            id: "org.bluetooth.characteristic.boolean",
            uuidByte3: 0x2a,
            uuidByte4: 0xe2
        )

        /// Boot Keyboard Input Report. ID is `org.bluetooth.characteristic.boot_keyboard_input_report`.
        public static let bootKeyboardInputReport = AssignedNumberWithID(
            name: "Boot Keyboard Input Report",
            id: "org.bluetooth.characteristic.boot_keyboard_input_report",
            uuidByte3: 0x2a,
            uuidByte4: 0x22
        )

        /// Boot Keyboard Output Report. ID is `org.bluetooth.characteristic.boot_keyboard_output_report`.
        public static let bootKeyboardOutputReport = AssignedNumberWithID(
            name: "Boot Keyboard Output Report",
            id: "org.bluetooth.characteristic.boot_keyboard_output_report",
            uuidByte3: 0x2a,
            uuidByte4: 0x32
        )

        /// Boot Mouse Input Report. ID is `org.bluetooth.characteristic.boot_mouse_input_report`.
        public static let bootMouseInputReport = AssignedNumberWithID(
            name: "Boot Mouse Input Report",
            id: "org.bluetooth.characteristic.boot_mouse_input_report",
            uuidByte3: 0x2a,
            uuidByte4: 0x33
        )

        /// BR-EDR Handover Data. ID is `org.bluetooth.characteristic.br_edr_handover_data`.
        public static let bredrHandoverData = AssignedNumberWithID(
            name: "BR-EDR Handover Data",
            id: "org.bluetooth.characteristic.br_edr_handover_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x38
        )

        /// Broadcast Audio Scan Control Point. ID is `org.bluetooth.characteristic.broadcast_audio_scan_control_point`.
        public static let broadcastAudioScanControlPoint = AssignedNumberWithID(
            name: "Broadcast Audio Scan Control Point",
            id: "org.bluetooth.characteristic.broadcast_audio_scan_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xc7
        )

        /// Broadcast Receive State. ID is `org.bluetooth.characteristic.broadcast_receive_state`.
        public static let broadcastReceiveState = AssignedNumberWithID(
            name: "Broadcast Receive State",
            id: "org.bluetooth.characteristic.broadcast_receive_state",
            uuidByte3: 0x2b,
            uuidByte4: 0xc8
        )

        /// BSS Control Point. ID is `org.bluetooth.characteristic.bss_control_point`.
        public static let bssControlPoint = AssignedNumberWithID(
            name: "BSS Control Point",
            id: "org.bluetooth.characteristic.bss_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x2b
        )

        /// BSS Response. ID is `org.bluetooth.characteristic.bss_response`.
        public static let bssResponse = AssignedNumberWithID(
            name: "BSS Response",
            id: "org.bluetooth.characteristic.bss_response",
            uuidByte3: 0x2b,
            uuidByte4: 0x2c
        )

        /// Call Control Point. ID is `org.bluetooth.characteristic.call_control_point`.
        public static let callControlPoint = AssignedNumberWithID(
            name: "Call Control Point",
            id: "org.bluetooth.characteristic.call_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xbe
        )

        /// Call Control Point Optional Opcodes. ID is `org.bluetooth.characteristic.call_control_point_optional_opcodes`.
        public static let callControlPointOptionalOpcodes = AssignedNumberWithID(
            name: "Call Control Point Optional Opcodes",
            id: "org.bluetooth.characteristic.call_control_point_optional_opcodes",
            uuidByte3: 0x2b,
            uuidByte4: 0xbf
        )

        /// Call Friendly Name. ID is `org.bluetooth.characteristic.call_friendly_name`.
        public static let callFriendlyName = AssignedNumberWithID(
            name: "Call Friendly Name",
            id: "org.bluetooth.characteristic.call_friendly_name",
            uuidByte3: 0x2b,
            uuidByte4: 0xc2
        )

        /// Call State. ID is `org.bluetooth.characteristic.call_state`.
        public static let callState = AssignedNumberWithID(
            name: "Call State",
            id: "org.bluetooth.characteristic.call_state",
            uuidByte3: 0x2b,
            uuidByte4: 0xbd
        )

        /// Caloric Intake. ID is `org.bluetooth.characteristic.caloric_intake`.
        public static let caloricIntake = AssignedNumberWithID(
            name: "Caloric Intake",
            id: "org.bluetooth.characteristic.caloric_intake",
            uuidByte3: 0x2b,
            uuidByte4: 0x50
        )

        /// Carbon Monoxide Concentration. ID is `org.bluetooth.characteristic.carbon_monoxide_concentration`.
        public static let carbonMonoxideConcentration = AssignedNumberWithID(
            name: "Carbon Monoxide Concentration",
            id: "org.bluetooth.characteristic.carbon_monoxide_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd0
        )

        /// CardioRespiratory Activity Instantaneous Data. ID is `org.bluetooth.characteristic.cardiorespiratory_activity_instantaneous_data`.
        public static let cardiorespiratoryActivityInstantaneousData = AssignedNumberWithID(
            name: "CardioRespiratory Activity Instantaneous Data",
            id: "org.bluetooth.characteristic.cardiorespiratory_activity_instantaneous_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x3e
        )

        /// CardioRespiratory Activity Summary Data. ID is `org.bluetooth.characteristic.cardiorespiratory_activity_summary_data`.
        public static let cardiorespiratoryActivitySummaryData = AssignedNumberWithID(
            name: "CardioRespiratory Activity Summary Data",
            id: "org.bluetooth.characteristic.cardiorespiratory_activity_summary_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x3f
        )

        /// Central Address Resolution. ID is `org.bluetooth.characteristic.gap.central_address_resolution`.
        public static let centralAddressResolution = AssignedNumberWithID(
            name: "Central Address Resolution",
            id: "org.bluetooth.characteristic.gap.central_address_resolution",
            uuidByte3: 0x2a,
            uuidByte4: 0xa6
        )

        /// CGM Feature. ID is `org.bluetooth.characteristic.cgm_feature`.
        public static let cgmFeature = AssignedNumberWithID(
            name: "CGM Feature",
            id: "org.bluetooth.characteristic.cgm_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0xa8
        )

        /// CGM Measurement. ID is `org.bluetooth.characteristic.cgm_measurement`.
        public static let cgmMeasurement = AssignedNumberWithID(
            name: "CGM Measurement",
            id: "org.bluetooth.characteristic.cgm_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0xa7
        )

        /// CGM Session Run Time. ID is `org.bluetooth.characteristic.cgm_session_run_time`.
        public static let cgmSessionRunTime = AssignedNumberWithID(
            name: "CGM Session Run Time",
            id: "org.bluetooth.characteristic.cgm_session_run_time",
            uuidByte3: 0x2a,
            uuidByte4: 0xab
        )

        /// CGM Session Start Time. ID is `org.bluetooth.characteristic.cgm_session_start_time`.
        public static let cgmSessionStartTime = AssignedNumberWithID(
            name: "CGM Session Start Time",
            id: "org.bluetooth.characteristic.cgm_session_start_time",
            uuidByte3: 0x2a,
            uuidByte4: 0xaa
        )

        /// CGM Specific Ops Control Point. ID is `org.bluetooth.characteristic.cgm_specific_ops_control_point`.
        public static let cgmSpecificOpsControlPoint = AssignedNumberWithID(
            name: "CGM Specific Ops Control Point",
            id: "org.bluetooth.characteristic.cgm_specific_ops_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0xac
        )

        /// CGM Status. ID is `org.bluetooth.characteristic.cgm_status`.
        public static let cgmStatus = AssignedNumberWithID(
            name: "CGM Status",
            id: "org.bluetooth.characteristic.cgm_status",
            uuidByte3: 0x2a,
            uuidByte4: 0xa9
        )

        /// Chromatic Distance from Planckian. ID is `org.bluetooth.characteristic.chromatic_distance_from_planckian`.
        public static let chromaticDistanceFromPlanckian = AssignedNumberWithID(
            name: "Chromatic Distance from Planckian",
            id: "org.bluetooth.characteristic.chromatic_distance_from_planckian",
            uuidByte3: 0x2a,
            uuidByte4: 0xe3
        )

        /// Chromaticity Coordinate. ID is `org.bluetooth.characteristic.chromaticity_coordinate`.
        public static let chromaticityCoordinate = AssignedNumberWithID(
            name: "Chromaticity Coordinate",
            id: "org.bluetooth.characteristic.chromaticity_coordinate",
            uuidByte3: 0x2b,
            uuidByte4: 0x1c
        )

        /// Chromaticity Coordinates. ID is `org.bluetooth.characteristic.chromaticity_coordinates`.
        public static let chromaticityCoordinates = AssignedNumberWithID(
            name: "Chromaticity Coordinates",
            id: "org.bluetooth.characteristic.chromaticity_coordinates",
            uuidByte3: 0x2a,
            uuidByte4: 0xe4
        )

        /// Chromaticity in CCT and Duv Values. ID is `org.bluetooth.characteristic.chromaticity_in_cct_and_duv_values`.
        public static let chromaticityInCctAndDuvValues = AssignedNumberWithID(
            name: "Chromaticity in CCT and Duv Values",
            id: "org.bluetooth.characteristic.chromaticity_in_cct_and_duv_values",
            uuidByte3: 0x2a,
            uuidByte4: 0xe5
        )

        /// Chromaticity Tolerance. ID is `org.bluetooth.characteristic.chromaticity_tolerance`.
        public static let chromaticityTolerance = AssignedNumberWithID(
            name: "Chromaticity Tolerance",
            id: "org.bluetooth.characteristic.chromaticity_tolerance",
            uuidByte3: 0x2a,
            uuidByte4: 0xe6
        )

        /// CIE 13.3-1995 Color Rendering Index. ID is `org.bluetooth.characteristic.cie_13_3_1995_color_rendering_index`.
        public static let cie1331995ColorRenderingIndex = AssignedNumberWithID(
            name: "CIE 13.3-1995 Color Rendering Index",
            id: "org.bluetooth.characteristic.cie_13_3_1995_color_rendering_index",
            uuidByte3: 0x2a,
            uuidByte4: 0xe7
        )

        /// Client Supported Features. ID is `org.bluetooth.characteristic.client_supported_features`.
        public static let clientSupportedFeatures = AssignedNumberWithID(
            name: "Client Supported Features",
            id: "org.bluetooth.characteristic.client_supported_features",
            uuidByte3: 0x2b,
            uuidByte4: 0x29
        )

        /// Coefficient. ID is `org.bluetooth.characteristic.coefficient`.
        public static let coefficient = AssignedNumberWithID(
            name: "Coefficient",
            id: "org.bluetooth.characteristic.coefficient",
            uuidByte3: 0x2a,
            uuidByte4: 0xe8
        )

        /// Constant Tone Extension Enable. ID is `org.bluetooth.characteristic.constant_tone_extension_enable`.
        public static let constantToneExtensionEnable = AssignedNumberWithID(
            name: "Constant Tone Extension Enable",
            id: "org.bluetooth.characteristic.constant_tone_extension_enable",
            uuidByte3: 0x2b,
            uuidByte4: 0xad
        )

        /// Content Control ID. ID is `org.bluetooth.characteristic.content_control_id`.
        public static let contentControlId = AssignedNumberWithID(
            name: "Content Control ID",
            id: "org.bluetooth.characteristic.content_control_id",
            uuidByte3: 0x2b,
            uuidByte4: 0xba
        )

        /// Coordinated Set Size. ID is `org.bluetooth.characteristic.size_characteristic`.
        public static let coordinatedSetSize = AssignedNumberWithID(
            name: "Coordinated Set Size",
            id: "org.bluetooth.characteristic.size_characteristic",
            uuidByte3: 0x2b,
            uuidByte4: 0x85
        )

        /// Correlated Color Temperature. ID is `org.bluetooth.characteristic.correlated_color_temperature`.
        public static let correlatedColorTemperature = AssignedNumberWithID(
            name: "Correlated Color Temperature",
            id: "org.bluetooth.characteristic.correlated_color_temperature",
            uuidByte3: 0x2a,
            uuidByte4: 0xe9
        )

        /// Cosine of the Angle. ID is `org.bluetooth.characteristic.cosine_of_the_angle`.
        public static let cosineOfTheAngle = AssignedNumberWithID(
            name: "Cosine of the Angle",
            id: "org.bluetooth.characteristic.cosine_of_the_angle",
            uuidByte3: 0x2b,
            uuidByte4: 0x8d
        )

        /// CO\textsubscript{2} Concentration. ID is `org.bluetooth.characteristic.co2_concentration`.
        public static let cotextsubscript2Concentration = AssignedNumberWithID(
            name: "CO\\textsubscript{2} Concentration",
            id: "org.bluetooth.characteristic.co2_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0x8c
        )

        /// Count 16. ID is `org.bluetooth.characteristic.count_16`.
        public static let count16 = AssignedNumberWithID(
            name: "Count 16",
            id: "org.bluetooth.characteristic.count_16",
            uuidByte3: 0x2a,
            uuidByte4: 0xea
        )

        /// Count 24. ID is `org.bluetooth.characteristic.count_24`.
        public static let count24 = AssignedNumberWithID(
            name: "Count 24",
            id: "org.bluetooth.characteristic.count_24",
            uuidByte3: 0x2a,
            uuidByte4: 0xeb
        )

        /// Country Code. ID is `org.bluetooth.characteristic.country_code`.
        public static let countryCode = AssignedNumberWithID(
            name: "Country Code",
            id: "org.bluetooth.characteristic.country_code",
            uuidByte3: 0x2a,
            uuidByte4: 0xec
        )

        /// Cross Trainer Data. ID is `org.bluetooth.characteristic.cross_trainer_data`.
        public static let crossTrainerData = AssignedNumberWithID(
            name: "Cross Trainer Data",
            id: "org.bluetooth.characteristic.cross_trainer_data",
            uuidByte3: 0x2a,
            uuidByte4: 0xce
        )

        /// CSC Feature. ID is `org.bluetooth.characteristic.csc_feature`.
        public static let cscFeature = AssignedNumberWithID(
            name: "CSC Feature",
            id: "org.bluetooth.characteristic.csc_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x5c
        )

        /// CSC Measurement. ID is `org.bluetooth.characteristic.csc_measurement`.
        public static let cscMeasurement = AssignedNumberWithID(
            name: "CSC Measurement",
            id: "org.bluetooth.characteristic.csc_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x5b
        )

        /// Current Elapsed Time. ID is `org.bluetooth.characteristic.current_elapsed_time`.
        public static let currentElapsedTime = AssignedNumberWithID(
            name: "Current Elapsed Time",
            id: "org.bluetooth.characteristic.current_elapsed_time",
            uuidByte3: 0x2b,
            uuidByte4: 0xf2
        )

        /// Current Group Object ID. ID is `org.bluetooth.characteristic.current_group_object_id`.
        public static let currentGroupObjectId = AssignedNumberWithID(
            name: "Current Group Object ID",
            id: "org.bluetooth.characteristic.current_group_object_id",
            uuidByte3: 0x2b,
            uuidByte4: 0xa0
        )

        /// Current Time. ID is `org.bluetooth.characteristic.current_time`.
        public static let currentTime = AssignedNumberWithID(
            name: "Current Time",
            id: "org.bluetooth.characteristic.current_time",
            uuidByte3: 0x2a,
            uuidByte4: 0x2b
        )

        /// Current Track Object ID. ID is `org.bluetooth.characteristic.current_track_object_id`.
        public static let currentTrackObjectId = AssignedNumberWithID(
            name: "Current Track Object ID",
            id: "org.bluetooth.characteristic.current_track_object_id",
            uuidByte3: 0x2b,
            uuidByte4: 0x9d
        )

        /// Current Track Segments Object ID. ID is `org.bluetooth.characteristic.current_track_segments_object_id`.
        public static let currentTrackSegmentsObjectId = AssignedNumberWithID(
            name: "Current Track Segments Object ID",
            id: "org.bluetooth.characteristic.current_track_segments_object_id",
            uuidByte3: 0x2b,
            uuidByte4: 0x9c
        )

        /// Cycling Power Control Point. ID is `org.bluetooth.characteristic.cycling_power_control_point`.
        public static let cyclingPowerControlPoint = AssignedNumberWithID(
            name: "Cycling Power Control Point",
            id: "org.bluetooth.characteristic.cycling_power_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x66
        )

        /// Cycling Power Feature. ID is `org.bluetooth.characteristic.cycling_power_feature`.
        public static let cyclingPowerFeature = AssignedNumberWithID(
            name: "Cycling Power Feature",
            id: "org.bluetooth.characteristic.cycling_power_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x65
        )

        /// Cycling Power Measurement. ID is `org.bluetooth.characteristic.cycling_power_measurement`.
        public static let cyclingPowerMeasurement = AssignedNumberWithID(
            name: "Cycling Power Measurement",
            id: "org.bluetooth.characteristic.cycling_power_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x63
        )

        /// Cycling Power Vector. ID is `org.bluetooth.characteristic.cycling_power_vector`.
        public static let cyclingPowerVector = AssignedNumberWithID(
            name: "Cycling Power Vector",
            id: "org.bluetooth.characteristic.cycling_power_vector",
            uuidByte3: 0x2a,
            uuidByte4: 0x64
        )

        /// Database Change Increment. ID is `org.bluetooth.characteristic.database_change_increment`.
        public static let databaseChangeIncrement = AssignedNumberWithID(
            name: "Database Change Increment",
            id: "org.bluetooth.characteristic.database_change_increment",
            uuidByte3: 0x2a,
            uuidByte4: 0x99
        )

        /// Database Hash. ID is `org.bluetooth.characteristic.database_hash`.
        public static let databaseHash = AssignedNumberWithID(
            name: "Database Hash",
            id: "org.bluetooth.characteristic.database_hash",
            uuidByte3: 0x2b,
            uuidByte4: 0x2a
        )

        /// Date of Birth. ID is `org.bluetooth.characteristic.date_of_birth`.
        public static let dateOfBirth = AssignedNumberWithID(
            name: "Date of Birth",
            id: "org.bluetooth.characteristic.date_of_birth",
            uuidByte3: 0x2a,
            uuidByte4: 0x85
        )

        /// Date of Threshold Assessment. ID is `org.bluetooth.characteristic.date_of_threshold_assessment`.
        public static let dateOfThresholdAssessment = AssignedNumberWithID(
            name: "Date of Threshold Assessment",
            id: "org.bluetooth.characteristic.date_of_threshold_assessment",
            uuidByte3: 0x2a,
            uuidByte4: 0x86
        )

        /// Date Time. ID is `org.bluetooth.characteristic.date_time`.
        public static let dateTime = AssignedNumberWithID(
            name: "Date Time",
            id: "org.bluetooth.characteristic.date_time",
            uuidByte3: 0x2a,
            uuidByte4: 0x8
        )

        /// Date UTC. ID is `org.bluetooth.characteristic.date_utc`.
        public static let dateUtc = AssignedNumberWithID(
            name: "Date UTC",
            id: "org.bluetooth.characteristic.date_utc",
            uuidByte3: 0x2a,
            uuidByte4: 0xed
        )

        /// Day Date Time. ID is `org.bluetooth.characteristic.day_date_time`.
        public static let dayDateTime = AssignedNumberWithID(
            name: "Day Date Time",
            id: "org.bluetooth.characteristic.day_date_time",
            uuidByte3: 0x2a,
            uuidByte4: 0xa
        )

        /// Day of Week. ID is `org.bluetooth.characteristic.day_of_week`.
        public static let dayOfWeek = AssignedNumberWithID(
            name: "Day of Week",
            id: "org.bluetooth.characteristic.day_of_week",
            uuidByte3: 0x2a,
            uuidByte4: 0x9
        )

        /// Descriptor Value Changed. ID is `org.bluetooth.characteristic.descriptor_value_changed`.
        public static let descriptorValueChanged = AssignedNumberWithID(
            name: "Descriptor Value Changed",
            id: "org.bluetooth.characteristic.descriptor_value_changed",
            uuidByte3: 0x2a,
            uuidByte4: 0x7d
        )

        /// Device Name. ID is `org.bluetooth.characteristic.gap.device_name`.
        public static let deviceName = AssignedNumberWithID(
            name: "Device Name",
            id: "org.bluetooth.characteristic.gap.device_name",
            uuidByte3: 0x2a,
            uuidByte4: 0x0
        )

        /// Device Time. ID is `org.bluetooth.characteristic.device_time`.
        public static let deviceTime = AssignedNumberWithID(
            name: "Device Time",
            id: "org.bluetooth.characteristic.device_time",
            uuidByte3: 0x2b,
            uuidByte4: 0x90
        )

        /// Device Time Control Point. ID is `org.bluetooth.characteristic.device_time_control_point`.
        public static let deviceTimeControlPoint = AssignedNumberWithID(
            name: "Device Time Control Point",
            id: "org.bluetooth.characteristic.device_time_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x91
        )

        /// Device Time Feature. ID is `org.bluetooth.characteristic.device_time_feature`.
        public static let deviceTimeFeature = AssignedNumberWithID(
            name: "Device Time Feature",
            id: "org.bluetooth.characteristic.device_time_feature",
            uuidByte3: 0x2b,
            uuidByte4: 0x8e
        )

        /// Device Time Parameters. ID is `org.bluetooth.characteristic.device_time_parameters`.
        public static let deviceTimeParameters = AssignedNumberWithID(
            name: "Device Time Parameters",
            id: "org.bluetooth.characteristic.device_time_parameters",
            uuidByte3: 0x2b,
            uuidByte4: 0x8f
        )

        /// Device Wearing Position. ID is `org.bluetooth.characteristic.device_wearing_position`.
        public static let deviceWearingPosition = AssignedNumberWithID(
            name: "Device Wearing Position",
            id: "org.bluetooth.characteristic.device_wearing_position",
            uuidByte3: 0x2b,
            uuidByte4: 0x4b
        )

        /// Dew Point. ID is `org.bluetooth.characteristic.dew_point`.
        public static let dewPoint = AssignedNumberWithID(
            name: "Dew Point",
            id: "org.bluetooth.characteristic.dew_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x7b
        )

        /// DST Offset. ID is `org.bluetooth.characteristic.dst_offset`.
        public static let dstOffset = AssignedNumberWithID(
            name: "DST Offset",
            id: "org.bluetooth.characteristic.dst_offset",
            uuidByte3: 0x2a,
            uuidByte4: 0xd
        )

        /// Electric Current. ID is `org.bluetooth.characteristic.electric_current`.
        public static let electricCurrent = AssignedNumberWithID(
            name: "Electric Current",
            id: "org.bluetooth.characteristic.electric_current",
            uuidByte3: 0x2a,
            uuidByte4: 0xee
        )

        /// Electric Current Range. ID is `org.bluetooth.characteristic.electric_current_range`.
        public static let electricCurrentRange = AssignedNumberWithID(
            name: "Electric Current Range",
            id: "org.bluetooth.characteristic.electric_current_range",
            uuidByte3: 0x2a,
            uuidByte4: 0xef
        )

        /// Electric Current Specification. ID is `org.bluetooth.characteristic.electric_current_specification`.
        public static let electricCurrentSpecification = AssignedNumberWithID(
            name: "Electric Current Specification",
            id: "org.bluetooth.characteristic.electric_current_specification",
            uuidByte3: 0x2a,
            uuidByte4: 0xf0
        )

        /// Electric Current Statistics. ID is `org.bluetooth.characteristic.electric_current_statistics`.
        public static let electricCurrentStatistics = AssignedNumberWithID(
            name: "Electric Current Statistics",
            id: "org.bluetooth.characteristic.electric_current_statistics",
            uuidByte3: 0x2a,
            uuidByte4: 0xf1
        )

        /// Elevation. ID is `org.bluetooth.characteristic.elevation`.
        public static let elevation = AssignedNumberWithID(
            name: "Elevation",
            id: "org.bluetooth.characteristic.elevation",
            uuidByte3: 0x2a,
            uuidByte4: 0x6c
        )

        /// Email Address. ID is `org.bluetooth.characteristic.email_address`.
        public static let emailAddress = AssignedNumberWithID(
            name: "Email Address",
            id: "org.bluetooth.characteristic.email_address",
            uuidByte3: 0x2a,
            uuidByte4: 0x87
        )

        /// Emergency ID. ID is `org.bluetooth.characteristic.emergency_id`.
        public static let emergencyId = AssignedNumberWithID(
            name: "Emergency ID",
            id: "org.bluetooth.characteristic.emergency_id",
            uuidByte3: 0x2b,
            uuidByte4: 0x2d
        )

        /// Emergency Text. ID is `org.bluetooth.characteristic.emergency_text`.
        public static let emergencyText = AssignedNumberWithID(
            name: "Emergency Text",
            id: "org.bluetooth.characteristic.emergency_text",
            uuidByte3: 0x2b,
            uuidByte4: 0x2e
        )

        /// Encrypted Data Key Material. ID is `org.bluetooth.characteristic.encrypted_data_key_material`.
        public static let encryptedDataKeyMaterial = AssignedNumberWithID(
            name: "Encrypted Data Key Material",
            id: "org.bluetooth.characteristic.encrypted_data_key_material",
            uuidByte3: 0x2b,
            uuidByte4: 0x88
        )

        /// Energy. ID is `org.bluetooth.characteristic.energy`.
        public static let energy = AssignedNumberWithID(
            name: "Energy",
            id: "org.bluetooth.characteristic.energy",
            uuidByte3: 0x2a,
            uuidByte4: 0xf2
        )

        /// Energy 32. ID is `org.bluetooth.characteristic.energy_32`.
        public static let energy32 = AssignedNumberWithID(
            name: "Energy 32",
            id: "org.bluetooth.characteristic.energy_32",
            uuidByte3: 0x2b,
            uuidByte4: 0xa8
        )

        /// Energy in a Period of Day. ID is `org.bluetooth.characteristic.energy_in_a_period_of_day`.
        public static let energyInAPeriodOfDay = AssignedNumberWithID(
            name: "Energy in a Period of Day",
            id: "org.bluetooth.characteristic.energy_in_a_period_of_day",
            uuidByte3: 0x2a,
            uuidByte4: 0xf3
        )

        /// Enhanced Blood Pressure Measurement. ID is `org.bluetooth.characteristic.enhanced_blood_pressure_measurement`.
        public static let enhancedBloodPressureMeasurement = AssignedNumberWithID(
            name: "Enhanced Blood Pressure Measurement",
            id: "org.bluetooth.characteristic.enhanced_blood_pressure_measurement",
            uuidByte3: 0x2b,
            uuidByte4: 0x34
        )

        /// Enhanced Intermediate Cuff Pressure. ID is `org.bluetooth.characteristic.enhanced_intermediate_cuff_pressure`.
        public static let enhancedIntermediateCuffPressure = AssignedNumberWithID(
            name: "Enhanced Intermediate Cuff Pressure",
            id: "org.bluetooth.characteristic.enhanced_intermediate_cuff_pressure",
            uuidByte3: 0x2b,
            uuidByte4: 0x35
        )

        /// ESL Address. ID is `org.bluetooth.characteristic.esl_address`.
        public static let eslAddress = AssignedNumberWithID(
            name: "ESL Address",
            id: "org.bluetooth.characteristic.esl_address",
            uuidByte3: 0x2b,
            uuidByte4: 0xf6
        )

        /// ESL Control Point. ID is `org.bluetooth.characteristic.esl_control_point`.
        public static let eslControlPoint = AssignedNumberWithID(
            name: "ESL Control Point",
            id: "org.bluetooth.characteristic.esl_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xfe
        )

        /// ESL Current Absolute Time. ID is `org.bluetooth.characteristic.esl_current_absolute_time`.
        public static let eslCurrentAbsoluteTime = AssignedNumberWithID(
            name: "ESL Current Absolute Time",
            id: "org.bluetooth.characteristic.esl_current_absolute_time",
            uuidByte3: 0x2b,
            uuidByte4: 0xf9
        )

        /// ESL Display Information. ID is `org.bluetooth.characteristic.esl_display_information`.
        public static let eslDisplayInformation = AssignedNumberWithID(
            name: "ESL Display Information",
            id: "org.bluetooth.characteristic.esl_display_information",
            uuidByte3: 0x2b,
            uuidByte4: 0xfa
        )

        /// ESL Image Information. ID is `org.bluetooth.characteristic.esl_image_information`.
        public static let eslImageInformation = AssignedNumberWithID(
            name: "ESL Image Information",
            id: "org.bluetooth.characteristic.esl_image_information",
            uuidByte3: 0x2b,
            uuidByte4: 0xfb
        )

        /// ESL LED Information. ID is `org.bluetooth.characteristic.esl_led_information`.
        public static let eslLedInformation = AssignedNumberWithID(
            name: "ESL LED Information",
            id: "org.bluetooth.characteristic.esl_led_information",
            uuidByte3: 0x2b,
            uuidByte4: 0xfd
        )

        /// ESL Response Key Material. ID is `org.bluetooth.characteristic.esl_response_key_material`.
        public static let eslResponseKeyMaterial = AssignedNumberWithID(
            name: "ESL Response Key Material",
            id: "org.bluetooth.characteristic.esl_response_key_material",
            uuidByte3: 0x2b,
            uuidByte4: 0xf8
        )

        /// ESL Sensor Information. ID is `org.bluetooth.characteristic.esl_sensor_information`.
        public static let eslSensorInformation = AssignedNumberWithID(
            name: "ESL Sensor Information",
            id: "org.bluetooth.characteristic.esl_sensor_information",
            uuidByte3: 0x2b,
            uuidByte4: 0xfc
        )

        /// Estimated Service Date. ID is `org.bluetooth.characteristic.estimated_service_date`.
        public static let estimatedServiceDate = AssignedNumberWithID(
            name: "Estimated Service Date",
            id: "org.bluetooth.characteristic.estimated_service_date",
            uuidByte3: 0x2b,
            uuidByte4: 0xef
        )

        /// Event Statistics. ID is `org.bluetooth.characteristic.event_statistics`.
        public static let eventStatistics = AssignedNumberWithID(
            name: "Event Statistics",
            id: "org.bluetooth.characteristic.event_statistics",
            uuidByte3: 0x2a,
            uuidByte4: 0xf4
        )

        /// Exact Time 256. ID is `org.bluetooth.characteristic.exact_time_256`.
        public static let exactTime256 = AssignedNumberWithID(
            name: "Exact Time 256",
            id: "org.bluetooth.characteristic.exact_time_256",
            uuidByte3: 0x2a,
            uuidByte4: 0xc
        )

        /// Fat Burn Heart Rate Lower Limit. ID is `org.bluetooth.characteristic.fat_burn_heart_rate_lower_limit`.
        public static let fatBurnHeartRateLowerLimit = AssignedNumberWithID(
            name: "Fat Burn Heart Rate Lower Limit",
            id: "org.bluetooth.characteristic.fat_burn_heart_rate_lower_limit",
            uuidByte3: 0x2a,
            uuidByte4: 0x88
        )

        /// Fat Burn Heart Rate Upper Limit. ID is `org.bluetooth.characteristic.fat_burn_heart_rate_upper_limit`.
        public static let fatBurnHeartRateUpperLimit = AssignedNumberWithID(
            name: "Fat Burn Heart Rate Upper Limit",
            id: "org.bluetooth.characteristic.fat_burn_heart_rate_upper_limit",
            uuidByte3: 0x2a,
            uuidByte4: 0x89
        )

        /// Firmware Revision String. ID is `org.bluetooth.characteristic.firmware_revision_string`.
        public static let firmwareRevisionString = AssignedNumberWithID(
            name: "Firmware Revision String",
            id: "org.bluetooth.characteristic.firmware_revision_string",
            uuidByte3: 0x2a,
            uuidByte4: 0x26
        )

        /// First Name. ID is `org.bluetooth.characteristic.first_name`.
        public static let firstName = AssignedNumberWithID(
            name: "First Name",
            id: "org.bluetooth.characteristic.first_name",
            uuidByte3: 0x2a,
            uuidByte4: 0x8a
        )

        /// Fitness Machine Control Point. ID is `org.bluetooth.characteristic.fitness_machine_control_point`.
        public static let fitnessMachineControlPoint = AssignedNumberWithID(
            name: "Fitness Machine Control Point",
            id: "org.bluetooth.characteristic.fitness_machine_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0xd9
        )

        /// Fitness Machine Feature. ID is `org.bluetooth.characteristic.fitness_machine_feature`.
        public static let fitnessMachineFeature = AssignedNumberWithID(
            name: "Fitness Machine Feature",
            id: "org.bluetooth.characteristic.fitness_machine_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0xcc
        )

        /// Fitness Machine Status. ID is `org.bluetooth.characteristic.fitness_machine_status`.
        public static let fitnessMachineStatus = AssignedNumberWithID(
            name: "Fitness Machine Status",
            id: "org.bluetooth.characteristic.fitness_machine_status",
            uuidByte3: 0x2a,
            uuidByte4: 0xda
        )

        /// Five Zone Heart Rate Limits. ID is `org.bluetooth.characteristic.five_zone_heart_rate_limits`.
        public static let fiveZoneHeartRateLimits = AssignedNumberWithID(
            name: "Five Zone Heart Rate Limits",
            id: "org.bluetooth.characteristic.five_zone_heart_rate_limits",
            uuidByte3: 0x2a,
            uuidByte4: 0x8b
        )

        /// Fixed String 16. ID is `org.bluetooth.characteristic.fixed_string_16`.
        public static let fixedString16 = AssignedNumberWithID(
            name: "Fixed String 16",
            id: "org.bluetooth.characteristic.fixed_string_16",
            uuidByte3: 0x2a,
            uuidByte4: 0xf5
        )

        /// Fixed String 24. ID is `org.bluetooth.characteristic.fixed_string_24`.
        public static let fixedString24 = AssignedNumberWithID(
            name: "Fixed String 24",
            id: "org.bluetooth.characteristic.fixed_string_24",
            uuidByte3: 0x2a,
            uuidByte4: 0xf6
        )

        /// Fixed String 36. ID is `org.bluetooth.characteristic.fixed_string_36`.
        public static let fixedString36 = AssignedNumberWithID(
            name: "Fixed String 36",
            id: "org.bluetooth.characteristic.fixed_string_36",
            uuidByte3: 0x2a,
            uuidByte4: 0xf7
        )

        /// Fixed String 64. ID is `org.bluetooth.characteristic.fixed_string_64`.
        public static let fixedString64 = AssignedNumberWithID(
            name: "Fixed String 64",
            id: "org.bluetooth.characteristic.fixed_string_64",
            uuidByte3: 0x2b,
            uuidByte4: 0xde
        )

        /// Fixed String 8. ID is `org.bluetooth.characteristic.fixed_string_8`.
        public static let fixedString8 = AssignedNumberWithID(
            name: "Fixed String 8",
            id: "org.bluetooth.characteristic.fixed_string_8",
            uuidByte3: 0x2a,
            uuidByte4: 0xf8
        )

        /// Floor Number. ID is `org.bluetooth.characteristic.floor_number`.
        public static let floorNumber = AssignedNumberWithID(
            name: "Floor Number",
            id: "org.bluetooth.characteristic.floor_number",
            uuidByte3: 0x2a,
            uuidByte4: 0xb2
        )

        /// Four Zone Heart Rate Limits. ID is `org.bluetooth.characteristic.four_zone_heart_rate_limits`.
        public static let fourZoneHeartRateLimits = AssignedNumberWithID(
            name: "Four Zone Heart Rate Limits",
            id: "org.bluetooth.characteristic.four_zone_heart_rate_limits",
            uuidByte3: 0x2b,
            uuidByte4: 0x4c
        )

        /// Gain Settings Attribute. ID is `org.bluetooth.characteristic.gain_settings_attribute`.
        public static let gainSettingsAttribute = AssignedNumberWithID(
            name: "Gain Settings Attribute",
            id: "org.bluetooth.characteristic.gain_settings_attribute",
            uuidByte3: 0x2b,
            uuidByte4: 0x78
        )

        /// Gender. ID is `org.bluetooth.characteristic.gender`.
        public static let gender = AssignedNumberWithID(
            name: "Gender",
            id: "org.bluetooth.characteristic.gender",
            uuidByte3: 0x2a,
            uuidByte4: 0x8c
        )

        /// General Activity Instantaneous Data. ID is `org.bluetooth.characteristic.general_activity_instantaneous_data`.
        public static let generalActivityInstantaneousData = AssignedNumberWithID(
            name: "General Activity Instantaneous Data",
            id: "org.bluetooth.characteristic.general_activity_instantaneous_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x3c
        )

        /// General Activity Summary Data. ID is `org.bluetooth.characteristic.general_activity_summary_data`.
        public static let generalActivitySummaryData = AssignedNumberWithID(
            name: "General Activity Summary Data",
            id: "org.bluetooth.characteristic.general_activity_summary_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x3d
        )

        /// Generic Level. ID is `org.bluetooth.characteristic.generic_level`.
        public static let genericLevel = AssignedNumberWithID(
            name: "Generic Level",
            id: "org.bluetooth.characteristic.generic_level",
            uuidByte3: 0x2a,
            uuidByte4: 0xf9
        )

        /// GHS Control Point. ID is `org.bluetooth.characteristic.ghs_control_point`.
        public static let ghsControlPoint = AssignedNumberWithID(
            name: "GHS Control Point",
            id: "org.bluetooth.characteristic.ghs_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xf4
        )

        /// Global Trade Item Number. ID is `org.bluetooth.characteristic.global_trade_item_number`.
        public static let globalTradeItemNumber = AssignedNumberWithID(
            name: "Global Trade Item Number",
            id: "org.bluetooth.characteristic.global_trade_item_number",
            uuidByte3: 0x2a,
            uuidByte4: 0xfa
        )

        /// Glucose Feature. ID is `org.bluetooth.characteristic.glucose_feature`.
        public static let glucoseFeature = AssignedNumberWithID(
            name: "Glucose Feature",
            id: "org.bluetooth.characteristic.glucose_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x51
        )

        /// Glucose Measurement. ID is `org.bluetooth.characteristic.glucose_measurement`.
        public static let glucoseMeasurement = AssignedNumberWithID(
            name: "Glucose Measurement",
            id: "org.bluetooth.characteristic.glucose_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x18
        )

        /// Glucose Measurement Context. ID is `org.bluetooth.characteristic.glucose_measurement_context`.
        public static let glucoseMeasurementContext = AssignedNumberWithID(
            name: "Glucose Measurement Context",
            id: "org.bluetooth.characteristic.glucose_measurement_context",
            uuidByte3: 0x2a,
            uuidByte4: 0x34
        )

        /// GMAP Role. ID is `org.bluetooth.characteristic.gmap_role`.
        public static let gmapRole = AssignedNumberWithID(
            name: "GMAP Role",
            id: "org.bluetooth.characteristic.gmap_role",
            uuidByte3: 0x2c,
            uuidByte4: 0x0
        )

        /// Gust Factor. ID is `org.bluetooth.characteristic.gust_factor`.
        public static let gustFactor = AssignedNumberWithID(
            name: "Gust Factor",
            id: "org.bluetooth.characteristic.gust_factor",
            uuidByte3: 0x2a,
            uuidByte4: 0x74
        )

        /// Handedness. ID is `org.bluetooth.characteristic.handedness`.
        public static let handedness = AssignedNumberWithID(
            name: "Handedness",
            id: "org.bluetooth.characteristic.handedness",
            uuidByte3: 0x2b,
            uuidByte4: 0x4a
        )

        /// Hardware Revision String. ID is `org.bluetooth.characteristic.hardware_revision_string`.
        public static let hardwareRevisionString = AssignedNumberWithID(
            name: "Hardware Revision String",
            id: "org.bluetooth.characteristic.hardware_revision_string",
            uuidByte3: 0x2a,
            uuidByte4: 0x27
        )

        /// Health Sensor Features. ID is `org.bluetooth.characteristic.health_sensor_features`.
        public static let healthSensorFeatures = AssignedNumberWithID(
            name: "Health Sensor Features",
            id: "org.bluetooth.characteristic.health_sensor_features",
            uuidByte3: 0x2b,
            uuidByte4: 0xf3
        )

        /// Hearing Aid Features. ID is `org.bluetooth.characteristic.hearing_aid_features`.
        public static let hearingAidFeatures = AssignedNumberWithID(
            name: "Hearing Aid Features",
            id: "org.bluetooth.characteristic.hearing_aid_features",
            uuidByte3: 0x2b,
            uuidByte4: 0xda
        )

        /// Hearing Aid Preset Control Point. ID is `org.bluetooth.characteristic.hearing_aid_preset_control_point`.
        public static let hearingAidPresetControlPoint = AssignedNumberWithID(
            name: "Hearing Aid Preset Control Point",
            id: "org.bluetooth.characteristic.hearing_aid_preset_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xdb
        )

        /// Heart Rate Control Point. ID is `org.bluetooth.characteristic.heart_rate_control_point`.
        public static let heartRateControlPoint = AssignedNumberWithID(
            name: "Heart Rate Control Point",
            id: "org.bluetooth.characteristic.heart_rate_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x39
        )

        /// Heart Rate Max. ID is `org.bluetooth.characteristic.heart_rate_max`.
        public static let heartRateMax = AssignedNumberWithID(
            name: "Heart Rate Max",
            id: "org.bluetooth.characteristic.heart_rate_max",
            uuidByte3: 0x2a,
            uuidByte4: 0x8d
        )

        /// Heart Rate Measurement. ID is `org.bluetooth.characteristic.heart_rate_measurement`.
        public static let heartRateMeasurement = AssignedNumberWithID(
            name: "Heart Rate Measurement",
            id: "org.bluetooth.characteristic.heart_rate_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x37
        )

        /// Heat Index. ID is `org.bluetooth.characteristic.heat_index`.
        public static let heatIndex = AssignedNumberWithID(
            name: "Heat Index",
            id: "org.bluetooth.characteristic.heat_index",
            uuidByte3: 0x2a,
            uuidByte4: 0x7a
        )

        /// Height. ID is `org.bluetooth.characteristic.height`.
        public static let height = AssignedNumberWithID(
            name: "Height",
            id: "org.bluetooth.characteristic.height",
            uuidByte3: 0x2a,
            uuidByte4: 0x8e
        )

        /// HID Control Point. ID is `org.bluetooth.characteristic.hid_control_point`.
        public static let hidControlPoint = AssignedNumberWithID(
            name: "HID Control Point",
            id: "org.bluetooth.characteristic.hid_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x4c
        )

        /// HID Information. ID is `org.bluetooth.characteristic.hid_information`.
        public static let hidInformation = AssignedNumberWithID(
            name: "HID Information",
            id: "org.bluetooth.characteristic.hid_information",
            uuidByte3: 0x2a,
            uuidByte4: 0x4a
        )

        /// High Intensity Exercise Threshold. ID is `org.bluetooth.characteristic.high_intensity_exercise_threshold`.
        public static let highIntensityExerciseThreshold = AssignedNumberWithID(
            name: "High Intensity Exercise Threshold",
            id: "org.bluetooth.characteristic.high_intensity_exercise_threshold",
            uuidByte3: 0x2b,
            uuidByte4: 0x4d
        )

        /// High Resolution Height. ID is `org.bluetooth.characteristic.high_resolution_height`.
        public static let highResolutionHeight = AssignedNumberWithID(
            name: "High Resolution Height",
            id: "org.bluetooth.characteristic.high_resolution_height",
            uuidByte3: 0x2b,
            uuidByte4: 0x47
        )

        /// High Temperature. ID is `org.bluetooth.characteristic.high_temperature`.
        public static let highTemperature = AssignedNumberWithID(
            name: "High Temperature",
            id: "org.bluetooth.characteristic.high_temperature",
            uuidByte3: 0x2b,
            uuidByte4: 0xdf
        )

        /// High Voltage. ID is `org.bluetooth.characteristic.high_voltage`.
        public static let highVoltage = AssignedNumberWithID(
            name: "High Voltage",
            id: "org.bluetooth.characteristic.high_voltage",
            uuidByte3: 0x2b,
            uuidByte4: 0xe0
        )

        /// Hip Circumference. ID is `org.bluetooth.characteristic.hip_circumference`.
        public static let hipCircumference = AssignedNumberWithID(
            name: "Hip Circumference",
            id: "org.bluetooth.characteristic.hip_circumference",
            uuidByte3: 0x2a,
            uuidByte4: 0x8f
        )

        /// HTTP Control Point. ID is `org.bluetooth.characteristic.http_control_point`.
        public static let httpControlPoint = AssignedNumberWithID(
            name: "HTTP Control Point",
            id: "org.bluetooth.characteristic.http_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0xba
        )

        /// HTTP Entity Body. ID is `org.bluetooth.characteristic.http_entity_body`.
        public static let httpEntityBody = AssignedNumberWithID(
            name: "HTTP Entity Body",
            id: "org.bluetooth.characteristic.http_entity_body",
            uuidByte3: 0x2a,
            uuidByte4: 0xb9
        )

        /// HTTP Headers. ID is `org.bluetooth.characteristic.http_headers`.
        public static let httpHeaders = AssignedNumberWithID(
            name: "HTTP Headers",
            id: "org.bluetooth.characteristic.http_headers",
            uuidByte3: 0x2a,
            uuidByte4: 0xb7
        )

        /// HTTP Status Code. ID is `org.bluetooth.characteristic.http_status_code`.
        public static let httpStatusCode = AssignedNumberWithID(
            name: "HTTP Status Code",
            id: "org.bluetooth.characteristic.http_status_code",
            uuidByte3: 0x2a,
            uuidByte4: 0xb8
        )

        /// HTTPS Security. ID is `org.bluetooth.characteristic.https_security`.
        public static let httpsSecurity = AssignedNumberWithID(
            name: "HTTPS Security",
            id: "org.bluetooth.characteristic.https_security",
            uuidByte3: 0x2a,
            uuidByte4: 0xbb
        )

        /// Humidity. ID is `org.bluetooth.characteristic.humidity`.
        public static let humidity = AssignedNumberWithID(
            name: "Humidity",
            id: "org.bluetooth.characteristic.humidity",
            uuidByte3: 0x2a,
            uuidByte4: 0x6f
        )

        /// IDD Annunciation Status. ID is `org.bluetooth.characteristic.idd_annunciation_status`.
        public static let iddAnnunciationStatus = AssignedNumberWithID(
            name: "IDD Annunciation Status",
            id: "org.bluetooth.characteristic.idd_annunciation_status",
            uuidByte3: 0x2b,
            uuidByte4: 0x22
        )

        /// IDD Command Control Point. ID is `org.bluetooth.characteristic.idd_command_control_point`.
        public static let iddCommandControlPoint = AssignedNumberWithID(
            name: "IDD Command Control Point",
            id: "org.bluetooth.characteristic.idd_command_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x25
        )

        /// IDD Command Data. ID is `org.bluetooth.characteristic.idd_command_data`.
        public static let iddCommandData = AssignedNumberWithID(
            name: "IDD Command Data",
            id: "org.bluetooth.characteristic.idd_command_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x26
        )

        /// IDD Features. ID is `org.bluetooth.characteristic.idd_features`.
        public static let iddFeatures = AssignedNumberWithID(
            name: "IDD Features",
            id: "org.bluetooth.characteristic.idd_features",
            uuidByte3: 0x2b,
            uuidByte4: 0x23
        )

        /// IDD History Data. ID is `org.bluetooth.characteristic.idd_history_data`.
        public static let iddHistoryData = AssignedNumberWithID(
            name: "IDD History Data",
            id: "org.bluetooth.characteristic.idd_history_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x28
        )

        /// IDD Record Access Control Point. ID is `org.bluetooth.characteristic.idd_record_access_control_point`.
        public static let iddRecordAccessControlPoint = AssignedNumberWithID(
            name: "IDD Record Access Control Point",
            id: "org.bluetooth.characteristic.idd_record_access_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x27
        )

        /// IDD Status. ID is `org.bluetooth.characteristic.idd_status`.
        public static let iddStatus = AssignedNumberWithID(
            name: "IDD Status",
            id: "org.bluetooth.characteristic.idd_status",
            uuidByte3: 0x2b,
            uuidByte4: 0x21
        )

        /// IDD Status Changed. ID is `org.bluetooth.characteristic.idd_status_changed`.
        public static let iddStatusChanged = AssignedNumberWithID(
            name: "IDD Status Changed",
            id: "org.bluetooth.characteristic.idd_status_changed",
            uuidByte3: 0x2b,
            uuidByte4: 0x20
        )

        /// IDD Status Reader Control Point. ID is `org.bluetooth.characteristic.idd_status_reader_control_point`.
        public static let iddStatusReaderControlPoint = AssignedNumberWithID(
            name: "IDD Status Reader Control Point",
            id: "org.bluetooth.characteristic.idd_status_reader_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x24
        )

        /// IEEE 11073-20601 Regulatory Certification Data List. ID is `org.bluetooth.characteristic.ieee_11073-20601_regulatory_certification_data_list`.
        public static let ieee1107320601RegulatoryCertificationDataList = AssignedNumberWithID(
            name: "IEEE 11073-20601 Regulatory Certification Data List",
            id: "org.bluetooth.characteristic.ieee_11073-20601_regulatory_certification_data_list",
            uuidByte3: 0x2a,
            uuidByte4: 0x2a
        )

        /// Illuminance. ID is `org.bluetooth.characteristic.illuminance`.
        public static let illuminance = AssignedNumberWithID(
            name: "Illuminance",
            id: "org.bluetooth.characteristic.illuminance",
            uuidByte3: 0x2a,
            uuidByte4: 0xfb
        )

        /// Incoming Call. ID is `org.bluetooth.characteristic.incoming_call`.
        public static let incomingCall = AssignedNumberWithID(
            name: "Incoming Call",
            id: "org.bluetooth.characteristic.incoming_call",
            uuidByte3: 0x2b,
            uuidByte4: 0xc1
        )

        /// Incoming Call Target Bearer URI. ID is `org.bluetooth.characteristic.incoming_call_target_bearer_uri`.
        public static let incomingCallTargetBearerUri = AssignedNumberWithID(
            name: "Incoming Call Target Bearer URI",
            id: "org.bluetooth.characteristic.incoming_call_target_bearer_uri",
            uuidByte3: 0x2b,
            uuidByte4: 0xbc
        )

        /// Indoor Bike Data. ID is `org.bluetooth.characteristic.indoor_bike_data`.
        public static let indoorBikeData = AssignedNumberWithID(
            name: "Indoor Bike Data",
            id: "org.bluetooth.characteristic.indoor_bike_data",
            uuidByte3: 0x2a,
            uuidByte4: 0xd2
        )

        /// Indoor Positioning Configuration. ID is `org.bluetooth.characteristic.indoor_positioning_configuration`.
        public static let indoorPositioningConfiguration = AssignedNumberWithID(
            name: "Indoor Positioning Configuration",
            id: "org.bluetooth.characteristic.indoor_positioning_configuration",
            uuidByte3: 0x2a,
            uuidByte4: 0xad
        )

        /// Intermediate Cuff Pressure. ID is `org.bluetooth.characteristic.intermediate_cuff_pressure`.
        public static let intermediateCuffPressure = AssignedNumberWithID(
            name: "Intermediate Cuff Pressure",
            id: "org.bluetooth.characteristic.intermediate_cuff_pressure",
            uuidByte3: 0x2a,
            uuidByte4: 0x36
        )

        /// Intermediate Temperature. ID is `org.bluetooth.characteristic.intermediate_temperature`.
        public static let intermediateTemperature = AssignedNumberWithID(
            name: "Intermediate Temperature",
            id: "org.bluetooth.characteristic.intermediate_temperature",
            uuidByte3: 0x2a,
            uuidByte4: 0x1e
        )

        /// Irradiance. ID is `org.bluetooth.characteristic.irradiance`.
        public static let irradiance = AssignedNumberWithID(
            name: "Irradiance",
            id: "org.bluetooth.characteristic.irradiance",
            uuidByte3: 0x2a,
            uuidByte4: 0x77
        )

        /// Language. ID is `org.bluetooth.characteristic.language`.
        public static let language = AssignedNumberWithID(
            name: "Language",
            id: "org.bluetooth.characteristic.language",
            uuidByte3: 0x2a,
            uuidByte4: 0xa2
        )

        /// Last Name. ID is `org.bluetooth.characteristic.last_name`.
        public static let lastName = AssignedNumberWithID(
            name: "Last Name",
            id: "org.bluetooth.characteristic.last_name",
            uuidByte3: 0x2a,
            uuidByte4: 0x90
        )

        /// Latitude. ID is `org.bluetooth.characteristic.latitude`.
        public static let latitude = AssignedNumberWithID(
            name: "Latitude",
            id: "org.bluetooth.characteristic.latitude",
            uuidByte3: 0x2a,
            uuidByte4: 0xae
        )

        /// LE GATT Security Levels. ID is `org.bluetooth.characteristic.le_gatt_security_levels`.
        public static let leGattSecurityLevels = AssignedNumberWithID(
            name: "LE GATT Security Levels",
            id: "org.bluetooth.characteristic.le_gatt_security_levels",
            uuidByte3: 0x2b,
            uuidByte4: 0xf5
        )

        /// Light Distribution. ID is `org.bluetooth.characteristic.light_distribution`.
        public static let lightDistribution = AssignedNumberWithID(
            name: "Light Distribution",
            id: "org.bluetooth.characteristic.light_distribution",
            uuidByte3: 0x2b,
            uuidByte4: 0xe1
        )

        /// Light Output. ID is `org.bluetooth.characteristic.light_output`.
        public static let lightOutput = AssignedNumberWithID(
            name: "Light Output",
            id: "org.bluetooth.characteristic.light_output",
            uuidByte3: 0x2b,
            uuidByte4: 0xe2
        )

        /// Light Source Type. ID is `org.bluetooth.characteristic.light_source_type`.
        public static let lightSourceType = AssignedNumberWithID(
            name: "Light Source Type",
            id: "org.bluetooth.characteristic.light_source_type",
            uuidByte3: 0x2b,
            uuidByte4: 0xe3
        )

        /// Live Health Observations. ID is `org.bluetooth.characteristic.live_health_observations`.
        public static let liveHealthObservations = AssignedNumberWithID(
            name: "Live Health Observations",
            id: "org.bluetooth.characteristic.live_health_observations",
            uuidByte3: 0x2b,
            uuidByte4: 0x8b
        )

        /// LN Control Point. ID is `org.bluetooth.characteristic.ln_control_point`.
        public static let lnControlPoint = AssignedNumberWithID(
            name: "LN Control Point",
            id: "org.bluetooth.characteristic.ln_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x6b
        )

        /// LN Feature. ID is `org.bluetooth.characteristic.ln_feature`.
        public static let lnFeature = AssignedNumberWithID(
            name: "LN Feature",
            id: "org.bluetooth.characteristic.ln_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x6a
        )

        /// Local East Coordinate. ID is `org.bluetooth.characteristic.local_east_coordinate`.
        public static let localEastCoordinate = AssignedNumberWithID(
            name: "Local East Coordinate",
            id: "org.bluetooth.characteristic.local_east_coordinate",
            uuidByte3: 0x2a,
            uuidByte4: 0xb1
        )

        /// Local North Coordinate. ID is `org.bluetooth.characteristic.local_north_coordinate`.
        public static let localNorthCoordinate = AssignedNumberWithID(
            name: "Local North Coordinate",
            id: "org.bluetooth.characteristic.local_north_coordinate",
            uuidByte3: 0x2a,
            uuidByte4: 0xb0
        )

        /// Local Time Information. ID is `org.bluetooth.characteristic.local_time_information`.
        public static let localTimeInformation = AssignedNumberWithID(
            name: "Local Time Information",
            id: "org.bluetooth.characteristic.local_time_information",
            uuidByte3: 0x2a,
            uuidByte4: 0xf
        )

        /// Location and Speed. ID is `org.bluetooth.characteristic.location_and_speed`.
        public static let locationAndSpeed = AssignedNumberWithID(
            name: "Location and Speed",
            id: "org.bluetooth.characteristic.location_and_speed",
            uuidByte3: 0x2a,
            uuidByte4: 0x67
        )

        /// Location Name. ID is `org.bluetooth.characteristic.location_name`.
        public static let locationName = AssignedNumberWithID(
            name: "Location Name",
            id: "org.bluetooth.characteristic.location_name",
            uuidByte3: 0x2a,
            uuidByte4: 0xb5
        )

        /// Longitude. ID is `org.bluetooth.characteristic.longitude`.
        public static let longitude = AssignedNumberWithID(
            name: "Longitude",
            id: "org.bluetooth.characteristic.longitude",
            uuidByte3: 0x2a,
            uuidByte4: 0xaf
        )

        /// Luminous Efficacy. ID is `org.bluetooth.characteristic.luminous_efficacy`.
        public static let luminousEfficacy = AssignedNumberWithID(
            name: "Luminous Efficacy",
            id: "org.bluetooth.characteristic.luminous_efficacy",
            uuidByte3: 0x2a,
            uuidByte4: 0xfc
        )

        /// Luminous Energy. ID is `org.bluetooth.characteristic.luminous_energy`.
        public static let luminousEnergy = AssignedNumberWithID(
            name: "Luminous Energy",
            id: "org.bluetooth.characteristic.luminous_energy",
            uuidByte3: 0x2a,
            uuidByte4: 0xfd
        )

        /// Luminous Exposure. ID is `org.bluetooth.characteristic.luminous_exposure`.
        public static let luminousExposure = AssignedNumberWithID(
            name: "Luminous Exposure",
            id: "org.bluetooth.characteristic.luminous_exposure",
            uuidByte3: 0x2a,
            uuidByte4: 0xfe
        )

        /// Luminous Flux. ID is `org.bluetooth.characteristic.luminous_flux`.
        public static let luminousFlux = AssignedNumberWithID(
            name: "Luminous Flux",
            id: "org.bluetooth.characteristic.luminous_flux",
            uuidByte3: 0x2a,
            uuidByte4: 0xff
        )

        /// Luminous Flux Range. ID is `org.bluetooth.characteristic.luminous_flux_range`.
        public static let luminousFluxRange = AssignedNumberWithID(
            name: "Luminous Flux Range",
            id: "org.bluetooth.characteristic.luminous_flux_range",
            uuidByte3: 0x2b,
            uuidByte4: 0x0
        )

        /// Luminous Intensity. ID is `org.bluetooth.characteristic.luminous_intensity`.
        public static let luminousIntensity = AssignedNumberWithID(
            name: "Luminous Intensity",
            id: "org.bluetooth.characteristic.luminous_intensity",
            uuidByte3: 0x2b,
            uuidByte4: 0x1
        )

        /// Magnetic Declination. ID is `org.bluetooth.characteristic.magnetic_declination`.
        public static let magneticDeclination = AssignedNumberWithID(
            name: "Magnetic Declination",
            id: "org.bluetooth.characteristic.magnetic_declination",
            uuidByte3: 0x2a,
            uuidByte4: 0x2c
        )

        /// Magnetic Flux Density - 2D. ID is `org.bluetooth.characteristic.magnetic_flux_density_2d`.
        public static let magneticFluxDensity2D = AssignedNumberWithID(
            name: "Magnetic Flux Density - 2D",
            id: "org.bluetooth.characteristic.magnetic_flux_density_2d",
            uuidByte3: 0x2a,
            uuidByte4: 0xa0
        )

        /// Magnetic Flux Density - 3D. ID is `org.bluetooth.characteristic.magnetic_flux_density_3d`.
        public static let magneticFluxDensity3D = AssignedNumberWithID(
            name: "Magnetic Flux Density - 3D",
            id: "org.bluetooth.characteristic.magnetic_flux_density_3d",
            uuidByte3: 0x2a,
            uuidByte4: 0xa1
        )

        /// Manufacturer Name String. ID is `org.bluetooth.characteristic.manufacturer_name_string`.
        public static let manufacturerNameString = AssignedNumberWithID(
            name: "Manufacturer Name String",
            id: "org.bluetooth.characteristic.manufacturer_name_string",
            uuidByte3: 0x2a,
            uuidByte4: 0x29
        )

        /// Mass Flow. ID is `org.bluetooth.characteristic.mass_flow`.
        public static let massFlow = AssignedNumberWithID(
            name: "Mass Flow",
            id: "org.bluetooth.characteristic.mass_flow",
            uuidByte3: 0x2b,
            uuidByte4: 0x2
        )

        /// Maximum Recommended Heart Rate. ID is `org.bluetooth.characteristic.maximum_recommended_heart_rate`.
        public static let maximumRecommendedHeartRate = AssignedNumberWithID(
            name: "Maximum Recommended Heart Rate",
            id: "org.bluetooth.characteristic.maximum_recommended_heart_rate",
            uuidByte3: 0x2a,
            uuidByte4: 0x91
        )

        /// Measurement Interval. ID is `org.bluetooth.characteristic.measurement_interval`.
        public static let measurementInterval = AssignedNumberWithID(
            name: "Measurement Interval",
            id: "org.bluetooth.characteristic.measurement_interval",
            uuidByte3: 0x2a,
            uuidByte4: 0x21
        )

        /// Media Control Point. ID is `org.bluetooth.characteristic.media_control_point`.
        public static let mediaControlPoint = AssignedNumberWithID(
            name: "Media Control Point",
            id: "org.bluetooth.characteristic.media_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xa4
        )

        /// Media Control Point Opcodes Supported. ID is `org.bluetooth.characteristic.media_control_point_opcodes_supported`.
        public static let mediaControlPointOpcodesSupported = AssignedNumberWithID(
            name: "Media Control Point Opcodes Supported",
            id: "org.bluetooth.characteristic.media_control_point_opcodes_supported",
            uuidByte3: 0x2b,
            uuidByte4: 0xa5
        )

        /// Media Player Icon Object ID. ID is `org.bluetooth.characteristic.media_player_icon_object_id`.
        public static let mediaPlayerIconObjectId = AssignedNumberWithID(
            name: "Media Player Icon Object ID",
            id: "org.bluetooth.characteristic.media_player_icon_object_id",
            uuidByte3: 0x2b,
            uuidByte4: 0x94
        )

        /// Media Player Icon URL. ID is `org.bluetooth.characteristic.media_player_icon_url`.
        public static let mediaPlayerIconUrl = AssignedNumberWithID(
            name: "Media Player Icon URL",
            id: "org.bluetooth.characteristic.media_player_icon_url",
            uuidByte3: 0x2b,
            uuidByte4: 0x95
        )

        /// Media Player Name. ID is `org.bluetooth.characteristic.media_player_name`.
        public static let mediaPlayerName = AssignedNumberWithID(
            name: "Media Player Name",
            id: "org.bluetooth.characteristic.media_player_name",
            uuidByte3: 0x2b,
            uuidByte4: 0x93
        )

        /// Media State. ID is `org.bluetooth.characteristic.media_state`.
        public static let mediaState = AssignedNumberWithID(
            name: "Media State",
            id: "org.bluetooth.characteristic.media_state",
            uuidByte3: 0x2b,
            uuidByte4: 0xa3
        )

        /// Mesh Provisioning Data In. ID is `org.bluetooth.characteristic.mesh_provisioning_data_in`.
        public static let meshProvisioningDataIn = AssignedNumberWithID(
            name: "Mesh Provisioning Data In",
            id: "org.bluetooth.characteristic.mesh_provisioning_data_in",
            uuidByte3: 0x2a,
            uuidByte4: 0xdb
        )

        /// Mesh Provisioning Data Out. ID is `org.bluetooth.characteristic.mesh_provisioning_data_out`.
        public static let meshProvisioningDataOut = AssignedNumberWithID(
            name: "Mesh Provisioning Data Out",
            id: "org.bluetooth.characteristic.mesh_provisioning_data_out",
            uuidByte3: 0x2a,
            uuidByte4: 0xdc
        )

        /// Mesh Proxy Data In. ID is `org.bluetooth.characteristic.mesh_proxy_data_in`.
        public static let meshProxyDataIn = AssignedNumberWithID(
            name: "Mesh Proxy Data In",
            id: "org.bluetooth.characteristic.mesh_proxy_data_in",
            uuidByte3: 0x2a,
            uuidByte4: 0xdd
        )

        /// Mesh Proxy Data Out. ID is `org.bluetooth.characteristic.mesh_proxy_data_out`.
        public static let meshProxyDataOut = AssignedNumberWithID(
            name: "Mesh Proxy Data Out",
            id: "org.bluetooth.characteristic.mesh_proxy_data_out",
            uuidByte3: 0x2a,
            uuidByte4: 0xde
        )

        /// Methane Concentration. ID is `org.bluetooth.characteristic.methane_concentration`.
        public static let methaneConcentration = AssignedNumberWithID(
            name: "Methane Concentration",
            id: "org.bluetooth.characteristic.methane_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd1
        )

        /// Middle Name. ID is `org.bluetooth.characteristic.middle_name`.
        public static let middleName = AssignedNumberWithID(
            name: "Middle Name",
            id: "org.bluetooth.characteristic.middle_name",
            uuidByte3: 0x2b,
            uuidByte4: 0x48
        )

        /// Model Number String. ID is `org.bluetooth.characteristic.model_number_string`.
        public static let modelNumberString = AssignedNumberWithID(
            name: "Model Number String",
            id: "org.bluetooth.characteristic.model_number_string",
            uuidByte3: 0x2a,
            uuidByte4: 0x24
        )

        /// Mute. ID is `org.bluetooth.characteristic.mute`.
        public static let mute = AssignedNumberWithID(
            name: "Mute",
            id: "org.bluetooth.characteristic.mute",
            uuidByte3: 0x2b,
            uuidByte4: 0xc3
        )

        /// Navigation. ID is `org.bluetooth.characteristic.navigation`.
        public static let navigation = AssignedNumberWithID(
            name: "Navigation",
            id: "org.bluetooth.characteristic.navigation",
            uuidByte3: 0x2a,
            uuidByte4: 0x68
        )

        /// New Alert. ID is `org.bluetooth.characteristic.new_alert`.
        public static let newAlert = AssignedNumberWithID(
            name: "New Alert",
            id: "org.bluetooth.characteristic.new_alert",
            uuidByte3: 0x2a,
            uuidByte4: 0x46
        )

        /// Next Track Object ID. ID is `org.bluetooth.characteristic.next_track_object_id`.
        public static let nextTrackObjectId = AssignedNumberWithID(
            name: "Next Track Object ID",
            id: "org.bluetooth.characteristic.next_track_object_id",
            uuidByte3: 0x2b,
            uuidByte4: 0x9e
        )

        /// Nitrogen Dioxide Concentration. ID is `org.bluetooth.characteristic.nitrogen_dioxide_concentration`.
        public static let nitrogenDioxideConcentration = AssignedNumberWithID(
            name: "Nitrogen Dioxide Concentration",
            id: "org.bluetooth.characteristic.nitrogen_dioxide_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd2
        )

        /// Noise. ID is `org.bluetooth.characteristic.noise`.
        public static let noise = AssignedNumberWithID(
            name: "Noise",
            id: "org.bluetooth.characteristic.noise",
            uuidByte3: 0x2b,
            uuidByte4: 0xe4
        )

        /// Non-Methane Volatile Organic Compounds Concentration. ID is `org.bluetooth.characteristic.non-methane_volatile_organic_compounds_concentration`.
        public static let nonmethaneVolatileOrganicCompoundsConcentration = AssignedNumberWithID(
            name: "Non-Methane Volatile Organic Compounds Concentration",
            id: "org.bluetooth.characteristic.non-methane_volatile_organic_compounds_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd3
        )

        /// Object Action Control Point. ID is `org.bluetooth.characteristic.object_action_control_point`.
        public static let objectActionControlPoint = AssignedNumberWithID(
            name: "Object Action Control Point",
            id: "org.bluetooth.characteristic.object_action_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0xc5
        )

        /// Object Changed. ID is `org.bluetooth.characteristic.object_changed`.
        public static let objectChanged = AssignedNumberWithID(
            name: "Object Changed",
            id: "org.bluetooth.characteristic.object_changed",
            uuidByte3: 0x2a,
            uuidByte4: 0xc8
        )

        /// Object First-Created. ID is `org.bluetooth.characteristic.object_first_created`.
        public static let objectFirstcreated = AssignedNumberWithID(
            name: "Object First-Created",
            id: "org.bluetooth.characteristic.object_first_created",
            uuidByte3: 0x2a,
            uuidByte4: 0xc1
        )

        /// Object ID. ID is `org.bluetooth.characteristic.object_id`.
        public static let objectId = AssignedNumberWithID(
            name: "Object ID",
            id: "org.bluetooth.characteristic.object_id",
            uuidByte3: 0x2a,
            uuidByte4: 0xc3
        )

        /// Object Last-Modified. ID is `org.bluetooth.characteristic.object_last_modified`.
        public static let objectLastmodified = AssignedNumberWithID(
            name: "Object Last-Modified",
            id: "org.bluetooth.characteristic.object_last_modified",
            uuidByte3: 0x2a,
            uuidByte4: 0xc2
        )

        /// Object List Control Point. ID is `org.bluetooth.characteristic.object_list_control_point`.
        public static let objectListControlPoint = AssignedNumberWithID(
            name: "Object List Control Point",
            id: "org.bluetooth.characteristic.object_list_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0xc6
        )

        /// Object List Filter. ID is `org.bluetooth.characteristic.object_list_filter`.
        public static let objectListFilter = AssignedNumberWithID(
            name: "Object List Filter",
            id: "org.bluetooth.characteristic.object_list_filter",
            uuidByte3: 0x2a,
            uuidByte4: 0xc7
        )

        /// Object Name. ID is `org.bluetooth.characteristic.object_name`.
        public static let objectName = AssignedNumberWithID(
            name: "Object Name",
            id: "org.bluetooth.characteristic.object_name",
            uuidByte3: 0x2a,
            uuidByte4: 0xbe
        )

        /// Object Properties. ID is `org.bluetooth.characteristic.object_properties`.
        public static let objectProperties = AssignedNumberWithID(
            name: "Object Properties",
            id: "org.bluetooth.characteristic.object_properties",
            uuidByte3: 0x2a,
            uuidByte4: 0xc4
        )

        /// Object Size. ID is `org.bluetooth.characteristic.object_size`.
        public static let objectSize = AssignedNumberWithID(
            name: "Object Size",
            id: "org.bluetooth.characteristic.object_size",
            uuidByte3: 0x2a,
            uuidByte4: 0xc0
        )

        /// Object Type. ID is `org.bluetooth.characteristic.object_type`.
        public static let objectType = AssignedNumberWithID(
            name: "Object Type",
            id: "org.bluetooth.characteristic.object_type",
            uuidByte3: 0x2a,
            uuidByte4: 0xbf
        )

        /// Observation Schedule Changed. ID is `org.bluetooth.characteristic.observation_schedule_changed`.
        public static let observationScheduleChanged = AssignedNumberWithID(
            name: "Observation Schedule Changed",
            id: "org.bluetooth.characteristic.observation_schedule_changed",
            uuidByte3: 0x2b,
            uuidByte4: 0xf1
        )

        /// OTS Feature. ID is `org.bluetooth.characteristic.ots_feature`.
        public static let otsFeature = AssignedNumberWithID(
            name: "OTS Feature",
            id: "org.bluetooth.characteristic.ots_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0xbd
        )

        /// Ozone Concentration. ID is `org.bluetooth.characteristic.ozone_concentration`.
        public static let ozoneConcentration = AssignedNumberWithID(
            name: "Ozone Concentration",
            id: "org.bluetooth.characteristic.ozone_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd4
        )

        /// Parent Group Object ID. ID is `org.bluetooth.characteristic.parent_group_object_id`.
        public static let parentGroupObjectId = AssignedNumberWithID(
            name: "Parent Group Object ID",
            id: "org.bluetooth.characteristic.parent_group_object_id",
            uuidByte3: 0x2b,
            uuidByte4: 0x9f
        )

        /// Particulate Matter - PM10 Concentration. ID is `org.bluetooth.characteristic.particulate_matter_pm10_concentration`.
        public static let particulateMatterPm10Concentration = AssignedNumberWithID(
            name: "Particulate Matter - PM10 Concentration",
            id: "org.bluetooth.characteristic.particulate_matter_pm10_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd7
        )

        /// Particulate Matter - PM1 Concentration. ID is `org.bluetooth.characteristic.particulate_matter_pm1_concentration`.
        public static let particulateMatterPm1Concentration = AssignedNumberWithID(
            name: "Particulate Matter - PM1 Concentration",
            id: "org.bluetooth.characteristic.particulate_matter_pm1_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd5
        )

        /// Particulate Matter - PM2.5 Concentration. ID is `org.bluetooth.characteristic.particulate_matter_pm2_5_concentration`.
        public static let particulateMatterPm25Concentration = AssignedNumberWithID(
            name: "Particulate Matter - PM2.5 Concentration",
            id: "org.bluetooth.characteristic.particulate_matter_pm2_5_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd6
        )

        /// Perceived Lightness. ID is `org.bluetooth.characteristic.perceived_lightness`.
        public static let perceivedLightness = AssignedNumberWithID(
            name: "Perceived Lightness",
            id: "org.bluetooth.characteristic.perceived_lightness",
            uuidByte3: 0x2b,
            uuidByte4: 0x3
        )

        /// Percentage 8. ID is `org.bluetooth.characteristic.percentage_8`.
        public static let percentage8 = AssignedNumberWithID(
            name: "Percentage 8",
            id: "org.bluetooth.characteristic.percentage_8",
            uuidByte3: 0x2b,
            uuidByte4: 0x4
        )

        /// Percentage 8 Steps. ID is `org.bluetooth.characteristic.percentage_8_steps`.
        public static let percentage8Steps = AssignedNumberWithID(
            name: "Percentage 8 Steps",
            id: "org.bluetooth.characteristic.percentage_8_steps",
            uuidByte3: 0x2c,
            uuidByte4: 0x5
        )

        /// Peripheral Preferred Connection Parameters. ID is `org.bluetooth.characteristic.gap.peripheral_preferred_connection_parameters`.
        public static let peripheralPreferredConnectionParameters = AssignedNumberWithID(
            name: "Peripheral Preferred Connection Parameters",
            id: "org.bluetooth.characteristic.gap.peripheral_preferred_connection_parameters",
            uuidByte3: 0x2a,
            uuidByte4: 0x4
        )

        /// Peripheral Privacy Flag. ID is `org.bluetooth.characteristic.gap.peripheral_privacy_flag`.
        public static let peripheralPrivacyFlag = AssignedNumberWithID(
            name: "Peripheral Privacy Flag",
            id: "org.bluetooth.characteristic.gap.peripheral_privacy_flag",
            uuidByte3: 0x2a,
            uuidByte4: 0x2
        )

        /// Physical Activity Current Session. ID is `org.bluetooth.characteristic.physical_activity_current_session`.
        public static let physicalActivityCurrentSession = AssignedNumberWithID(
            name: "Physical Activity Current Session",
            id: "org.bluetooth.characteristic.physical_activity_current_session",
            uuidByte3: 0x2b,
            uuidByte4: 0x44
        )

        /// Physical Activity Monitor Control Point. ID is `org.bluetooth.characteristic.physical_activity_monitor_control_point`.
        public static let physicalActivityMonitorControlPoint = AssignedNumberWithID(
            name: "Physical Activity Monitor Control Point",
            id: "org.bluetooth.characteristic.physical_activity_monitor_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x43
        )

        /// Physical Activity Monitor Features. ID is `org.bluetooth.characteristic.physical_activity_monitor_features`.
        public static let physicalActivityMonitorFeatures = AssignedNumberWithID(
            name: "Physical Activity Monitor Features",
            id: "org.bluetooth.characteristic.physical_activity_monitor_features",
            uuidByte3: 0x2b,
            uuidByte4: 0x3b
        )

        /// Physical Activity Session Descriptor. ID is `org.bluetooth.characteristic.physical_activity_session_descriptor`.
        public static let physicalActivitySessionDescriptor = AssignedNumberWithID(
            name: "Physical Activity Session Descriptor",
            id: "org.bluetooth.characteristic.physical_activity_session_descriptor",
            uuidByte3: 0x2b,
            uuidByte4: 0x45
        )

        /// Playback Speed. ID is `org.bluetooth.characteristic.playback_speed`.
        public static let playbackSpeed = AssignedNumberWithID(
            name: "Playback Speed",
            id: "org.bluetooth.characteristic.playback_speed",
            uuidByte3: 0x2b,
            uuidByte4: 0x9a
        )

        /// Playing Order. ID is `org.bluetooth.characteristic.playing_order`.
        public static let playingOrder = AssignedNumberWithID(
            name: "Playing Order",
            id: "org.bluetooth.characteristic.playing_order",
            uuidByte3: 0x2b,
            uuidByte4: 0xa1
        )

        /// Playing Orders Supported. ID is `org.bluetooth.characteristic.playing_orders_supported`.
        public static let playingOrdersSupported = AssignedNumberWithID(
            name: "Playing Orders Supported",
            id: "org.bluetooth.characteristic.playing_orders_supported",
            uuidByte3: 0x2b,
            uuidByte4: 0xa2
        )

        /// PLX Continuous Measurement. ID is `org.bluetooth.characteristic.plx_continuous_measurement`.
        public static let plxContinuousMeasurement = AssignedNumberWithID(
            name: "PLX Continuous Measurement",
            id: "org.bluetooth.characteristic.plx_continuous_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x5f
        )

        /// PLX Features. ID is `org.bluetooth.characteristic.plx_features`.
        public static let plxFeatures = AssignedNumberWithID(
            name: "PLX Features",
            id: "org.bluetooth.characteristic.plx_features",
            uuidByte3: 0x2a,
            uuidByte4: 0x60
        )

        /// PLX Spot-Check Measurement. ID is `org.bluetooth.characteristic.plx_spot_check_measurement`.
        public static let plxSpotcheckMeasurement = AssignedNumberWithID(
            name: "PLX Spot-Check Measurement",
            id: "org.bluetooth.characteristic.plx_spot_check_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x5e
        )

        /// PnP ID. ID is `org.bluetooth.characteristic.pnp_id`.
        public static let pnpId = AssignedNumberWithID(
            name: "PnP ID",
            id: "org.bluetooth.characteristic.pnp_id",
            uuidByte3: 0x2a,
            uuidByte4: 0x50
        )

        /// Pollen Concentration. ID is `org.bluetooth.characteristic.pollen_concentration`.
        public static let pollenConcentration = AssignedNumberWithID(
            name: "Pollen Concentration",
            id: "org.bluetooth.characteristic.pollen_concentration",
            uuidByte3: 0x2a,
            uuidByte4: 0x75
        )

        /// Position Quality. ID is `org.bluetooth.characteristic.position_quality`.
        public static let positionQuality = AssignedNumberWithID(
            name: "Position Quality",
            id: "org.bluetooth.characteristic.position_quality",
            uuidByte3: 0x2a,
            uuidByte4: 0x69
        )

        /// Power. ID is `org.bluetooth.characteristic.power`.
        public static let power = AssignedNumberWithID(
            name: "Power",
            id: "org.bluetooth.characteristic.power",
            uuidByte3: 0x2b,
            uuidByte4: 0x5
        )

        /// Power Specification. ID is `org.bluetooth.characteristic.power_specification`.
        public static let powerSpecification = AssignedNumberWithID(
            name: "Power Specification",
            id: "org.bluetooth.characteristic.power_specification",
            uuidByte3: 0x2b,
            uuidByte4: 0x6
        )

        /// Preferred Units. ID is `org.bluetooth.characteristic.preferred_units`.
        public static let preferredUnits = AssignedNumberWithID(
            name: "Preferred Units",
            id: "org.bluetooth.characteristic.preferred_units",
            uuidByte3: 0x2b,
            uuidByte4: 0x46
        )

        /// Pressure. ID is `org.bluetooth.characteristic.pressure`.
        public static let pressure = AssignedNumberWithID(
            name: "Pressure",
            id: "org.bluetooth.characteristic.pressure",
            uuidByte3: 0x2a,
            uuidByte4: 0x6d
        )

        /// Protocol Mode. ID is `org.bluetooth.characteristic.protocol_mode`.
        public static let protocolMode = AssignedNumberWithID(
            name: "Protocol Mode",
            id: "org.bluetooth.characteristic.protocol_mode",
            uuidByte3: 0x2a,
            uuidByte4: 0x4e
        )

        /// Rainfall. ID is `org.bluetooth.characteristic.rainfall`.
        public static let rainfall = AssignedNumberWithID(
            name: "Rainfall",
            id: "org.bluetooth.characteristic.rainfall",
            uuidByte3: 0x2a,
            uuidByte4: 0x78
        )

        /// RC Feature. ID is `org.bluetooth.characteristic.rc_feature`.
        public static let rcFeature = AssignedNumberWithID(
            name: "RC Feature",
            id: "org.bluetooth.characteristic.rc_feature",
            uuidByte3: 0x2b,
            uuidByte4: 0x1d
        )

        /// RC Settings. ID is `org.bluetooth.characteristic.rc_settings`.
        public static let rcSettings = AssignedNumberWithID(
            name: "RC Settings",
            id: "org.bluetooth.characteristic.rc_settings",
            uuidByte3: 0x2b,
            uuidByte4: 0x1e
        )

        /// Reconnection Address. ID is `org.bluetooth.characteristic.gap.reconnection_address`.
        public static let reconnectionAddress = AssignedNumberWithID(
            name: "Reconnection Address",
            id: "org.bluetooth.characteristic.gap.reconnection_address",
            uuidByte3: 0x2a,
            uuidByte4: 0x3
        )

        /// Reconnection Configuration Control Point. ID is `org.bluetooth.characteristic.reconnection_configuration_control_point`.
        public static let reconnectionConfigurationControlPoint = AssignedNumberWithID(
            name: "Reconnection Configuration Control Point",
            id: "org.bluetooth.characteristic.reconnection_configuration_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x1f
        )

        /// Record Access Control Point. ID is `org.bluetooth.characteristic.record_access_control_point`.
        public static let recordAccessControlPoint = AssignedNumberWithID(
            name: "Record Access Control Point",
            id: "org.bluetooth.characteristic.record_access_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x52
        )

        /// Reference Time Information. ID is `org.bluetooth.characteristic.reference_time_information`.
        public static let referenceTimeInformation = AssignedNumberWithID(
            name: "Reference Time Information",
            id: "org.bluetooth.characteristic.reference_time_information",
            uuidByte3: 0x2a,
            uuidByte4: 0x14
        )

        /// Registered User. ID is `org.bluetooth.characteristic.registered_user`.
        public static let registeredUser = AssignedNumberWithID(
            name: "Registered User",
            id: "org.bluetooth.characteristic.registered_user",
            uuidByte3: 0x2b,
            uuidByte4: 0x37
        )

        /// Relative Runtime in a Correlated Color Temperature Range. ID is `org.bluetooth.characteristic.relative_runtime_in_a_correlated_color_temperature_range`.
        public static let relativeRuntimeInACorrelatedColorTemperatureRange = AssignedNumberWithID(
            name: "Relative Runtime in a Correlated Color Temperature Range",
            id: "org.bluetooth.characteristic.relative_runtime_in_a_correlated_color_temperature_range",
            uuidByte3: 0x2b,
            uuidByte4: 0xe5
        )

        /// Relative Runtime in a Current Range. ID is `org.bluetooth.characteristic.relative_runtime_in_a_current_range`.
        public static let relativeRuntimeInACurrentRange = AssignedNumberWithID(
            name: "Relative Runtime in a Current Range",
            id: "org.bluetooth.characteristic.relative_runtime_in_a_current_range",
            uuidByte3: 0x2b,
            uuidByte4: 0x7
        )

        /// Relative Runtime in a Generic Level Range. ID is `org.bluetooth.characteristic.relative_runtime_in_a_generic_level_range`.
        public static let relativeRuntimeInAGenericLevelRange = AssignedNumberWithID(
            name: "Relative Runtime in a Generic Level Range",
            id: "org.bluetooth.characteristic.relative_runtime_in_a_generic_level_range",
            uuidByte3: 0x2b,
            uuidByte4: 0x8
        )

        /// Relative Value in a Period of Day. ID is `org.bluetooth.characteristic.relative_value_in_a_period_of_day`.
        public static let relativeValueInAPeriodOfDay = AssignedNumberWithID(
            name: "Relative Value in a Period of Day",
            id: "org.bluetooth.characteristic.relative_value_in_a_period_of_day",
            uuidByte3: 0x2b,
            uuidByte4: 0xb
        )

        /// Relative Value in a Temperature Range. ID is `org.bluetooth.characteristic.relative_value_in_a_temperature_range`.
        public static let relativeValueInATemperatureRange = AssignedNumberWithID(
            name: "Relative Value in a Temperature Range",
            id: "org.bluetooth.characteristic.relative_value_in_a_temperature_range",
            uuidByte3: 0x2b,
            uuidByte4: 0xc
        )

        /// Relative Value in a Voltage Range. ID is `org.bluetooth.characteristic.relative_value_in_a_voltage_range`.
        public static let relativeValueInAVoltageRange = AssignedNumberWithID(
            name: "Relative Value in a Voltage Range",
            id: "org.bluetooth.characteristic.relative_value_in_a_voltage_range",
            uuidByte3: 0x2b,
            uuidByte4: 0x9
        )

        /// Relative Value in an Illuminance Range. ID is `org.bluetooth.characteristic.relative_value_in_an_illuminance_range`.
        public static let relativeValueInAnIlluminanceRange = AssignedNumberWithID(
            name: "Relative Value in an Illuminance Range",
            id: "org.bluetooth.characteristic.relative_value_in_an_illuminance_range",
            uuidByte3: 0x2b,
            uuidByte4: 0xa
        )

        /// Report. ID is `org.bluetooth.characteristic.report`.
        public static let report = AssignedNumberWithID(
            name: "Report",
            id: "org.bluetooth.characteristic.report",
            uuidByte3: 0x2a,
            uuidByte4: 0x4d
        )

        /// Report Map. ID is `org.bluetooth.characteristic.report_map`.
        public static let reportMap = AssignedNumberWithID(
            name: "Report Map",
            id: "org.bluetooth.characteristic.report_map",
            uuidByte3: 0x2a,
            uuidByte4: 0x4b
        )

        /// Resolvable Private Address Only. ID is `org.bluetooth.characteristic.resolvable_private_address_only`.
        public static let resolvablePrivateAddressOnly = AssignedNumberWithID(
            name: "Resolvable Private Address Only",
            id: "org.bluetooth.characteristic.resolvable_private_address_only",
            uuidByte3: 0x2a,
            uuidByte4: 0xc9
        )

        /// Resting Heart Rate. ID is `org.bluetooth.characteristic.resting_heart_rate`.
        public static let restingHeartRate = AssignedNumberWithID(
            name: "Resting Heart Rate",
            id: "org.bluetooth.characteristic.resting_heart_rate",
            uuidByte3: 0x2a,
            uuidByte4: 0x92
        )

        /// Ringer Control Point. ID is `org.bluetooth.characteristic.ringer_control_point`.
        public static let ringerControlPoint = AssignedNumberWithID(
            name: "Ringer Control Point",
            id: "org.bluetooth.characteristic.ringer_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x40
        )

        /// Ringer Setting. ID is `org.bluetooth.characteristic.ringer_setting`.
        public static let ringerSetting = AssignedNumberWithID(
            name: "Ringer Setting",
            id: "org.bluetooth.characteristic.ringer_setting",
            uuidByte3: 0x2a,
            uuidByte4: 0x41
        )

        /// Rower Data. ID is `org.bluetooth.characteristic.rower_data`.
        public static let rowerData = AssignedNumberWithID(
            name: "Rower Data",
            id: "org.bluetooth.characteristic.rower_data",
            uuidByte3: 0x2a,
            uuidByte4: 0xd1
        )

        /// RSC Feature. ID is `org.bluetooth.characteristic.rsc_feature`.
        public static let rscFeature = AssignedNumberWithID(
            name: "RSC Feature",
            id: "org.bluetooth.characteristic.rsc_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x54
        )

        /// RSC Measurement. ID is `org.bluetooth.characteristic.rsc_measurement`.
        public static let rscMeasurement = AssignedNumberWithID(
            name: "RSC Measurement",
            id: "org.bluetooth.characteristic.rsc_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x53
        )

        /// SC Control Point. ID is `org.bluetooth.characteristic.sc_control_point`.
        public static let scControlPoint = AssignedNumberWithID(
            name: "SC Control Point",
            id: "org.bluetooth.characteristic.sc_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x55
        )

        /// Scan Interval Window. ID is `org.bluetooth.characteristic.scan_interval_window`.
        public static let scanIntervalWindow = AssignedNumberWithID(
            name: "Scan Interval Window",
            id: "org.bluetooth.characteristic.scan_interval_window",
            uuidByte3: 0x2a,
            uuidByte4: 0x4f
        )

        /// Scan Refresh. ID is `org.bluetooth.characteristic.scan_refresh`.
        public static let scanRefresh = AssignedNumberWithID(
            name: "Scan Refresh",
            id: "org.bluetooth.characteristic.scan_refresh",
            uuidByte3: 0x2a,
            uuidByte4: 0x31
        )

        /// Search Control Point. ID is `org.bluetooth.characteristic.search_control_point`.
        public static let searchControlPoint = AssignedNumberWithID(
            name: "Search Control Point",
            id: "org.bluetooth.characteristic.search_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0xa7
        )

        /// Search Results Object ID. ID is `org.bluetooth.characteristic.search_results_object_id`.
        public static let searchResultsObjectId = AssignedNumberWithID(
            name: "Search Results Object ID",
            id: "org.bluetooth.characteristic.search_results_object_id",
            uuidByte3: 0x2b,
            uuidByte4: 0xa6
        )

        /// Sedentary Interval Notification. ID is `org.bluetooth.characteristic.sedentary_interval_notification`.
        public static let sedentaryIntervalNotification = AssignedNumberWithID(
            name: "Sedentary Interval Notification",
            id: "org.bluetooth.characteristic.sedentary_interval_notification",
            uuidByte3: 0x2b,
            uuidByte4: 0x4f
        )

        /// Seeking Speed. ID is `org.bluetooth.characteristic.seeking_speed`.
        public static let seekingSpeed = AssignedNumberWithID(
            name: "Seeking Speed",
            id: "org.bluetooth.characteristic.seeking_speed",
            uuidByte3: 0x2b,
            uuidByte4: 0x9b
        )

        /// Sensor Location. ID is `org.bluetooth.characteristic.sensor_location`.
        public static let sensorLocation = AssignedNumberWithID(
            name: "Sensor Location",
            id: "org.bluetooth.characteristic.sensor_location",
            uuidByte3: 0x2a,
            uuidByte4: 0x5d
        )

        /// Serial Number String. ID is `org.bluetooth.characteristic.serial_number_string`.
        public static let serialNumberString = AssignedNumberWithID(
            name: "Serial Number String",
            id: "org.bluetooth.characteristic.serial_number_string",
            uuidByte3: 0x2a,
            uuidByte4: 0x25
        )

        /// Server Supported Features. ID is `org.bluetooth.characteristic.server_supported_features`.
        public static let serverSupportedFeatures = AssignedNumberWithID(
            name: "Server Supported Features",
            id: "org.bluetooth.characteristic.server_supported_features",
            uuidByte3: 0x2b,
            uuidByte4: 0x3a
        )

        /// Service Changed. ID is `org.bluetooth.characteristic.gatt.service_changed`.
        public static let serviceChanged = AssignedNumberWithID(
            name: "Service Changed",
            id: "org.bluetooth.characteristic.gatt.service_changed",
            uuidByte3: 0x2a,
            uuidByte4: 0x5
        )

        /// Set Identity Resolving Key. ID is `org.bluetooth.characteristic.set_identity_resolving_key`.
        public static let setIdentityResolvingKey = AssignedNumberWithID(
            name: "Set Identity Resolving Key",
            id: "org.bluetooth.characteristic.set_identity_resolving_key",
            uuidByte3: 0x2b,
            uuidByte4: 0x84
        )

        /// Set Member Lock. ID is `org.bluetooth.characteristic.lock_characteristic`.
        public static let setMemberLock = AssignedNumberWithID(
            name: "Set Member Lock",
            id: "org.bluetooth.characteristic.lock_characteristic",
            uuidByte3: 0x2b,
            uuidByte4: 0x86
        )

        /// Set Member Rank. ID is `org.bluetooth.characteristic.rank_characteristic`.
        public static let setMemberRank = AssignedNumberWithID(
            name: "Set Member Rank",
            id: "org.bluetooth.characteristic.rank_characteristic",
            uuidByte3: 0x2b,
            uuidByte4: 0x87
        )

        /// Sink ASE. ID is `org.bluetooth.characteristic.sink_ase`.
        public static let sinkAse = AssignedNumberWithID(
            name: "Sink ASE",
            id: "org.bluetooth.characteristic.sink_ase",
            uuidByte3: 0x2b,
            uuidByte4: 0xc4
        )

        /// Sink Audio Locations. ID is `org.bluetooth.characteristic.sink_audio_locations`.
        public static let sinkAudioLocations = AssignedNumberWithID(
            name: "Sink Audio Locations",
            id: "org.bluetooth.characteristic.sink_audio_locations",
            uuidByte3: 0x2b,
            uuidByte4: 0xca
        )

        /// Sink PAC. ID is `org.bluetooth.characteristic.sink_pac`.
        public static let sinkPac = AssignedNumberWithID(
            name: "Sink PAC",
            id: "org.bluetooth.characteristic.sink_pac",
            uuidByte3: 0x2b,
            uuidByte4: 0xc9
        )

        /// Sleep Activity Instantaneous Data. ID is `org.bluetooth.characteristic.sleep_activity_instantaneous_data`.
        public static let sleepActivityInstantaneousData = AssignedNumberWithID(
            name: "Sleep Activity Instantaneous Data",
            id: "org.bluetooth.characteristic.sleep_activity_instantaneous_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x41
        )

        /// Sleep Activity Summary Data. ID is `org.bluetooth.characteristic.sleep_activity_summary_data`.
        public static let sleepActivitySummaryData = AssignedNumberWithID(
            name: "Sleep Activity Summary Data",
            id: "org.bluetooth.characteristic.sleep_activity_summary_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x42
        )

        /// Software Revision String. ID is `org.bluetooth.characteristic.software_revision_string`.
        public static let softwareRevisionString = AssignedNumberWithID(
            name: "Software Revision String",
            id: "org.bluetooth.characteristic.software_revision_string",
            uuidByte3: 0x2a,
            uuidByte4: 0x28
        )

        /// Source ASE. ID is `org.bluetooth.characteristic.source_ase`.
        public static let sourceAse = AssignedNumberWithID(
            name: "Source ASE",
            id: "org.bluetooth.characteristic.source_ase",
            uuidByte3: 0x2b,
            uuidByte4: 0xc5
        )

        /// Source Audio Locations. ID is `org.bluetooth.characteristic.source_audio_locations`.
        public static let sourceAudioLocations = AssignedNumberWithID(
            name: "Source Audio Locations",
            id: "org.bluetooth.characteristic.source_audio_locations",
            uuidByte3: 0x2b,
            uuidByte4: 0xcc
        )

        /// Source PAC. ID is `org.bluetooth.characteristic.source_pac`.
        public static let sourcePac = AssignedNumberWithID(
            name: "Source PAC",
            id: "org.bluetooth.characteristic.source_pac",
            uuidByte3: 0x2b,
            uuidByte4: 0xcb
        )

        /// Sport Type for Aerobic and Anaerobic Thresholds. ID is `org.bluetooth.characteristic.sport_type_for_aerobic_and_anaerobic_thresholds`.
        public static let sportTypeForAerobicAndAnaerobicThresholds = AssignedNumberWithID(
            name: "Sport Type for Aerobic and Anaerobic Thresholds",
            id: "org.bluetooth.characteristic.sport_type_for_aerobic_and_anaerobic_thresholds",
            uuidByte3: 0x2a,
            uuidByte4: 0x93
        )

        /// Stair Climber Data. ID is `org.bluetooth.characteristic.stair_climber_data`.
        public static let stairClimberData = AssignedNumberWithID(
            name: "Stair Climber Data",
            id: "org.bluetooth.characteristic.stair_climber_data",
            uuidByte3: 0x2a,
            uuidByte4: 0xd0
        )

        /// Status Flags. ID is `org.bluetooth.characteristic.status_flags`.
        public static let statusFlags = AssignedNumberWithID(
            name: "Status Flags",
            id: "org.bluetooth.characteristic.status_flags",
            uuidByte3: 0x2b,
            uuidByte4: 0xbb
        )

        /// Step Climber Data. ID is `org.bluetooth.characteristic.step_climber_data`.
        public static let stepClimberData = AssignedNumberWithID(
            name: "Step Climber Data",
            id: "org.bluetooth.characteristic.step_climber_data",
            uuidByte3: 0x2a,
            uuidByte4: 0xcf
        )

        /// Step Counter Activity Summary Data. ID is `org.bluetooth.characteristic.step_counter_activity_summary_data`.
        public static let stepCounterActivitySummaryData = AssignedNumberWithID(
            name: "Step Counter Activity Summary Data",
            id: "org.bluetooth.characteristic.step_counter_activity_summary_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x40
        )

        /// Stored Health Observations. ID is `org.bluetooth.characteristic.stored_health_observations`.
        public static let storedHealthObservations = AssignedNumberWithID(
            name: "Stored Health Observations",
            id: "org.bluetooth.characteristic.stored_health_observations",
            uuidByte3: 0x2b,
            uuidByte4: 0xdd
        )

        /// Stride Length. ID is `org.bluetooth.characteristic.stride_length`.
        public static let strideLength = AssignedNumberWithID(
            name: "Stride Length",
            id: "org.bluetooth.characteristic.stride_length",
            uuidByte3: 0x2b,
            uuidByte4: 0x49
        )

        /// Sulfur Dioxide Concentration. ID is `org.bluetooth.characteristic.sulfur_dioxide_concentration`.
        public static let sulfurDioxideConcentration = AssignedNumberWithID(
            name: "Sulfur Dioxide Concentration",
            id: "org.bluetooth.characteristic.sulfur_dioxide_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd8
        )

        /// Sulfur Hexafluoride Concentration. ID is `org.bluetooth.characteristic.sulfur_hexafluoride_concentration`.
        public static let sulfurHexafluorideConcentration = AssignedNumberWithID(
            name: "Sulfur Hexafluoride Concentration",
            id: "org.bluetooth.characteristic.sulfur_hexafluoride_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xd9
        )

        /// Supported Audio Contexts. ID is `org.bluetooth.characteristic.supported_audio_contexts`.
        public static let supportedAudioContexts = AssignedNumberWithID(
            name: "Supported Audio Contexts",
            id: "org.bluetooth.characteristic.supported_audio_contexts",
            uuidByte3: 0x2b,
            uuidByte4: 0xce
        )

        /// Supported Heart Rate Range. ID is `org.bluetooth.characteristic.supported_heart_rate_range`.
        public static let supportedHeartRateRange = AssignedNumberWithID(
            name: "Supported Heart Rate Range",
            id: "org.bluetooth.characteristic.supported_heart_rate_range",
            uuidByte3: 0x2a,
            uuidByte4: 0xd7
        )

        /// Supported Inclination Range. ID is `org.bluetooth.characteristic.supported_inclination_range`.
        public static let supportedInclinationRange = AssignedNumberWithID(
            name: "Supported Inclination Range",
            id: "org.bluetooth.characteristic.supported_inclination_range",
            uuidByte3: 0x2a,
            uuidByte4: 0xd5
        )

        /// Supported New Alert Category. ID is `org.bluetooth.characteristic.supported_new_alert_category`.
        public static let supportedNewAlertCategory = AssignedNumberWithID(
            name: "Supported New Alert Category",
            id: "org.bluetooth.characteristic.supported_new_alert_category",
            uuidByte3: 0x2a,
            uuidByte4: 0x47
        )

        /// Supported Power Range. ID is `org.bluetooth.characteristic.supported_power_range`.
        public static let supportedPowerRange = AssignedNumberWithID(
            name: "Supported Power Range",
            id: "org.bluetooth.characteristic.supported_power_range",
            uuidByte3: 0x2a,
            uuidByte4: 0xd8
        )

        /// Supported Resistance Level Range. ID is `org.bluetooth.characteristic.supported_resistance_level_range`.
        public static let supportedResistanceLevelRange = AssignedNumberWithID(
            name: "Supported Resistance Level Range",
            id: "org.bluetooth.characteristic.supported_resistance_level_range",
            uuidByte3: 0x2a,
            uuidByte4: 0xd6
        )

        /// Supported Speed Range. ID is `org.bluetooth.characteristic.supported_speed_range`.
        public static let supportedSpeedRange = AssignedNumberWithID(
            name: "Supported Speed Range",
            id: "org.bluetooth.characteristic.supported_speed_range",
            uuidByte3: 0x2a,
            uuidByte4: 0xd4
        )

        /// Supported Unread Alert Category. ID is `org.bluetooth.characteristic.supported_unread_alert_category`.
        public static let supportedUnreadAlertCategory = AssignedNumberWithID(
            name: "Supported Unread Alert Category",
            id: "org.bluetooth.characteristic.supported_unread_alert_category",
            uuidByte3: 0x2a,
            uuidByte4: 0x48
        )

        /// System ID. ID is `org.bluetooth.characteristic.system_id`.
        public static let systemId = AssignedNumberWithID(
            name: "System ID",
            id: "org.bluetooth.characteristic.system_id",
            uuidByte3: 0x2a,
            uuidByte4: 0x23
        )

        /// TDS Control Point. ID is `org.bluetooth.characteristic.tds_control_point`.
        public static let tdsControlPoint = AssignedNumberWithID(
            name: "TDS Control Point",
            id: "org.bluetooth.characteristic.tds_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0xbc
        )

        /// Temperature. ID is `org.bluetooth.characteristic.temperature`.
        public static let temperature = AssignedNumberWithID(
            name: "Temperature",
            id: "org.bluetooth.characteristic.temperature",
            uuidByte3: 0x2a,
            uuidByte4: 0x6e
        )

        /// Temperature 8. ID is `org.bluetooth.characteristic.temperature_8`.
        public static let temperature8 = AssignedNumberWithID(
            name: "Temperature 8",
            id: "org.bluetooth.characteristic.temperature_8",
            uuidByte3: 0x2b,
            uuidByte4: 0xd
        )

        /// Temperature 8 in a Period of Day. ID is `org.bluetooth.characteristic.temperature_8_in_a_period_of_day`.
        public static let temperature8InAPeriodOfDay = AssignedNumberWithID(
            name: "Temperature 8 in a Period of Day",
            id: "org.bluetooth.characteristic.temperature_8_in_a_period_of_day",
            uuidByte3: 0x2b,
            uuidByte4: 0xe
        )

        /// Temperature 8 Statistics. ID is `org.bluetooth.characteristic.temperature_8_statistics`.
        public static let temperature8Statistics = AssignedNumberWithID(
            name: "Temperature 8 Statistics",
            id: "org.bluetooth.characteristic.temperature_8_statistics",
            uuidByte3: 0x2b,
            uuidByte4: 0xf
        )

        /// Temperature Measurement. ID is `org.bluetooth.characteristic.temperature_measurement`.
        public static let temperatureMeasurement = AssignedNumberWithID(
            name: "Temperature Measurement",
            id: "org.bluetooth.characteristic.temperature_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x1c
        )

        /// Temperature Range. ID is `org.bluetooth.characteristic.temperature_range`.
        public static let temperatureRange = AssignedNumberWithID(
            name: "Temperature Range",
            id: "org.bluetooth.characteristic.temperature_range",
            uuidByte3: 0x2b,
            uuidByte4: 0x10
        )

        /// Temperature Statistics. ID is `org.bluetooth.characteristic.temperature_statistics`.
        public static let temperatureStatistics = AssignedNumberWithID(
            name: "Temperature Statistics",
            id: "org.bluetooth.characteristic.temperature_statistics",
            uuidByte3: 0x2b,
            uuidByte4: 0x11
        )

        /// Temperature Type. ID is `org.bluetooth.characteristic.temperature_type`.
        public static let temperatureType = AssignedNumberWithID(
            name: "Temperature Type",
            id: "org.bluetooth.characteristic.temperature_type",
            uuidByte3: 0x2a,
            uuidByte4: 0x1d
        )

        /// Termination Reason. ID is `org.bluetooth.characteristic.termination_reason`.
        public static let terminationReason = AssignedNumberWithID(
            name: "Termination Reason",
            id: "org.bluetooth.characteristic.termination_reason",
            uuidByte3: 0x2b,
            uuidByte4: 0xc0
        )

        /// Three Zone Heart Rate Limits. ID is `org.bluetooth.characteristic.three_zone_heart_rate_limits`.
        public static let threeZoneHeartRateLimits = AssignedNumberWithID(
            name: "Three Zone Heart Rate Limits",
            id: "org.bluetooth.characteristic.three_zone_heart_rate_limits",
            uuidByte3: 0x2a,
            uuidByte4: 0x94
        )

        /// Time Accuracy. ID is `org.bluetooth.characteristic.time_accuracy`.
        public static let timeAccuracy = AssignedNumberWithID(
            name: "Time Accuracy",
            id: "org.bluetooth.characteristic.time_accuracy",
            uuidByte3: 0x2a,
            uuidByte4: 0x12
        )

        /// Time Change Log Data. ID is `org.bluetooth.characteristic.time_change_log_data`.
        public static let timeChangeLogData = AssignedNumberWithID(
            name: "Time Change Log Data",
            id: "org.bluetooth.characteristic.time_change_log_data",
            uuidByte3: 0x2b,
            uuidByte4: 0x92
        )

        /// Time Decihour 8. ID is `org.bluetooth.characteristic.time_decihour_8`.
        public static let timeDecihour8 = AssignedNumberWithID(
            name: "Time Decihour 8",
            id: "org.bluetooth.characteristic.time_decihour_8",
            uuidByte3: 0x2b,
            uuidByte4: 0x12
        )

        /// Time Exponential 8. ID is `org.bluetooth.characteristic.time_exponential_8`.
        public static let timeExponential8 = AssignedNumberWithID(
            name: "Time Exponential 8",
            id: "org.bluetooth.characteristic.time_exponential_8",
            uuidByte3: 0x2b,
            uuidByte4: 0x13
        )

        /// Time Hour 24. ID is `org.bluetooth.characteristic.time_hour_24`.
        public static let timeHour24 = AssignedNumberWithID(
            name: "Time Hour 24",
            id: "org.bluetooth.characteristic.time_hour_24",
            uuidByte3: 0x2b,
            uuidByte4: 0x14
        )

        /// Time Millisecond 24. ID is `org.bluetooth.characteristic.time_millisecond_24`.
        public static let timeMillisecond24 = AssignedNumberWithID(
            name: "Time Millisecond 24",
            id: "org.bluetooth.characteristic.time_millisecond_24",
            uuidByte3: 0x2b,
            uuidByte4: 0x15
        )

        /// Time Second 16. ID is `org.bluetooth.characteristic.time_second_16`.
        public static let timeSecond16 = AssignedNumberWithID(
            name: "Time Second 16",
            id: "org.bluetooth.characteristic.time_second_16",
            uuidByte3: 0x2b,
            uuidByte4: 0x16
        )

        /// Time Second 32. ID is `org.bluetooth.characteristic.time_second_32`.
        public static let timeSecond32 = AssignedNumberWithID(
            name: "Time Second 32",
            id: "org.bluetooth.characteristic.time_second_32",
            uuidByte3: 0x2b,
            uuidByte4: 0xe6
        )

        /// Time Second 8. ID is `org.bluetooth.characteristic.time_second_8`.
        public static let timeSecond8 = AssignedNumberWithID(
            name: "Time Second 8",
            id: "org.bluetooth.characteristic.time_second_8",
            uuidByte3: 0x2b,
            uuidByte4: 0x17
        )

        /// Time Source. ID is `org.bluetooth.characteristic.time_source`.
        public static let timeSource = AssignedNumberWithID(
            name: "Time Source",
            id: "org.bluetooth.characteristic.time_source",
            uuidByte3: 0x2a,
            uuidByte4: 0x13
        )

        /// Time Update Control Point. ID is `org.bluetooth.characteristic.time_update_control_point`.
        public static let timeUpdateControlPoint = AssignedNumberWithID(
            name: "Time Update Control Point",
            id: "org.bluetooth.characteristic.time_update_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x16
        )

        /// Time Update State. ID is `org.bluetooth.characteristic.time_update_state`.
        public static let timeUpdateState = AssignedNumberWithID(
            name: "Time Update State",
            id: "org.bluetooth.characteristic.time_update_state",
            uuidByte3: 0x2a,
            uuidByte4: 0x17
        )

        /// Time with DST. ID is `org.bluetooth.characteristic.time_with_dst`.
        public static let timeWithDst = AssignedNumberWithID(
            name: "Time with DST",
            id: "org.bluetooth.characteristic.time_with_dst",
            uuidByte3: 0x2a,
            uuidByte4: 0x11
        )

        /// Time Zone. ID is `org.bluetooth.characteristic.time_zone`.
        public static let timeZone = AssignedNumberWithID(
            name: "Time Zone",
            id: "org.bluetooth.characteristic.time_zone",
            uuidByte3: 0x2a,
            uuidByte4: 0xe
        )

        /// TMAP Role. ID is `org.bluetooth.characteristic.tmap_role`.
        public static let tmapRole = AssignedNumberWithID(
            name: "TMAP Role",
            id: "org.bluetooth.characteristic.tmap_role",
            uuidByte3: 0x2b,
            uuidByte4: 0x51
        )

        /// Track Changed. ID is `org.bluetooth.characteristic.track_changed`.
        public static let trackChanged = AssignedNumberWithID(
            name: "Track Changed",
            id: "org.bluetooth.characteristic.track_changed",
            uuidByte3: 0x2b,
            uuidByte4: 0x96
        )

        /// Track Duration. ID is `org.bluetooth.characteristic.track_duration`.
        public static let trackDuration = AssignedNumberWithID(
            name: "Track Duration",
            id: "org.bluetooth.characteristic.track_duration",
            uuidByte3: 0x2b,
            uuidByte4: 0x98
        )

        /// Track Position. ID is `org.bluetooth.characteristic.track_position`.
        public static let trackPosition = AssignedNumberWithID(
            name: "Track Position",
            id: "org.bluetooth.characteristic.track_position",
            uuidByte3: 0x2b,
            uuidByte4: 0x99
        )

        /// Track Title. ID is `org.bluetooth.characteristic.track_title`.
        public static let trackTitle = AssignedNumberWithID(
            name: "Track Title",
            id: "org.bluetooth.characteristic.track_title",
            uuidByte3: 0x2b,
            uuidByte4: 0x97
        )

        /// Training Status. ID is `org.bluetooth.characteristic.training_status`.
        public static let trainingStatus = AssignedNumberWithID(
            name: "Training Status",
            id: "org.bluetooth.characteristic.training_status",
            uuidByte3: 0x2a,
            uuidByte4: 0xd3
        )

        /// Treadmill Data. ID is `org.bluetooth.characteristic.treadmill_data`.
        public static let treadmillData = AssignedNumberWithID(
            name: "Treadmill Data",
            id: "org.bluetooth.characteristic.treadmill_data",
            uuidByte3: 0x2a,
            uuidByte4: 0xcd
        )

        /// True Wind Direction. ID is `org.bluetooth.characteristic.true_wind_direction`.
        public static let trueWindDirection = AssignedNumberWithID(
            name: "True Wind Direction",
            id: "org.bluetooth.characteristic.true_wind_direction",
            uuidByte3: 0x2a,
            uuidByte4: 0x71
        )

        /// True Wind Speed. ID is `org.bluetooth.characteristic.true_wind_speed`.
        public static let trueWindSpeed = AssignedNumberWithID(
            name: "True Wind Speed",
            id: "org.bluetooth.characteristic.true_wind_speed",
            uuidByte3: 0x2a,
            uuidByte4: 0x70
        )

        /// Two Zone Heart Rate Limits. ID is `org.bluetooth.characteristic.two_zone_heart_rate_limits`.
        public static let twoZoneHeartRateLimits = AssignedNumberWithID(
            name: "Two Zone Heart Rate Limits",
            id: "org.bluetooth.characteristic.two_zone_heart_rate_limits",
            uuidByte3: 0x2a,
            uuidByte4: 0x95
        )

        /// Tx Power Level. ID is `org.bluetooth.characteristic.tx_power_level`.
        public static let txPowerLevel = AssignedNumberWithID(
            name: "Tx Power Level",
            id: "org.bluetooth.characteristic.tx_power_level",
            uuidByte3: 0x2a,
            uuidByte4: 0x7
        )

        /// UDI for Medical Devices. ID is `org.bluetooth.characteristic.medical_devices`.
        public static let udiForMedicalDevices = AssignedNumberWithID(
            name: "UDI for Medical Devices",
            id: "org.bluetooth.characteristic.medical_devices",
            uuidByte3: 0x2b,
            uuidByte4: 0xff
        )

        /// UGG Features. ID is `org.bluetooth.characteristic.ugg_features`.
        public static let uggFeatures = AssignedNumberWithID(
            name: "UGG Features",
            id: "org.bluetooth.characteristic.ugg_features",
            uuidByte3: 0x2c,
            uuidByte4: 0x1
        )

        /// UGT Features. ID is `org.bluetooth.characteristic.ugt_features`.
        public static let ugtFeatures = AssignedNumberWithID(
            name: "UGT Features",
            id: "org.bluetooth.characteristic.ugt_features",
            uuidByte3: 0x2c,
            uuidByte4: 0x2
        )

        /// Uncertainty. ID is `org.bluetooth.characteristic.uncertainty`.
        public static let uncertainty = AssignedNumberWithID(
            name: "Uncertainty",
            id: "org.bluetooth.characteristic.uncertainty",
            uuidByte3: 0x2a,
            uuidByte4: 0xb4
        )

        /// Unread Alert Status. ID is `org.bluetooth.characteristic.unread_alert_status`.
        public static let unreadAlertStatus = AssignedNumberWithID(
            name: "Unread Alert Status",
            id: "org.bluetooth.characteristic.unread_alert_status",
            uuidByte3: 0x2a,
            uuidByte4: 0x45
        )

        /// URI. ID is `org.bluetooth.characteristic.uri`.
        public static let uri = AssignedNumberWithID(
            name: "URI",
            id: "org.bluetooth.characteristic.uri",
            uuidByte3: 0x2a,
            uuidByte4: 0xb6
        )

        /// User Control Point. ID is `org.bluetooth.characteristic.user_control_point`.
        public static let userControlPoint = AssignedNumberWithID(
            name: "User Control Point",
            id: "org.bluetooth.characteristic.user_control_point",
            uuidByte3: 0x2a,
            uuidByte4: 0x9f
        )

        /// User Index. ID is `org.bluetooth.characteristic.user_index`.
        public static let userIndex = AssignedNumberWithID(
            name: "User Index",
            id: "org.bluetooth.characteristic.user_index",
            uuidByte3: 0x2a,
            uuidByte4: 0x9a
        )

        /// UV Index. ID is `org.bluetooth.characteristic.uv_index`.
        public static let uvIndex = AssignedNumberWithID(
            name: "UV Index",
            id: "org.bluetooth.characteristic.uv_index",
            uuidByte3: 0x2a,
            uuidByte4: 0x76
        )

        /// VO2 Max. ID is `org.bluetooth.characteristic.vo2_max`.
        public static let vo2Max = AssignedNumberWithID(
            name: "VO2 Max",
            id: "org.bluetooth.characteristic.vo2_max",
            uuidByte3: 0x2a,
            uuidByte4: 0x96
        )

        /// VOC Concentration. ID is `org.bluetooth.characteristic.voc_concentration`.
        public static let vocConcentration = AssignedNumberWithID(
            name: "VOC Concentration",
            id: "org.bluetooth.characteristic.voc_concentration",
            uuidByte3: 0x2b,
            uuidByte4: 0xe7
        )

        /// Voltage. ID is `org.bluetooth.characteristic.voltage`.
        public static let voltage = AssignedNumberWithID(
            name: "Voltage",
            id: "org.bluetooth.characteristic.voltage",
            uuidByte3: 0x2b,
            uuidByte4: 0x18
        )

        /// Voltage Frequency. ID is `org.bluetooth.characteristic.voltage_frequency`.
        public static let voltageFrequency = AssignedNumberWithID(
            name: "Voltage Frequency",
            id: "org.bluetooth.characteristic.voltage_frequency",
            uuidByte3: 0x2b,
            uuidByte4: 0xe8
        )

        /// Voltage Specification. ID is `org.bluetooth.characteristic.voltage_specification`.
        public static let voltageSpecification = AssignedNumberWithID(
            name: "Voltage Specification",
            id: "org.bluetooth.characteristic.voltage_specification",
            uuidByte3: 0x2b,
            uuidByte4: 0x19
        )

        /// Voltage Statistics. ID is `org.bluetooth.characteristic.voltage_statistics`.
        public static let voltageStatistics = AssignedNumberWithID(
            name: "Voltage Statistics",
            id: "org.bluetooth.characteristic.voltage_statistics",
            uuidByte3: 0x2b,
            uuidByte4: 0x1a
        )

        /// Volume Control Point. ID is `org.bluetooth.characteristic.volume_control_point`.
        public static let volumeControlPoint = AssignedNumberWithID(
            name: "Volume Control Point",
            id: "org.bluetooth.characteristic.volume_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x7e
        )

        /// Volume Flags. ID is `org.bluetooth.characteristic.volume_flags`.
        public static let volumeFlags = AssignedNumberWithID(
            name: "Volume Flags",
            id: "org.bluetooth.characteristic.volume_flags",
            uuidByte3: 0x2b,
            uuidByte4: 0x7f
        )

        /// Volume Flow. ID is `org.bluetooth.characteristic.volume_flow`.
        public static let volumeFlow = AssignedNumberWithID(
            name: "Volume Flow",
            id: "org.bluetooth.characteristic.volume_flow",
            uuidByte3: 0x2b,
            uuidByte4: 0x1b
        )

        /// Volume Offset Control Point. ID is `org.bluetooth.characteristic.volume_offset_control_point`.
        public static let volumeOffsetControlPoint = AssignedNumberWithID(
            name: "Volume Offset Control Point",
            id: "org.bluetooth.characteristic.volume_offset_control_point",
            uuidByte3: 0x2b,
            uuidByte4: 0x82
        )

        /// Volume Offset State. ID is `org.bluetooth.characteristic.volume_offset_state`.
        public static let volumeOffsetState = AssignedNumberWithID(
            name: "Volume Offset State",
            id: "org.bluetooth.characteristic.volume_offset_state",
            uuidByte3: 0x2b,
            uuidByte4: 0x80
        )

        /// Volume State. ID is `org.bluetooth.characteristic.volume_state`.
        public static let volumeState = AssignedNumberWithID(
            name: "Volume State",
            id: "org.bluetooth.characteristic.volume_state",
            uuidByte3: 0x2b,
            uuidByte4: 0x7d
        )

        /// Waist Circumference. ID is `org.bluetooth.characteristic.waist_circumference`.
        public static let waistCircumference = AssignedNumberWithID(
            name: "Waist Circumference",
            id: "org.bluetooth.characteristic.waist_circumference",
            uuidByte3: 0x2a,
            uuidByte4: 0x97
        )

        /// Weight. ID is `org.bluetooth.characteristic.weight`.
        public static let weight = AssignedNumberWithID(
            name: "Weight",
            id: "org.bluetooth.characteristic.weight",
            uuidByte3: 0x2a,
            uuidByte4: 0x98
        )

        /// Weight Measurement. ID is `org.bluetooth.characteristic.weight_measurement`.
        public static let weightMeasurement = AssignedNumberWithID(
            name: "Weight Measurement",
            id: "org.bluetooth.characteristic.weight_measurement",
            uuidByte3: 0x2a,
            uuidByte4: 0x9d
        )

        /// Weight Scale Feature. ID is `org.bluetooth.characteristic.weight_scale_feature`.
        public static let weightScaleFeature = AssignedNumberWithID(
            name: "Weight Scale Feature",
            id: "org.bluetooth.characteristic.weight_scale_feature",
            uuidByte3: 0x2a,
            uuidByte4: 0x9e
        )

        /// Wind Chill. ID is `org.bluetooth.characteristic.wind_chill`.
        public static let windChill = AssignedNumberWithID(
            name: "Wind Chill",
            id: "org.bluetooth.characteristic.wind_chill",
            uuidByte3: 0x2a,
            uuidByte4: 0x79
        )

        public static let all: [any AssignedNumberProtocol] = [
            acsControlPoint,
            acsDataIn,
            acsDataOutIndicate,
            acsDataOutNotify,
            acsStatus,
            activePresetIndex,
            activityGoal,
            advertisingConstantToneExtensionInterval,
            advertisingConstantToneExtensionMinimumLength,
            advertisingConstantToneExtensionMinimumTransmitCount,
            advertisingConstantToneExtensionPhy,
            advertisingConstantToneExtensionTransmitDuration,
            aerobicHeartRateLowerLimit,
            aerobicHeartRateUpperLimit,
            aerobicThreshold,
            age,
            aggregate,
            alertCategoryId,
            alertCategoryIdBitMask,
            alertLevel,
            alertNotificationControlPoint,
            alertStatus,
            altitude,
            ammoniaConcentration,
            anaerobicHeartRateLowerLimit,
            anaerobicHeartRateUpperLimit,
            anaerobicThreshold,
            apSyncKeyMaterial,
            apparentEnergy32,
            apparentPower,
            apparentWindDirection,
            apparentWindSpeed,
            appearance,
            aseControlPoint,
            audioInputControlPoint,
            audioInputDescription,
            audioInputState,
            audioInputStatus,
            audioInputType,
            audioLocation,
            audioOutputDescription,
            availableAudioContexts,
            averageCurrent,
            averageVoltage,
            barometricPressureTrend,
            batteryCriticalStatus,
            batteryEnergyStatus,
            batteryHealthInformation,
            batteryHealthStatus,
            batteryInformation,
            batteryLevel,
            batteryLevelStatus,
            batteryTimeStatus,
            bearerListCurrentCalls,
            bearerProviderName,
            bearerSignalStrength,
            bearerSignalStrengthReportingInterval,
            bearerTechnology,
            bearerUci,
            bearerUriSchemesSupportedList,
            bgrFeatures,
            bgsFeatures,
            bloodPressureFeature,
            bloodPressureMeasurement,
            bloodPressureRecord,
            bluetoothSigData,
            bodyCompositionFeature,
            bodyCompositionMeasurement,
            bodySensorLocation,
            bondManagementControlPoint,
            bondManagementFeature,
            boolean,
            bootKeyboardInputReport,
            bootKeyboardOutputReport,
            bootMouseInputReport,
            bredrHandoverData,
            broadcastAudioScanControlPoint,
            broadcastReceiveState,
            bssControlPoint,
            bssResponse,
            callControlPoint,
            callControlPointOptionalOpcodes,
            callFriendlyName,
            callState,
            caloricIntake,
            carbonMonoxideConcentration,
            cardiorespiratoryActivityInstantaneousData,
            cardiorespiratoryActivitySummaryData,
            centralAddressResolution,
            cgmFeature,
            cgmMeasurement,
            cgmSessionRunTime,
            cgmSessionStartTime,
            cgmSpecificOpsControlPoint,
            cgmStatus,
            chromaticDistanceFromPlanckian,
            chromaticityCoordinate,
            chromaticityCoordinates,
            chromaticityInCctAndDuvValues,
            chromaticityTolerance,
            cie1331995ColorRenderingIndex,
            clientSupportedFeatures,
            coefficient,
            constantToneExtensionEnable,
            contentControlId,
            coordinatedSetSize,
            correlatedColorTemperature,
            cosineOfTheAngle,
            cotextsubscript2Concentration,
            count16,
            count24,
            countryCode,
            crossTrainerData,
            cscFeature,
            cscMeasurement,
            currentElapsedTime,
            currentGroupObjectId,
            currentTime,
            currentTrackObjectId,
            currentTrackSegmentsObjectId,
            cyclingPowerControlPoint,
            cyclingPowerFeature,
            cyclingPowerMeasurement,
            cyclingPowerVector,
            databaseChangeIncrement,
            databaseHash,
            dateOfBirth,
            dateOfThresholdAssessment,
            dateTime,
            dateUtc,
            dayDateTime,
            dayOfWeek,
            descriptorValueChanged,
            deviceName,
            deviceTime,
            deviceTimeControlPoint,
            deviceTimeFeature,
            deviceTimeParameters,
            deviceWearingPosition,
            dewPoint,
            dstOffset,
            electricCurrent,
            electricCurrentRange,
            electricCurrentSpecification,
            electricCurrentStatistics,
            elevation,
            emailAddress,
            emergencyId,
            emergencyText,
            encryptedDataKeyMaterial,
            energy,
            energy32,
            energyInAPeriodOfDay,
            enhancedBloodPressureMeasurement,
            enhancedIntermediateCuffPressure,
            eslAddress,
            eslControlPoint,
            eslCurrentAbsoluteTime,
            eslDisplayInformation,
            eslImageInformation,
            eslLedInformation,
            eslResponseKeyMaterial,
            eslSensorInformation,
            estimatedServiceDate,
            eventStatistics,
            exactTime256,
            fatBurnHeartRateLowerLimit,
            fatBurnHeartRateUpperLimit,
            firmwareRevisionString,
            firstName,
            fitnessMachineControlPoint,
            fitnessMachineFeature,
            fitnessMachineStatus,
            fiveZoneHeartRateLimits,
            fixedString16,
            fixedString24,
            fixedString36,
            fixedString64,
            fixedString8,
            floorNumber,
            fourZoneHeartRateLimits,
            gainSettingsAttribute,
            gender,
            generalActivityInstantaneousData,
            generalActivitySummaryData,
            genericLevel,
            ghsControlPoint,
            globalTradeItemNumber,
            glucoseFeature,
            glucoseMeasurement,
            glucoseMeasurementContext,
            gmapRole,
            gustFactor,
            handedness,
            hardwareRevisionString,
            healthSensorFeatures,
            hearingAidFeatures,
            hearingAidPresetControlPoint,
            heartRateControlPoint,
            heartRateMax,
            heartRateMeasurement,
            heatIndex,
            height,
            hidControlPoint,
            hidInformation,
            highIntensityExerciseThreshold,
            highResolutionHeight,
            highTemperature,
            highVoltage,
            hipCircumference,
            httpControlPoint,
            httpEntityBody,
            httpHeaders,
            httpStatusCode,
            httpsSecurity,
            humidity,
            iddAnnunciationStatus,
            iddCommandControlPoint,
            iddCommandData,
            iddFeatures,
            iddHistoryData,
            iddRecordAccessControlPoint,
            iddStatus,
            iddStatusChanged,
            iddStatusReaderControlPoint,
            ieee1107320601RegulatoryCertificationDataList,
            illuminance,
            incomingCall,
            incomingCallTargetBearerUri,
            indoorBikeData,
            indoorPositioningConfiguration,
            intermediateCuffPressure,
            intermediateTemperature,
            irradiance,
            language,
            lastName,
            latitude,
            leGattSecurityLevels,
            lightDistribution,
            lightOutput,
            lightSourceType,
            liveHealthObservations,
            lnControlPoint,
            lnFeature,
            localEastCoordinate,
            localNorthCoordinate,
            localTimeInformation,
            locationAndSpeed,
            locationName,
            longitude,
            luminousEfficacy,
            luminousEnergy,
            luminousExposure,
            luminousFlux,
            luminousFluxRange,
            luminousIntensity,
            magneticDeclination,
            magneticFluxDensity2D,
            magneticFluxDensity3D,
            manufacturerNameString,
            massFlow,
            maximumRecommendedHeartRate,
            measurementInterval,
            mediaControlPoint,
            mediaControlPointOpcodesSupported,
            mediaPlayerIconObjectId,
            mediaPlayerIconUrl,
            mediaPlayerName,
            mediaState,
            meshProvisioningDataIn,
            meshProvisioningDataOut,
            meshProxyDataIn,
            meshProxyDataOut,
            methaneConcentration,
            middleName,
            modelNumberString,
            mute,
            navigation,
            newAlert,
            nextTrackObjectId,
            nitrogenDioxideConcentration,
            noise,
            nonmethaneVolatileOrganicCompoundsConcentration,
            objectActionControlPoint,
            objectChanged,
            objectFirstcreated,
            objectId,
            objectLastmodified,
            objectListControlPoint,
            objectListFilter,
            objectName,
            objectProperties,
            objectSize,
            objectType,
            observationScheduleChanged,
            otsFeature,
            ozoneConcentration,
            parentGroupObjectId,
            particulateMatterPm10Concentration,
            particulateMatterPm1Concentration,
            particulateMatterPm25Concentration,
            perceivedLightness,
            percentage8,
            percentage8Steps,
            peripheralPreferredConnectionParameters,
            peripheralPrivacyFlag,
            physicalActivityCurrentSession,
            physicalActivityMonitorControlPoint,
            physicalActivityMonitorFeatures,
            physicalActivitySessionDescriptor,
            playbackSpeed,
            playingOrder,
            playingOrdersSupported,
            plxContinuousMeasurement,
            plxFeatures,
            plxSpotcheckMeasurement,
            pnpId,
            pollenConcentration,
            positionQuality,
            power,
            powerSpecification,
            preferredUnits,
            pressure,
            protocolMode,
            rainfall,
            rcFeature,
            rcSettings,
            reconnectionAddress,
            reconnectionConfigurationControlPoint,
            recordAccessControlPoint,
            referenceTimeInformation,
            registeredUser,
            relativeRuntimeInACorrelatedColorTemperatureRange,
            relativeRuntimeInACurrentRange,
            relativeRuntimeInAGenericLevelRange,
            relativeValueInAPeriodOfDay,
            relativeValueInATemperatureRange,
            relativeValueInAVoltageRange,
            relativeValueInAnIlluminanceRange,
            report,
            reportMap,
            resolvablePrivateAddressOnly,
            restingHeartRate,
            ringerControlPoint,
            ringerSetting,
            rowerData,
            rscFeature,
            rscMeasurement,
            scControlPoint,
            scanIntervalWindow,
            scanRefresh,
            searchControlPoint,
            searchResultsObjectId,
            sedentaryIntervalNotification,
            seekingSpeed,
            sensorLocation,
            serialNumberString,
            serverSupportedFeatures,
            serviceChanged,
            setIdentityResolvingKey,
            setMemberLock,
            setMemberRank,
            sinkAse,
            sinkAudioLocations,
            sinkPac,
            sleepActivityInstantaneousData,
            sleepActivitySummaryData,
            softwareRevisionString,
            sourceAse,
            sourceAudioLocations,
            sourcePac,
            sportTypeForAerobicAndAnaerobicThresholds,
            stairClimberData,
            statusFlags,
            stepClimberData,
            stepCounterActivitySummaryData,
            storedHealthObservations,
            strideLength,
            sulfurDioxideConcentration,
            sulfurHexafluorideConcentration,
            supportedAudioContexts,
            supportedHeartRateRange,
            supportedInclinationRange,
            supportedNewAlertCategory,
            supportedPowerRange,
            supportedResistanceLevelRange,
            supportedSpeedRange,
            supportedUnreadAlertCategory,
            systemId,
            tdsControlPoint,
            temperature,
            temperature8,
            temperature8InAPeriodOfDay,
            temperature8Statistics,
            temperatureMeasurement,
            temperatureRange,
            temperatureStatistics,
            temperatureType,
            terminationReason,
            threeZoneHeartRateLimits,
            timeAccuracy,
            timeChangeLogData,
            timeDecihour8,
            timeExponential8,
            timeHour24,
            timeMillisecond24,
            timeSecond16,
            timeSecond32,
            timeSecond8,
            timeSource,
            timeUpdateControlPoint,
            timeUpdateState,
            timeWithDst,
            timeZone,
            tmapRole,
            trackChanged,
            trackDuration,
            trackPosition,
            trackTitle,
            trainingStatus,
            treadmillData,
            trueWindDirection,
            trueWindSpeed,
            twoZoneHeartRateLimits,
            txPowerLevel,
            udiForMedicalDevices,
            uggFeatures,
            ugtFeatures,
            uncertainty,
            unreadAlertStatus,
            uri,
            userControlPoint,
            userIndex,
            uvIndex,
            vo2Max,
            vocConcentration,
            voltage,
            voltageFrequency,
            voltageSpecification,
            voltageStatistics,
            volumeControlPoint,
            volumeFlags,
            volumeFlow,
            volumeOffsetControlPoint,
            volumeOffsetState,
            volumeState,
            waistCircumference,
            weight,
            weightMeasurement,
            weightScaleFeature,
            windChill,
        ]
    }

    /// From `assigned_numbers/uuids/declarations.yaml`.
    public enum Declarations {
        /// Characteristic. ID is `org.bluetooth.attribute.gatt.characteristic_declaration`.
        public static let characteristic = AssignedNumberWithID(
            name: "Characteristic",
            id: "org.bluetooth.attribute.gatt.characteristic_declaration",
            uuidByte3: 0x28,
            uuidByte4: 0x3
        )

        /// Include. ID is `org.bluetooth.attribute.gatt.include_declaration`.
        public static let include = AssignedNumberWithID(
            name: "Include",
            id: "org.bluetooth.attribute.gatt.include_declaration",
            uuidByte3: 0x28,
            uuidByte4: 0x2
        )

        /// Primary Service. ID is `org.bluetooth.attribute.gatt.primary_service_declaration`.
        public static let primaryService = AssignedNumberWithID(
            name: "Primary Service",
            id: "org.bluetooth.attribute.gatt.primary_service_declaration",
            uuidByte3: 0x28,
            uuidByte4: 0x0
        )

        /// Secondary Service. ID is `org.bluetooth.attribute.gatt.secondary_service_declaration`.
        public static let secondaryService = AssignedNumberWithID(
            name: "Secondary Service",
            id: "org.bluetooth.attribute.gatt.secondary_service_declaration",
            uuidByte3: 0x28,
            uuidByte4: 0x1
        )

        public static let all: [any AssignedNumberProtocol] = [
            characteristic,
            include,
            primaryService,
            secondaryService,
        ]
    }

    /// From `assigned_numbers/uuids/descriptors.yaml`.
    public enum Descriptors {
        /// Characteristic Aggregate Format. ID is `org.bluetooth.descriptor.gatt.characteristic_aggregate_format`.
        public static let characteristicAggregateFormat = AssignedNumberWithID(
            name: "Characteristic Aggregate Format",
            id: "org.bluetooth.descriptor.gatt.characteristic_aggregate_format",
            uuidByte3: 0x29,
            uuidByte4: 0x5
        )

        /// Characteristic Extended Properties. ID is `org.bluetooth.descriptor.gatt.characteristic_extended_properties`.
        public static let characteristicExtendedProperties = AssignedNumberWithID(
            name: "Characteristic Extended Properties",
            id: "org.bluetooth.descriptor.gatt.characteristic_extended_properties",
            uuidByte3: 0x29,
            uuidByte4: 0x0
        )

        /// Characteristic Presentation Format. ID is `org.bluetooth.descriptor.gatt.characteristic_presentation_format`.
        public static let characteristicPresentationFormat = AssignedNumberWithID(
            name: "Characteristic Presentation Format",
            id: "org.bluetooth.descriptor.gatt.characteristic_presentation_format",
            uuidByte3: 0x29,
            uuidByte4: 0x4
        )

        /// Characteristic User Description. ID is `org.bluetooth.descriptor.gatt.characteristic_user_description`.
        public static let characteristicUserDescription = AssignedNumberWithID(
            name: "Characteristic User Description",
            id: "org.bluetooth.descriptor.gatt.characteristic_user_description",
            uuidByte3: 0x29,
            uuidByte4: 0x1
        )

        /// Client Characteristic Configuration. ID is `org.bluetooth.descriptor.gatt.client_characteristic_configuration`.
        public static let clientCharacteristicConfiguration = AssignedNumberWithID(
            name: "Client Characteristic Configuration",
            id: "org.bluetooth.descriptor.gatt.client_characteristic_configuration",
            uuidByte3: 0x29,
            uuidByte4: 0x2
        )

        /// Complete BR-EDR Transport Block Data. ID is `org.bluetooth.descriptor.complete_br_edr_transport_block_data`.
        public static let completeBredrTransportBlockData = AssignedNumberWithID(
            name: "Complete BR-EDR Transport Block Data",
            id: "org.bluetooth.descriptor.complete_br_edr_transport_block_data",
            uuidByte3: 0x29,
            uuidByte4: 0xf
        )

        /// Environmental Sensing Configuration. ID is `org.bluetooth.descriptor.es_configuration`.
        public static let environmentalSensingConfiguration = AssignedNumberWithID(
            name: "Environmental Sensing Configuration",
            id: "org.bluetooth.descriptor.es_configuration",
            uuidByte3: 0x29,
            uuidByte4: 0xb
        )

        /// Environmental Sensing Measurement. ID is `org.bluetooth.descriptor.es_measurement`.
        public static let environmentalSensingMeasurement = AssignedNumberWithID(
            name: "Environmental Sensing Measurement",
            id: "org.bluetooth.descriptor.es_measurement",
            uuidByte3: 0x29,
            uuidByte4: 0xc
        )

        /// Environmental Sensing Trigger Setting. ID is `org.bluetooth.descriptor.es_trigger_setting`.
        public static let environmentalSensingTriggerSetting = AssignedNumberWithID(
            name: "Environmental Sensing Trigger Setting",
            id: "org.bluetooth.descriptor.es_trigger_setting",
            uuidByte3: 0x29,
            uuidByte4: 0xd
        )

        /// External Report Reference. ID is `org.bluetooth.descriptor.external_report_reference`.
        public static let externalReportReference = AssignedNumberWithID(
            name: "External Report Reference",
            id: "org.bluetooth.descriptor.external_report_reference",
            uuidByte3: 0x29,
            uuidByte4: 0x7
        )

        /// Number of Digitals. ID is `org.bluetooth.descriptor.number_of_digitals`.
        public static let numberOfDigitals = AssignedNumberWithID(
            name: "Number of Digitals",
            id: "org.bluetooth.descriptor.number_of_digitals",
            uuidByte3: 0x29,
            uuidByte4: 0x9
        )

        /// Observation Schedule. ID is `org.bluetooth.descriptor.observation_schedule`.
        public static let observationSchedule = AssignedNumberWithID(
            name: "Observation Schedule",
            id: "org.bluetooth.descriptor.observation_schedule",
            uuidByte3: 0x29,
            uuidByte4: 0x10
        )

        /// Report Reference. ID is `org.bluetooth.descriptor.report_reference`.
        public static let reportReference = AssignedNumberWithID(
            name: "Report Reference",
            id: "org.bluetooth.descriptor.report_reference",
            uuidByte3: 0x29,
            uuidByte4: 0x8
        )

        /// Server Characteristic Configuration. ID is `org.bluetooth.descriptor.gatt.server_characteristic_configuration`.
        public static let serverCharacteristicConfiguration = AssignedNumberWithID(
            name: "Server Characteristic Configuration",
            id: "org.bluetooth.descriptor.gatt.server_characteristic_configuration",
            uuidByte3: 0x29,
            uuidByte4: 0x3
        )

        /// Time Trigger Setting. ID is `org.bluetooth.descriptor.time_trigger_setting`.
        public static let timeTriggerSetting = AssignedNumberWithID(
            name: "Time Trigger Setting",
            id: "org.bluetooth.descriptor.time_trigger_setting",
            uuidByte3: 0x29,
            uuidByte4: 0xe
        )

        /// Valid Range. ID is `org.bluetooth.descriptor.valid_range`.
        public static let validRange = AssignedNumberWithID(
            name: "Valid Range",
            id: "org.bluetooth.descriptor.valid_range",
            uuidByte3: 0x29,
            uuidByte4: 0x6
        )

        /// Valid Range and Accuracy. ID is `org.bluetooth.descriptor.valid_range_accuracy`.
        public static let validRangeAndAccuracy = AssignedNumberWithID(
            name: "Valid Range and Accuracy",
            id: "org.bluetooth.descriptor.valid_range_accuracy",
            uuidByte3: 0x29,
            uuidByte4: 0x11
        )

        /// Value Trigger Setting. ID is `org.bluetooth.descriptor.value_trigger_setting`.
        public static let valueTriggerSetting = AssignedNumberWithID(
            name: "Value Trigger Setting",
            id: "org.bluetooth.descriptor.value_trigger_setting",
            uuidByte3: 0x29,
            uuidByte4: 0xa
        )

        public static let all: [any AssignedNumberProtocol] = [
            characteristicAggregateFormat,
            characteristicExtendedProperties,
            characteristicPresentationFormat,
            characteristicUserDescription,
            clientCharacteristicConfiguration,
            completeBredrTransportBlockData,
            environmentalSensingConfiguration,
            environmentalSensingMeasurement,
            environmentalSensingTriggerSetting,
            externalReportReference,
            numberOfDigitals,
            observationSchedule,
            reportReference,
            serverCharacteristicConfiguration,
            timeTriggerSetting,
            validRange,
            validRangeAndAccuracy,
            valueTriggerSetting,
        ]
    }

    /// From `assigned_numbers/uuids/member_uuids.yaml`.
    public enum MemberUuids {
        /// 360fly, Inc..
        public static let _360flyInc = AssignedNumberWithoutID(
            name: "360fly, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xc3
        )

        /// 3M.
        public static let _3m = AssignedNumberWithoutID(
            name: "3M",
            uuidByte3: 0xfe,
            uuidByte4: 0x53
        )

        /// 4iiii Innovations Inc..
        public static let _4iiiiInnovationsInc = AssignedNumberWithoutID(
            name: "4iiii Innovations Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xdc
        )

        /// 701x.
        public static let _701x = AssignedNumberWithoutID(
            name: "701x",
            uuidByte3: 0xfc,
            uuidByte4: 0xff
        )

        /// 70mai Co.,Ltd..
        public static let _70maiColtd = AssignedNumberWithoutID(
            name: "70mai Co.,Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0x4e
        )

        /// ABB Oy.
        public static let abbOy = AssignedNumberWithoutID(
            name: "ABB Oy",
            uuidByte3: 0xfd,
            uuidByte4: 0x99
        )

        /// Abbott.
        public static let abbott = AssignedNumberWithoutID(
            name: "Abbott",
            uuidByte3: 0xfd,
            uuidByte4: 0x86
        )

        /// Abbott Diabetes Care.
        public static let abbottDiabetesCare = AssignedNumberWithoutID(
            name: "Abbott Diabetes Care",
            uuidByte3: 0xfd,
            uuidByte4: 0xe3
        )

        /// Abbott (formerly St. Jude Medical, Inc.).
        public static let abbottFormerlyStJudeMedicalInc = AssignedNumberWithoutID(
            name: "Abbott (formerly St. Jude Medical, Inc.)",
            uuidByte3: 0xfe,
            uuidByte4: 0x73
        )

        /// aconno GmbH.
        public static let aconnoGmbh = AssignedNumberWithoutID(
            name: "aconno GmbH",
            uuidByte3: 0xfc,
            uuidByte4: 0xdb
        )

        /// adafruit industries.
        public static let adafruitIndustries = AssignedNumberWithoutID(
            name: "adafruit industries",
            uuidByte3: 0xfe,
            uuidByte4: 0xbb
        )

        /// ADHERIUM(NZ) LIMITED.
        public static let adheriumnzLimited = AssignedNumberWithoutID(
            name: "ADHERIUM(NZ) LIMITED",
            uuidByte3: 0xfd,
            uuidByte4: 0xfe
        )

        /// Adolf Wuerth GmbH & Co KG.
        public static let adolfWuerthGmbhCoKg = AssignedNumberWithoutID(
            name: "Adolf Wuerth GmbH & Co KG",
            uuidByte3: 0xfd,
            uuidByte4: 0x4c
        )

        /// AEON MOTOR CO.,LTD..
        public static let aeonMotorColtd = AssignedNumberWithoutID(
            name: "AEON MOTOR CO.,LTD.",
            uuidByte3: 0xfd,
            uuidByte4: 0x12
        )

        /// Aerosens LLC..
        public static let aerosensLlc = AssignedNumberWithoutID(
            name: "Aerosens LLC.",
            uuidByte3: 0xfd,
            uuidByte4: 0x34
        )

        /// AIAIAI ApS.
        public static let aiaiaiAps = AssignedNumberWithoutID(
            name: "AIAIAI ApS",
            uuidByte3: 0xfd,
            uuidByte4: 0xf6
        )

        /// Akciju sabiedriba "SAF TEHNIKA".
        public static let akcijuSabiedribaSafTehnika = AssignedNumberWithoutID(
            name: "Akciju sabiedriba \"SAF TEHNIKA\"",
            uuidByte3: 0xfc,
            uuidByte4: 0xe0
        )

        /// alibaba.
        public static let alibaba = AssignedNumberWithoutID(
            name: "alibaba",
            uuidByte3: 0xfe,
            uuidByte4: 0x3c
        )

        /// Allegion.
        public static let allegion = AssignedNumberWithoutID(
            name: "Allegion",
            uuidByte3: 0xfc,
            uuidByte4: 0xf4
        )

        /// Allterco Robotics ltd.
        public static let alltercoRoboticsLtd = AssignedNumberWithoutID(
            name: "Allterco Robotics ltd",
            uuidByte3: 0xfc,
            uuidByte4: 0xd2
        )

        /// Allthenticate, Inc..
        public static let allthenticateInc = AssignedNumberWithoutID(
            name: "Allthenticate, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xc8
        )

        /// AltoBeam Inc..
        public static let altobeamInc = AssignedNumberWithoutID(
            name: "AltoBeam Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xaf
        )

        /// Amazon Lab126.
        public static let amazonLab126 = AssignedNumberWithoutID(
            name: "Amazon Lab126",
            uuidByte3: 0xfd,
            uuidByte4: 0x41
        )

        /// Amazon.com Services, Inc...
        public static let amazoncomServicesInc = AssignedNumberWithoutID(
            name: "Amazon.com Services, Inc..",
            uuidByte3: 0xfe,
            uuidByte4: 0x15
        )

        /// Amazon.com Services, LLC.
        public static let amazoncomServicesLlc = AssignedNumberWithoutID(
            name: "Amazon.com Services, LLC",
            uuidByte3: 0xfc,
            uuidByte4: 0xdc
        )

        /// Amersports.
        public static let amersports = AssignedNumberWithoutID(
            name: "Amersports",
            uuidByte3: 0xfd,
            uuidByte4: 0xf3
        )

        /// AMICCOM Electronics Corporation.
        public static let amiccomElectronicsCorporation = AssignedNumberWithoutID(
            name: "AMICCOM Electronics Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0xf2
        )

        /// Andreas Stihl AG & Co. KG.
        public static let andreasStihlAgCoKg = AssignedNumberWithoutID(
            name: "Andreas Stihl AG & Co. KG",
            uuidByte3: 0xfe,
            uuidByte4: 0x43
        )

        /// Anhui Huami Information Technology Co., Ltd..
        public static let anhuiHuamiInformationTechnologyCoLtd = AssignedNumberWithoutID(
            name: "Anhui Huami Information Technology Co., Ltd.",
            uuidByte3: 0xfe,
            uuidByte4: 0xe1
        )

        /// Anki, Inc..
        public static let ankiInc = AssignedNumberWithoutID(
            name: "Anki, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xe3
        )

        /// Aplix Corporation.
        public static let aplixCorporation = AssignedNumberWithoutID(
            name: "Aplix Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0xf8
        )

        /// Appex Factory S.L..
        public static let appexFactorySl = AssignedNumberWithoutID(
            name: "Appex Factory S.L.",
            uuidByte3: 0xfc,
            uuidByte4: 0xd8
        )

        /// Apple, Inc..
        public static let appleInc = AssignedNumberWithoutID(
            name: "Apple, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xd4
        )

        /// Arch Systems Inc.
        public static let archSystemsInc = AssignedNumberWithoutID(
            name: "Arch Systems Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0xdd
        )

        /// ARCTOP, INC..
        public static let arctopInc = AssignedNumberWithoutID(
            name: "ARCTOP, INC.",
            uuidByte3: 0xfc,
            uuidByte4: 0xde
        )

        /// Arendi AG.
        public static let arendiAg = AssignedNumberWithoutID(
            name: "Arendi AG",
            uuidByte3: 0xfd,
            uuidByte4: 0x61
        )

        /// ARM Ltd.
        public static let armLtd = AssignedNumberWithoutID(
            name: "ARM Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0x8e
        )

        /// Armatura LLC.
        public static let armaturaLlc = AssignedNumberWithoutID(
            name: "Armatura LLC",
            uuidByte3: 0xfc,
            uuidByte4: 0xf3
        )

        /// ART AND PROGRAM, INC..
        public static let artAndProgramInc = AssignedNumberWithoutID(
            name: "ART AND PROGRAM, INC.",
            uuidByte3: 0xfd,
            uuidByte4: 0xef
        )

        /// Asahi Kasei Corporation.
        public static let asahiKaseiCorporation = AssignedNumberWithoutID(
            name: "Asahi Kasei Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x29
        )

        /// ASSA ABLOY Opening Solutions Sweden AB.
        public static let assaAbloyOpeningSolutionsSwedenAb = AssignedNumberWithoutID(
            name: "ASSA ABLOY Opening Solutions Sweden AB",
            uuidByte3: 0xfc,
            uuidByte4: 0xbf
        )

        /// Aterica Health Inc..
        public static let atericaHealthInc = AssignedNumberWithoutID(
            name: "Aterica Health Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x7d
        )

        /// Audiodo AB.
        public static let audiodoAb = AssignedNumberWithoutID(
            name: "Audiodo AB",
            uuidByte3: 0xfd,
            uuidByte4: 0xb3
        )

        /// August Home Inc.
        public static let augustHomeInc = AssignedNumberWithoutID(
            name: "August Home Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0x24
        )

        /// Automatic Labs.
        public static let automaticLabs = AssignedNumberWithoutID(
            name: "Automatic Labs",
            uuidByte3: 0xfd,
            uuidByte4: 0xc5
        )

        /// Avi-On.
        public static let avion = AssignedNumberWithoutID(
            name: "Avi-On",
            uuidByte3: 0xfc,
            uuidByte4: 0xeb
        )

        /// Awear Solutions Ltd.
        public static let awearSolutionsLtd = AssignedNumberWithoutID(
            name: "Awear Solutions Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0x7e
        )

        /// Axon Enterprise, Inc..
        public static let axonEnterpriseInc = AssignedNumberWithoutID(
            name: "Axon Enterprise, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0x81
        )

        /// Ayla Networks.
        public static let aylaNetworks = AssignedNumberWithoutID(
            name: "Ayla Networks",
            uuidByte3: 0xfe,
            uuidByte4: 0x28
        )

        /// Badger Meter.
        public static let badgerMeter = AssignedNumberWithoutID(
            name: "Badger Meter",
            uuidByte3: 0xfc,
            uuidByte4: 0x99
        )

        /// Baidu Online Network Technology (Beijing) Co., Ltd.
        public static let baiduOnlineNetworkTechnologyBeijingCoLtd = AssignedNumberWithoutID(
            name: "Baidu Online Network Technology (Beijing) Co., Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0xc3
        )

        /// Baracoda Daily Healthtech.
        public static let baracodaDailyHealthtech = AssignedNumberWithoutID(
            name: "Baracoda Daily Healthtech",
            uuidByte3: 0xfc,
            uuidByte4: 0xe2
        )

        /// Barrot Technology Co.,Ltd..
        public static let barrotTechnologyColtd = AssignedNumberWithoutID(
            name: "Barrot Technology Co.,Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0xfd
        )

        /// Bayerische Motoren Werke AG.
        public static let bayerischeMotorenWerkeAg = AssignedNumberWithoutID(
            name: "Bayerische Motoren Werke AG",
            uuidByte3: 0xfd,
            uuidByte4: 0x93
        )

        /// BD Medical.
        public static let bdMedical = AssignedNumberWithoutID(
            name: "BD Medical",
            uuidByte3: 0xfe,
            uuidByte4: 0x3e
        )

        /// Beflex Inc..
        public static let beflexInc = AssignedNumberWithoutID(
            name: "Beflex Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x40
        )

        /// Beijing 99help Safety Technology Co., Ltd.
        public static let beijing99HelpSafetyTechnologyCoLtd = AssignedNumberWithoutID(
            name: "Beijing 99help Safety Technology Co., Ltd",
            uuidByte3: 0xfc,
            uuidByte4: 0xad
        )

        /// Beijing Jingdong Century Trading Co., Ltd..
        public static let beijingJingdongCenturyTradingCoLtd = AssignedNumberWithoutID(
            name: "Beijing Jingdong Century Trading Co., Ltd.",
            uuidByte3: 0xfe,
            uuidByte4: 0x70
        )

        /// Binary Power, Inc..
        public static let binaryPowerInc = AssignedNumberWithoutID(
            name: "Binary Power, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0x9c
        )

        /// Bitstrata Systems Inc..
        public static let bitstrataSystemsInc = AssignedNumberWithoutID(
            name: "Bitstrata Systems Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x2f
        )

        /// Bitwards Oy.
        public static let bitwardsOy = AssignedNumberWithoutID(
            name: "Bitwards Oy",
            uuidByte3: 0xfc,
            uuidByte4: 0xf2
        )

        /// Blecon Ltd.
        public static let bleconLtd = AssignedNumberWithoutID(
            name: "Blecon Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0xd
        )

        /// Blue Bite.
        public static let blueBite = AssignedNumberWithoutID(
            name: "Blue Bite",
            uuidByte3: 0xfe,
            uuidByte4: 0x83
        )

        /// Blue Iris Labs, Inc..
        public static let blueIrisLabsInc = AssignedNumberWithoutID(
            name: "Blue Iris Labs, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0x8e
        )

        /// Blue Spark Technologies, Inc..
        public static let blueSparkTechnologiesInc = AssignedNumberWithoutID(
            name: "Blue Spark Technologies, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xc2
        )

        /// BlueID GmbH.
        public static let blueidGmbh = AssignedNumberWithoutID(
            name: "BlueID GmbH",
            uuidByte3: 0xfc,
            uuidByte4: 0xba
        )

        /// B&O Play A/S.
        public static let boPlayAs = AssignedNumberWithoutID(
            name: "B&O Play A/S",
            uuidByte3: 0xfe,
            uuidByte4: 0x89
        )

        /// Bose Corporation.
        public static let boseCorporation = AssignedNumberWithoutID(
            name: "Bose Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0xbe
        )

        /// Brady Worldwide Inc..
        public static let bradyWorldwideInc = AssignedNumberWithoutID(
            name: "Brady Worldwide Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x1c
        )

        /// Bragi GmbH.
        public static let bragiGmbh = AssignedNumberWithoutID(
            name: "Bragi GmbH",
            uuidByte3: 0xfe,
            uuidByte4: 0x7a
        )

        /// Braveheart Wireless, Inc..
        public static let braveheartWirelessInc = AssignedNumberWithoutID(
            name: "Braveheart Wireless, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x55
        )

        /// BRControls Products BV.
        public static let brcontrolsProductsBv = AssignedNumberWithoutID(
            name: "BRControls Products BV",
            uuidByte3: 0xfd,
            uuidByte4: 0x74
        )

        /// BRG Sports, Inc..
        public static let brgSportsInc = AssignedNumberWithoutID(
            name: "BRG Sports, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x14
        )

        /// Broadcom.
        public static let broadcom = AssignedNumberWithoutID(
            name: "Broadcom",
            uuidByte3: 0xfe,
            uuidByte4: 0xd7
        )

        /// Brompton Bicycle Ltd.
        public static let bromptonBicycleLtd = AssignedNumberWithoutID(
            name: "Brompton Bicycle Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0xd5
        )

        /// Bull Group Incorporated Company.
        public static let bullGroupIncorporatedCompany = AssignedNumberWithoutID(
            name: "Bull Group Incorporated Company",
            uuidByte3: 0xfd,
            uuidByte4: 0x8
        )

        /// Busch-Jaeger Elektro GmbH.
        public static let buschjaegerElektroGmbh = AssignedNumberWithoutID(
            name: "Busch-Jaeger Elektro GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0xc9
        )

        /// Caire Inc..
        public static let caireInc = AssignedNumberWithoutID(
            name: "Caire Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0x8d
        )

        /// California Things Inc..
        public static let californiaThingsInc = AssignedNumberWithoutID(
            name: "California Things Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xbf
        )

        /// CANDY HOUSE, Inc..
        public static let candyHouseInc = AssignedNumberWithoutID(
            name: "CANDY HOUSE, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x81
        )

        /// Capsle Technologies Inc..
        public static let capsleTechnologiesInc = AssignedNumberWithoutID(
            name: "Capsle Technologies Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x69
        )

        /// Casambi Technologies Oy.
        public static let casambiTechnologiesOy = AssignedNumberWithoutID(
            name: "Casambi Technologies Oy",
            uuidByte3: 0xfe,
            uuidByte4: 0x4d
        )

        /// CCC del Uruguay.
        public static let cccDelUruguay = AssignedNumberWithoutID(
            name: "CCC del Uruguay",
            uuidByte3: 0xfc,
            uuidByte4: 0x88
        )

        /// Center for Advanced Research Wernher Von Braun.
        public static let centerForAdvancedResearchWernherVonBraun = AssignedNumberWithoutID(
            name: "Center for Advanced Research Wernher Von Braun",
            uuidByte3: 0xfd,
            uuidByte4: 0x7d
        )

        /// Chess Wise B.V..
        public static let chessWiseBv = AssignedNumberWithoutID(
            name: "Chess Wise B.V.",
            uuidByte3: 0xfc,
            uuidByte4: 0xea
        )

        /// CHIPOLO d.o.o..
        public static let chipoloDoo = AssignedNumberWithoutID(
            name: "CHIPOLO d.o.o.",
            uuidByte3: 0xfe,
            uuidByte4: 0x65
        )

        /// Clover Network, Inc.
        public static let cloverNetworkInc = AssignedNumberWithoutID(
            name: "Clover Network, Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0xbd
        )

        /// Cognosos, Inc.
        public static let cognososInc = AssignedNumberWithoutID(
            name: "Cognosos, Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0x3f
        )

        /// Coin, Inc..
        public static let coinInc = AssignedNumberWithoutID(
            name: "Coin, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xde
        )

        /// Comcast Cable Corporation.
        public static let comcastCableCorporation = AssignedNumberWithoutID(
            name: "Comcast Cable Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0xba
        )

        /// Connected Yard, Inc..
        public static let connectedYardInc = AssignedNumberWithoutID(
            name: "Connected Yard, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x63
        )

        /// CORE Transport Technologies NZ Limited.
        public static let coreTransportTechnologiesNzLimited = AssignedNumberWithoutID(
            name: "CORE Transport Technologies NZ Limited",
            uuidByte3: 0xfe,
            uuidByte4: 0x5
        )

        /// Cosmed s.r.l..
        public static let cosmedSrl = AssignedNumberWithoutID(
            name: "Cosmed s.r.l.",
            uuidByte3: 0xfc,
            uuidByte4: 0xca
        )

        /// Cousins and Sears LLC.
        public static let cousinsAndSearsLlc = AssignedNumberWithoutID(
            name: "Cousins and Sears LLC",
            uuidByte3: 0xfd,
            uuidByte4: 0x9
        )

        /// CRESCO Wireless, Inc.
        public static let crescoWirelessInc = AssignedNumberWithoutID(
            name: "CRESCO Wireless, Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0x2f
        )

        /// Cronologics Corporation.
        public static let cronologicsCorporation = AssignedNumberWithoutID(
            name: "Cronologics Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0x5a
        )

        /// CSIRO.
        public static let csiro = AssignedNumberWithoutID(
            name: "CSIRO",
            uuidByte3: 0xfd,
            uuidByte4: 0x1a
        )

        /// CSR.
        public static let csr = AssignedNumberWithoutID(
            name: "CSR",
            uuidByte3: 0xfe,
            uuidByte4: 0xf2
        )

        /// Currant Inc.
        public static let currantInc = AssignedNumberWithoutID(
            name: "Currant Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0x99
        )

        /// DaisyWorks, Inc..
        public static let daisyworksInc = AssignedNumberWithoutID(
            name: "DaisyWorks, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x2a
        )

        /// Danfoss A/S.
        public static let danfossAs = AssignedNumberWithoutID(
            name: "Danfoss A/S",
            uuidByte3: 0xfd,
            uuidByte4: 0x38
        )

        /// DashLogic, Inc..
        public static let dashlogicInc = AssignedNumberWithoutID(
            name: "DashLogic, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x33
        )

        /// Dell Computer Corporation.
        public static let dellComputerCorporation = AssignedNumberWithoutID(
            name: "Dell Computer Corporation",
            uuidByte3: 0xfc,
            uuidByte4: 0x9e
        )

        /// Delta Development Team, Inc.
        public static let deltaDevelopmentTeamInc = AssignedNumberWithoutID(
            name: "Delta Development Team, Inc",
            uuidByte3: 0xfc,
            uuidByte4: 0x9f
        )

        /// Design SHIFT.
        public static let designShift = AssignedNumberWithoutID(
            name: "Design SHIFT",
            uuidByte3: 0xfe,
            uuidByte4: 0xdf
        )

        /// Dexcom Inc.
        public static let dexcomInc = AssignedNumberWithoutID(
            name: "Dexcom Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0xbc
        )

        /// Dialog Semiconductor B.V..
        public static let dialogSemiconductorBv = AssignedNumberWithoutID(
            name: "Dialog Semiconductor B.V.",
            uuidByte3: 0xfe,
            uuidByte4: 0x9e
        )

        /// Dialog Semiconductor GmbH.
        public static let dialogSemiconductorGmbh = AssignedNumberWithoutID(
            name: "Dialog Semiconductor GmbH",
            uuidByte3: 0xfe,
            uuidByte4: 0xf5
        )

        /// Disney Worldwide Services, Inc..
        public static let disneyWorldwideServicesInc = AssignedNumberWithoutID(
            name: "Disney Worldwide Services, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x98
        )

        /// Divesoft s.r.o..
        public static let divesoftSro = AssignedNumberWithoutID(
            name: "Divesoft s.r.o.",
            uuidByte3: 0xfc,
            uuidByte4: 0xef
        )

        /// Dolby Laboratories.
        public static let dolbyLaboratories = AssignedNumberWithoutID(
            name: "Dolby Laboratories",
            uuidByte3: 0xfe,
            uuidByte4: 0x3b
        )

        /// DOM Sicherheitstechnik GmbH & Co. KG.
        public static let domSicherheitstechnikGmbhCoKg = AssignedNumberWithoutID(
            name: "DOM Sicherheitstechnik GmbH & Co. KG",
            uuidByte3: 0xfd,
            uuidByte4: 0x23
        )

        /// Doppler Lab.
        public static let dopplerLab = AssignedNumberWithoutID(
            name: "Doppler Lab",
            uuidByte3: 0xfe,
            uuidByte4: 0x80
        )

        /// Dotted Labs.
        public static let dottedLabs = AssignedNumberWithoutID(
            name: "Dotted Labs",
            uuidByte3: 0xfe,
            uuidByte4: 0x57
        )

        /// Draeger.
        public static let draeger = AssignedNumberWithoutID(
            name: "Draeger",
            uuidByte3: 0xfc,
            uuidByte4: 0xda
        )

        /// Drowsy Digital, Inc..
        public static let drowsyDigitalInc = AssignedNumberWithoutID(
            name: "Drowsy Digital, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xbc
        )

        /// Duracell U.S. Operations Inc..
        public static let duracellUsOperationsInc = AssignedNumberWithoutID(
            name: "Duracell U.S. Operations Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x1
        )

        /// ECSG.
        public static let ecsg = AssignedNumberWithoutID(
            name: "ECSG",
            uuidByte3: 0xfd,
            uuidByte4: 0xb5
        )

        /// Electronics Tomorrow Limited.
        public static let electronicsTomorrowLimited = AssignedNumberWithoutID(
            name: "Electronics Tomorrow Limited",
            uuidByte3: 0xfe,
            uuidByte4: 0xb1
        )

        /// Eli Lilly and Company.
        public static let eliLillyAndCompany = AssignedNumberWithoutID(
            name: "Eli Lilly and Company",
            uuidByte3: 0xfd,
            uuidByte4: 0xc7
        )

        /// Emerson.
        public static let emerson = AssignedNumberWithoutID(
            name: "Emerson",
            uuidByte3: 0xfe,
            uuidByte4: 0x20
        )

        /// ERi,Inc..
        public static let eriinc = AssignedNumberWithoutID(
            name: "ERi,Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x2e
        )

        /// Estimote.
        public static let estimote = AssignedNumberWithoutID(
            name: "Estimote",
            uuidByte3: 0xfe,
            uuidByte4: 0x9a
        )

        /// Eyefi, Inc..
        public static let eyefiInc = AssignedNumberWithoutID(
            name: "Eyefi, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x5f
        )

        /// Fisher & Paykel Healthcare.
        public static let fisherPaykelHealthcare = AssignedNumberWithoutID(
            name: "Fisher & Paykel Healthcare",
            uuidByte3: 0xfc,
            uuidByte4: 0xd3
        )

        /// Flextronics International USA Inc..
        public static let flextronicsInternationalUsaInc = AssignedNumberWithoutID(
            name: "Flextronics International USA Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x14
        )

        /// Footmarks, Inc..
        public static let footmarksInc = AssignedNumberWithoutID(
            name: "Footmarks, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x16
        )

        /// Ford Motor Company.
        public static let fordMotorCompany = AssignedNumberWithoutID(
            name: "Ford Motor Company",
            uuidByte3: 0xfc,
            uuidByte4: 0xb0
        )

        /// Fortin Electronic Systems.
        public static let fortinElectronicSystems = AssignedNumberWithoutID(
            name: "Fortin Electronic Systems",
            uuidByte3: 0xfd,
            uuidByte4: 0xe1
        )

        /// Friday Labs Limited.
        public static let fridayLabsLimited = AssignedNumberWithoutID(
            name: "Friday Labs Limited",
            uuidByte3: 0xfe,
            uuidByte4: 0x3f
        )

        /// FUBA Automotive Electronics GmbH.
        public static let fubaAutomotiveElectronicsGmbh = AssignedNumberWithoutID(
            name: "FUBA Automotive Electronics GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0xd3
        )

        /// Furuno Electric Co., Ltd..
        public static let furunoElectricCoLtd = AssignedNumberWithoutID(
            name: "Furuno Electric Co., Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0x92
        )

        /// FUTEK Advanced Sensor Technology, Inc..
        public static let futekAdvancedSensorTechnologyInc = AssignedNumberWithoutID(
            name: "FUTEK Advanced Sensor Technology, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x0
        )

        /// Garmin International, Inc..
        public static let garminInternationalInc = AssignedNumberWithoutID(
            name: "Garmin International, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x1f
        )

        /// Gastec Corporation.
        public static let gastecCorporation = AssignedNumberWithoutID(
            name: "Gastec Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x9d
        )

        /// GB Solution co.,Ltd.
        public static let gbSolutionColtd = AssignedNumberWithoutID(
            name: "GB Solution co.,Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0x45
        )

        /// GD Midea Air-Conditioning Equipment Co., Ltd..
        public static let gdMideaAirconditioningEquipmentCoLtd = AssignedNumberWithoutID(
            name: "GD Midea Air-Conditioning Equipment Co., Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0x25
        )

        /// Geberit International AG.
        public static let geberitInternationalAg = AssignedNumberWithoutID(
            name: "Geberit International AG",
            uuidByte3: 0xfd,
            uuidByte4: 0x48
        )

        /// Gemalto Holding BV.
        public static let gemaltoHoldingBv = AssignedNumberWithoutID(
            name: "Gemalto Holding BV",
            uuidByte3: 0xfd,
            uuidByte4: 0x32
        )

        /// General Motors.
        public static let generalMotors = AssignedNumberWithoutID(
            name: "General Motors",
            uuidByte3: 0xfe,
            uuidByte4: 0x48
        )

        /// Gibson Innovations.
        public static let gibsonInnovations = AssignedNumberWithoutID(
            name: "Gibson Innovations",
            uuidByte3: 0xfe,
            uuidByte4: 0x29
        )

        /// Gimbal, Inc..
        public static let gimbalInc = AssignedNumberWithoutID(
            name: "Gimbal, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xfd
        )

        /// Globe (Jiangsu) Co.,Ltd.
        public static let globeJiangsuColtd = AssignedNumberWithoutID(
            name: "Globe (Jiangsu) Co.,Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0x42
        )

        /// GMC-I Messtechnik GmbH.
        public static let gmciMesstechnikGmbh = AssignedNumberWithoutID(
            name: "GMC-I Messtechnik GmbH",
            uuidByte3: 0xfe,
            uuidByte4: 0x11
        )

        /// GN Hearing A/S.
        public static let gnHearingAs = AssignedNumberWithoutID(
            name: "GN Hearing A/S",
            uuidByte3: 0xfe,
            uuidByte4: 0xfe
        )

        /// GN Netcom.
        public static let gnNetcom = AssignedNumberWithoutID(
            name: "GN Netcom",
            uuidByte3: 0xfe,
            uuidByte4: 0xff
        )

        /// Google LLC.
        public static let googleLlc = AssignedNumberWithoutID(
            name: "Google LLC",
            uuidByte3: 0xfe,
            uuidByte4: 0xf4
        )

        /// GoPro, Inc..
        public static let goproInc = AssignedNumberWithoutID(
            name: "GoPro, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xa6
        )

        /// Griffwerk GmbH.
        public static let griffwerkGmbh = AssignedNumberWithoutID(
            name: "Griffwerk GmbH",
            uuidByte3: 0xfc,
            uuidByte4: 0xec
        )

        /// Groove X, Inc.
        public static let grooveXInc = AssignedNumberWithoutID(
            name: "Groove X, Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0xa2
        )

        /// Grundfos A/S.
        public static let grundfosAs = AssignedNumberWithoutID(
            name: "Grundfos A/S",
            uuidByte3: 0xfe,
            uuidByte4: 0x5d
        )

        /// GSI Laboratories, Inc..
        public static let gsiLaboratoriesInc = AssignedNumberWithoutID(
            name: "GSI Laboratories, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x9c
        )

        /// GT-tronics HK Ltd.
        public static let gttronicsHkLtd = AssignedNumberWithoutID(
            name: "GT-tronics HK Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0x5b
        )

        /// GuangDong Oppo Mobile Telecommunications Corp., Ltd.
        public static let guangdongOppoMobileTelecommunicationsCorpLtd = AssignedNumberWithoutID(
            name: "GuangDong Oppo Mobile Telecommunications Corp., Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0x70
        )

        /// Guangzhou SuperSound Information Technology Co.,Ltd.
        public static let guangzhouSupersoundInformationTechnologyColtd = AssignedNumberWithoutID(
            name: "Guangzhou SuperSound Information Technology Co.,Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0x90
        )

        /// Guard RFID Solutions Inc..
        public static let guardRfidSolutionsInc = AssignedNumberWithoutID(
            name: "Guard RFID Solutions Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xe6
        )

        /// Gunnebo Aktiebolag.
        public static let gunneboAktiebolag = AssignedNumberWithoutID(
            name: "Gunnebo Aktiebolag",
            uuidByte3: 0xfc,
            uuidByte4: 0xa3
        )

        /// GWA Hygiene GmbH.
        public static let gwaHygieneGmbh = AssignedNumberWithoutID(
            name: "GWA Hygiene GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0xb6
        )

        /// Hach – Danaher.
        public static let hachDanaher = AssignedNumberWithoutID(
            name: "Hach – Danaher",
            uuidByte3: 0xfd,
            uuidByte4: 0xc8
        )

        /// Hangzhou Tuya Information  Technology Co., Ltd.
        public static let hangzhouTuyaInformationTechnologyCoLtd = AssignedNumberWithoutID(
            name: "Hangzhou Tuya Information  Technology Co., Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0x50
        )

        /// Harman International.
        public static let harmanInternational = AssignedNumberWithoutID(
            name: "Harman International",
            uuidByte3: 0xfd,
            uuidByte4: 0xdf
        )

        /// HAYWARD INDUSTRIES, INC..
        public static let haywardIndustriesInc = AssignedNumberWithoutID(
            name: "HAYWARD INDUSTRIES, INC.",
            uuidByte3: 0xfc,
            uuidByte4: 0xa5
        )

        /// Helios Sports, Inc..
        public static let heliosSportsInc = AssignedNumberWithoutID(
            name: "Helios Sports, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x1b
        )

        /// HerdDogg, Inc.
        public static let herddoggInc = AssignedNumberWithoutID(
            name: "HerdDogg, Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0xe
        )

        /// Hewlett Packard Enterprise.
        public static let hewlettPackardEnterprise = AssignedNumberWithoutID(
            name: "Hewlett Packard Enterprise",
            uuidByte3: 0xfd,
            uuidByte4: 0x94
        )

        /// Hewlett-Packard Company.
        public static let hewlettpackardCompany = AssignedNumberWithoutID(
            name: "Hewlett-Packard Company",
            uuidByte3: 0xfe,
            uuidByte4: 0x78
        )

        /// Hippo Camp Software Ltd..
        public static let hippoCampSoftwareLtd = AssignedNumberWithoutID(
            name: "Hippo Camp Software Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0x95
        )

        /// Honor Device Co., Ltd..
        public static let honorDeviceCoLtd = AssignedNumberWithoutID(
            name: "Honor Device Co., Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0xf8
        )

        /// Houwa System Design, k.k..
        public static let houwaSystemDesignKk = AssignedNumberWithoutID(
            name: "Houwa System Design, k.k.",
            uuidByte3: 0xfd,
            uuidByte4: 0xae
        )

        /// HP Inc..
        public static let hpInc = AssignedNumberWithoutID(
            name: "HP Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xf7
        )

        /// HUAWEI Technologies Co., Ltd.
        public static let huaweiTechnologiesCoLtd = AssignedNumberWithoutID(
            name: "HUAWEI Technologies Co., Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0x86
        )

        /// Hubble Network Inc..
        public static let hubbleNetworkInc = AssignedNumberWithoutID(
            name: "Hubble Network Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xa7
        )

        /// Hunter Douglas.
        public static let hunterDouglas = AssignedNumberWithoutID(
            name: "Hunter Douglas",
            uuidByte3: 0xfd,
            uuidByte4: 0xc1
        )

        /// Huso, INC.
        public static let husoInc = AssignedNumberWithoutID(
            name: "Huso, INC",
            uuidByte3: 0xfc,
            uuidByte4: 0xd9
        )

        /// Husqvarna AB.
        public static let husqvarnaAb = AssignedNumberWithoutID(
            name: "Husqvarna AB",
            uuidByte3: 0xfd,
            uuidByte4: 0x85
        )

        /// iHealth Labs, Inc..
        public static let ihealthLabsInc = AssignedNumberWithoutID(
            name: "iHealth Labs, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0x83
        )

        /// Illuminati Instrument Corporation.
        public static let illuminatiInstrumentCorporation = AssignedNumberWithoutID(
            name: "Illuminati Instrument Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0x1d
        )

        /// Imagine Marketing Limited.
        public static let imagineMarketingLimited = AssignedNumberWithoutID(
            name: "Imagine Marketing Limited",
            uuidByte3: 0xfc,
            uuidByte4: 0xae
        )

        /// Indagem Tech LLC.
        public static let indagemTechLlc = AssignedNumberWithoutID(
            name: "Indagem Tech LLC",
            uuidByte3: 0xfe,
            uuidByte4: 0x62
        )

        /// iNFORM Technology GmbH.
        public static let informTechnologyGmbh = AssignedNumberWithoutID(
            name: "iNFORM Technology GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0x83
        )

        /// INIA.
        public static let inia = AssignedNumberWithoutID(
            name: "INIA",
            uuidByte3: 0xfd,
            uuidByte4: 0xf9
        )

        /// INRIA.
        public static let inria = AssignedNumberWithoutID(
            name: "INRIA",
            uuidByte3: 0xfd,
            uuidByte4: 0x64
        )

        /// Inseego Corp..
        public static let inseegoCorp = AssignedNumberWithoutID(
            name: "Inseego Corp.",
            uuidByte3: 0xfd,
            uuidByte4: 0xa4
        )

        /// Insulet Corporation.
        public static let insuletCorporation = AssignedNumberWithoutID(
            name: "Insulet Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x76
        )

        /// Integrated Illumination Systems, Inc..
        public static let integratedIlluminationSystemsInc = AssignedNumberWithoutID(
            name: "Integrated Illumination Systems, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x27
        )

        /// Intel.
        public static let intel = AssignedNumberWithoutID(
            name: "Intel",
            uuidByte3: 0xfe,
            uuidByte4: 0xf0
        )

        /// Intel Corporation.
        public static let intelCorporation = AssignedNumberWithoutID(
            name: "Intel Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0x66
        )

        /// Intelletto Technologies Inc.
        public static let intellettoTechnologiesInc = AssignedNumberWithoutID(
            name: "Intelletto Technologies Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0xe6
        )

        /// Interaxon Inc..
        public static let interaxonInc = AssignedNumberWithoutID(
            name: "Interaxon Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x8d
        )

        /// Intrepid Control Systems, Inc..
        public static let intrepidControlSystemsInc = AssignedNumberWithoutID(
            name: "Intrepid Control Systems, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xa2
        )

        /// Inugo Systems Limited.
        public static let inugoSystemsLimited = AssignedNumberWithoutID(
            name: "Inugo Systems Limited",
            uuidByte3: 0xfe,
            uuidByte4: 0x41
        )

        /// IRISS INC..
        public static let irissInc = AssignedNumberWithoutID(
            name: "IRISS INC.",
            uuidByte3: 0xfc,
            uuidByte4: 0xac
        )

        /// ISSC Technologies Corp..
        public static let isscTechnologiesCorp = AssignedNumberWithoutID(
            name: "ISSC Technologies Corp.",
            uuidByte3: 0xfe,
            uuidByte4: 0xda
        )

        /// ITT Industries.
        public static let ittIndustries = AssignedNumberWithoutID(
            name: "ITT Industries",
            uuidByte3: 0xfe,
            uuidByte4: 0xa3
        )

        /// Japan Display Inc..
        public static let japanDisplayInc = AssignedNumberWithoutID(
            name: "Japan Display Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0x97
        )

        /// Jarden Safety & Security.
        public static let jardenSafetySecurity = AssignedNumberWithoutID(
            name: "Jarden Safety & Security",
            uuidByte3: 0xfe,
            uuidByte4: 0x92
        )

        /// Jawbone.
        public static let jawbone = AssignedNumberWithoutID(
            name: "Jawbone",
            uuidByte3: 0xfe,
            uuidByte4: 0xdd
        )

        /// Jiangsu Teranovo Tech Co., Ltd..
        public static let jiangsuTeranovoTechCoLtd = AssignedNumberWithoutID(
            name: "Jiangsu Teranovo Tech Co., Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0xd9
        )

        /// Jigowatts Inc..
        public static let jigowattsInc = AssignedNumberWithoutID(
            name: "Jigowatts Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x8b
        )

        /// John Deere.
        public static let johnDeere = AssignedNumberWithoutID(
            name: "John Deere",
            uuidByte3: 0xfd,
            uuidByte4: 0xe0
        )

        /// Julius Blum GmbH.
        public static let juliusBlumGmbh = AssignedNumberWithoutID(
            name: "Julius Blum GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0x28
        )

        /// JUMA.
        public static let juma = AssignedNumberWithoutID(
            name: "JUMA",
            uuidByte3: 0xfe,
            uuidByte4: 0x90
        )

        /// June Life, Inc..
        public static let juneLifeInc = AssignedNumberWithoutID(
            name: "June Life, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x97
        )

        /// JUUL Labs, Inc..
        public static let juulLabsInc = AssignedNumberWithoutID(
            name: "JUUL Labs, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xe4
        )

        /// Kaspersky Lab Middle East FZ-LLC.
        public static let kasperskyLabMiddleEastFzllc = AssignedNumberWithoutID(
            name: "Kaspersky Lab Middle East FZ-LLC",
            uuidByte3: 0xfc,
            uuidByte4: 0x8b
        )

        /// KDDI Corporation.
        public static let kddiCorporation = AssignedNumberWithoutID(
            name: "KDDI Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0xc1
        )

        /// Kocomojo, LLC.
        public static let kocomojoLlc = AssignedNumberWithoutID(
            name: "Kocomojo, LLC",
            uuidByte3: 0xfe,
            uuidByte4: 0xc6
        )

        /// Komatsu Ltd..
        public static let komatsuLtd = AssignedNumberWithoutID(
            name: "Komatsu Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0x93
        )

        /// Kontakt Micro-Location Sp. z o.o..
        public static let kontaktMicrolocationSpZOo = AssignedNumberWithoutID(
            name: "Kontakt Micro-Location Sp. z o.o.",
            uuidByte3: 0xfe,
            uuidByte4: 0x6a
        )

        /// Lab Sensor Solutions.
        public static let labSensorSolutions = AssignedNumberWithoutID(
            name: "Lab Sensor Solutions",
            uuidByte3: 0xfe,
            uuidByte4: 0x67
        )

        /// Laerdal Medical AS.
        public static let laerdalMedicalAs = AssignedNumberWithoutID(
            name: "Laerdal Medical AS",
            uuidByte3: 0xfc,
            uuidByte4: 0xd0
        )

        /// LAMPLIGHT Co., Ltd..
        public static let lamplightCoLtd = AssignedNumberWithoutID(
            name: "LAMPLIGHT Co., Ltd.",
            uuidByte3: 0xfe,
            uuidByte4: 0x2d
        )

        /// LAMPLIGHT Co.,Ltd.
        public static let lamplightColtd = AssignedNumberWithoutID(
            name: "LAMPLIGHT Co.,Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0xf1
        )

        /// LAPIS Technology Co., Ltd..
        public static let lapisTechnologyCoLtd = AssignedNumberWithoutID(
            name: "LAPIS Technology Co., Ltd.",
            uuidByte3: 0xfe,
            uuidByte4: 0x10
        )

        /// LEGIC Identsystems AG.
        public static let legicIdentsystemsAg = AssignedNumberWithoutID(
            name: "LEGIC Identsystems AG",
            uuidByte3: 0xfd,
            uuidByte4: 0x18
        )

        /// LEGO System A/S.
        public static let legoSystemAs = AssignedNumberWithoutID(
            name: "LEGO System A/S",
            uuidByte3: 0xfd,
            uuidByte4: 0x2
        )

        /// Lemco IKE.
        public static let lemcoIke = AssignedNumberWithoutID(
            name: "Lemco IKE",
            uuidByte3: 0xfd,
            uuidByte4: 0x46
        )

        /// Lenovo (Singapore) Pte Ltd..
        public static let lenovoSingaporePteLtd = AssignedNumberWithoutID(
            name: "Lenovo (Singapore) Pte Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0x9d
        )

        /// Leupold & Stevens, Inc..
        public static let leupoldStevensInc = AssignedNumberWithoutID(
            name: "Leupold & Stevens, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xfa
        )

        /// LG Electronics.
        public static let lgElectronics = AssignedNumberWithoutID(
            name: "LG Electronics",
            uuidByte3: 0xfe,
            uuidByte4: 0xb9
        )

        /// LG Electronics Inc..
        public static let lgElectronicsInc = AssignedNumberWithoutID(
            name: "LG Electronics Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x31
        )

        /// Liberty Global Inc..
        public static let libertyGlobalInc = AssignedNumberWithoutID(
            name: "Liberty Global Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x47
        )

        /// Lierda Science & Technology Group Co., Ltd..
        public static let lierdaScienceTechnologyGroupCoLtd = AssignedNumberWithoutID(
            name: "Lierda Science & Technology Group Co., Ltd.",
            uuidByte3: 0xfe,
            uuidByte4: 0x60
        )

        /// LINE Corporation.
        public static let lineCorporation = AssignedNumberWithoutID(
            name: "LINE Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0x6f
        )

        /// LivaNova USA Inc..
        public static let livanovaUsaInc = AssignedNumberWithoutID(
            name: "LivaNova USA Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xb8
        )

        /// Logitech International SA.
        public static let logitechInternationalSa = AssignedNumberWithoutID(
            name: "Logitech International SA",
            uuidByte3: 0xfe,
            uuidByte4: 0x61
        )

        /// Lumi United Technology Co., Ltd.
        public static let lumiUnitedTechnologyCoLtd = AssignedNumberWithoutID(
            name: "Lumi United Technology Co., Ltd",
            uuidByte3: 0xfc,
            uuidByte4: 0xb9
        )

        /// Luminostics, Inc..
        public static let luminosticsInc = AssignedNumberWithoutID(
            name: "Luminostics, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xb
        )

        /// Luna Health, Inc..
        public static let lunaHealthInc = AssignedNumberWithoutID(
            name: "Luna Health, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xce
        )

        /// LX Solutions Pty Limited.
        public static let lxSolutionsPtyLimited = AssignedNumberWithoutID(
            name: "LX Solutions Pty Limited",
            uuidByte3: 0xfd,
            uuidByte4: 0xd4
        )

        /// Mannkind Corporation.
        public static let mannkindCorporation = AssignedNumberWithoutID(
            name: "Mannkind Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0xec
        )

        /// Matrix ComSec Pvt. Ltd..
        public static let matrixComsecPvtLtd = AssignedNumberWithoutID(
            name: "Matrix ComSec Pvt. Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0x8f
        )

        /// maxon motor ltd..
        public static let maxonMotorLtd = AssignedNumberWithoutID(
            name: "maxon motor ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0x5d
        )

        /// Medtronic Inc..
        public static let medtronicInc = AssignedNumberWithoutID(
            name: "Medtronic Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x82
        )

        /// Meggitt SA.
        public static let meggittSa = AssignedNumberWithoutID(
            name: "Meggitt SA",
            uuidByte3: 0xfd,
            uuidByte4: 0xcb
        )

        /// Meizu Technology Co., Ltd..
        public static let meizuTechnologyCoLtd = AssignedNumberWithoutID(
            name: "Meizu Technology Co., Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0xa2
        )

        /// Merry Electronics (S) Pte Ltd.
        public static let merryElectronicsSPteLtd = AssignedNumberWithoutID(
            name: "Merry Electronics (S) Pte Ltd",
            uuidByte3: 0xfc,
            uuidByte4: 0x9b
        )

        /// Meta Platforms, Inc..
        public static let metaPlatformsInc = AssignedNumberWithoutID(
            name: "Meta Platforms, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xb8
        )

        /// Meta Platforms Technologies, LLC.
        public static let metaPlatformsTechnologiesLlc = AssignedNumberWithoutID(
            name: "Meta Platforms Technologies, LLC",
            uuidByte3: 0xfd,
            uuidByte4: 0x5f
        )

        /// MHCS.
        public static let mhcs = AssignedNumberWithoutID(
            name: "MHCS",
            uuidByte3: 0xfd,
            uuidByte4: 0xda
        )

        /// Microsoft.
        public static let microsoft = AssignedNumberWithoutID(
            name: "Microsoft",
            uuidByte3: 0xfe,
            uuidByte4: 0x8
        )

        /// Microsoft Corporation.
        public static let microsoftCorporation = AssignedNumberWithoutID(
            name: "Microsoft Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0xb2
        )

        /// million hunters GmbH.
        public static let millionHuntersGmbh = AssignedNumberWithoutID(
            name: "million hunters GmbH",
            uuidByte3: 0xfe,
            uuidByte4: 0x5c
        )

        /// Milwaukee Electric Tools.
        public static let milwaukeeElectricTools = AssignedNumberWithoutID(
            name: "Milwaukee Electric Tools",
            uuidByte3: 0xfd,
            uuidByte4: 0xf5
        )

        /// MindRhythm, Inc..
        public static let mindrhythmInc = AssignedNumberWithoutID(
            name: "MindRhythm, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xe9
        )

        /// Ministry of Supply.
        public static let ministryOfSupply = AssignedNumberWithoutID(
            name: "Ministry of Supply",
            uuidByte3: 0xfd,
            uuidByte4: 0xd6
        )

        /// Mobilaris AB.
        public static let mobilarisAb = AssignedNumberWithoutID(
            name: "Mobilaris AB",
            uuidByte3: 0xfc,
            uuidByte4: 0xdd
        )

        /// Mobiquity Networks Inc.
        public static let mobiquityNetworksInc = AssignedNumberWithoutID(
            name: "Mobiquity Networks Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0x9d
        )

        /// Molekule, Inc..
        public static let molekuleInc = AssignedNumberWithoutID(
            name: "Molekule, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x4f
        )

        /// Montblanc Simplo GmbH.
        public static let montblancSimploGmbh = AssignedNumberWithoutID(
            name: "Montblanc Simplo GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0x67
        )

        /// Motiv, Inc..
        public static let motivInc = AssignedNumberWithoutID(
            name: "Motiv, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x54
        )

        /// Motorola Solutions.
        public static let motorolaSolutions = AssignedNumberWithoutID(
            name: "Motorola Solutions",
            uuidByte3: 0xfd,
            uuidByte4: 0x8e
        )

        /// Motorola Solutions, Inc..
        public static let motorolaSolutionsInc = AssignedNumberWithoutID(
            name: "Motorola Solutions, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x4
        )

        /// Musen Connect, Inc..
        public static let musenConnectInc = AssignedNumberWithoutID(
            name: "Musen Connect, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xbe
        )

        /// M-Way Solutions GmbH.
        public static let mwaySolutionsGmbh = AssignedNumberWithoutID(
            name: "M-Way Solutions GmbH",
            uuidByte3: 0xfe,
            uuidByte4: 0x12
        )

        /// Nalu Medical, Inc.
        public static let naluMedicalInc = AssignedNumberWithoutID(
            name: "Nalu Medical, Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0xcf
        )

        /// Nest Labs Inc.
        public static let nestLabsInc = AssignedNumberWithoutID(
            name: "Nest Labs Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0xb0
        )

        /// NetMedia, Inc..
        public static let netmediaInc = AssignedNumberWithoutID(
            name: "NetMedia, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x1c
        )

        /// Nets A/S.
        public static let netsAs = AssignedNumberWithoutID(
            name: "Nets A/S",
            uuidByte3: 0xfe,
            uuidByte4: 0x42
        )

        /// Neurostim OAB, Inc..
        public static let neurostimOabInc = AssignedNumberWithoutID(
            name: "Neurostim OAB, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xa5
        )

        /// NINGBO FOTILE KITCHENWARE CO., LTD..
        public static let ningboFotileKitchenwareCoLtd = AssignedNumberWithoutID(
            name: "NINGBO FOTILE KITCHENWARE CO., LTD.",
            uuidByte3: 0xfc,
            uuidByte4: 0x84
        )

        /// NIO USA, Inc..
        public static let nioUsaInc = AssignedNumberWithoutID(
            name: "NIO USA, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xdf
        )

        /// Nod, Inc..
        public static let nodInc = AssignedNumberWithoutID(
            name: "Nod, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xbf
        )

        /// Nokia.
        public static let nokia = AssignedNumberWithoutID(
            name: "Nokia",
            uuidByte3: 0xfe,
            uuidByte4: 0xae
        )

        /// Noodle Technology Inc..
        public static let noodleTechnologyInc = AssignedNumberWithoutID(
            name: "Noodle Technology Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xde
        )

        /// Nordic Semiconductor ASA.
        public static let nordicSemiconductorAsa = AssignedNumberWithoutID(
            name: "Nordic Semiconductor ASA",
            uuidByte3: 0xfe,
            uuidByte4: 0xe5
        )

        /// Nortek Security & Control.
        public static let nortekSecurityControl = AssignedNumberWithoutID(
            name: "Nortek Security & Control",
            uuidByte3: 0xfc,
            uuidByte4: 0xd5
        )

        /// Novo Nordisk A/S.
        public static let novoNordiskAs = AssignedNumberWithoutID(
            name: "Novo Nordisk A/S",
            uuidByte3: 0xfd,
            uuidByte4: 0x26
        )

        /// NTT docomo.
        public static let nttDocomo = AssignedNumberWithoutID(
            name: "NTT docomo",
            uuidByte3: 0xfe,
            uuidByte4: 0x4e
        )

        /// O. E. M. Controls, Inc..
        public static let oEMControlsInc = AssignedNumberWithoutID(
            name: "O. E. M. Controls, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xf4
        )

        /// OMRON HEALTHCARE.
        public static let omronHealthcare = AssignedNumberWithoutID(
            name: "OMRON HEALTHCARE",
            uuidByte3: 0xfc,
            uuidByte4: 0xd4
        )

        /// OMRON HEALTHCARE Co., Ltd..
        public static let omronHealthcareCoLtd = AssignedNumberWithoutID(
            name: "OMRON HEALTHCARE Co., Ltd.",
            uuidByte3: 0xfe,
            uuidByte4: 0x4a
        )

        /// OMRON(DALIAN) CO,.LTD..
        public static let omrondalianColtd = AssignedNumberWithoutID(
            name: "OMRON(DALIAN) CO,.LTD.",
            uuidByte3: 0xfc,
            uuidByte4: 0xc5
        )

        /// Onvocal.
        public static let onvocal = AssignedNumberWithoutID(
            name: "Onvocal",
            uuidByte3: 0xfd,
            uuidByte4: 0xf8
        )

        /// Optrel AG.
        public static let optrelAg = AssignedNumberWithoutID(
            name: "Optrel AG",
            uuidByte3: 0xfd,
            uuidByte4: 0xfc
        )

        /// Orion Labs, Inc..
        public static let orionLabsInc = AssignedNumberWithoutID(
            name: "Orion Labs, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x7b
        )

        /// OSM HK Limited.
        public static let osmHkLimited = AssignedNumberWithoutID(
            name: "OSM HK Limited",
            uuidByte3: 0xfd,
            uuidByte4: 0xc
        )

        /// OSRAM GmbH.
        public static let osramGmbh = AssignedNumberWithoutID(
            name: "OSRAM GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0xff
        )

        /// OttoQ In.
        public static let ottoqIn = AssignedNumberWithoutID(
            name: "OttoQ In",
            uuidByte3: 0xfe,
            uuidByte4: 0x94
        )

        /// Oura Health Ltd.
        public static let ouraHealthLtd = AssignedNumberWithoutID(
            name: "Oura Health Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0xb1
        )

        /// Panasonic Corporation.
        public static let panasonicCorporation = AssignedNumberWithoutID(
            name: "Panasonic Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x49
        )

        /// Paxton Access Ltd.
        public static let paxtonAccessLtd = AssignedNumberWithoutID(
            name: "Paxton Access Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0xa4
        )

        /// PayPal, Inc..
        public static let paypalInc = AssignedNumberWithoutID(
            name: "PayPal, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xfa
        )

        /// PB INC..
        public static let pbInc = AssignedNumberWithoutID(
            name: "PB INC.",
            uuidByte3: 0xfc,
            uuidByte4: 0xc7
        )

        /// PCI Private Limited.
        public static let pciPrivateLimited = AssignedNumberWithoutID(
            name: "PCI Private Limited",
            uuidByte3: 0xfd,
            uuidByte4: 0x53
        )

        /// Pebble Technology Corporation.
        public static let pebbleTechnologyCorporation = AssignedNumberWithoutID(
            name: "Pebble Technology Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0xd9
        )

        /// Perka, Inc..
        public static let perkaInc = AssignedNumberWithoutID(
            name: "Perka, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xdb
        )

        /// PF SCHWEISSTECHNOLOGIE GMBH.
        public static let pfSchweisstechnologieGmbh = AssignedNumberWithoutID(
            name: "PF SCHWEISSTECHNOLOGIE GMBH",
            uuidByte3: 0xfc,
            uuidByte4: 0xa1
        )

        /// Phindex Technologies, Inc.
        public static let phindexTechnologiesInc = AssignedNumberWithoutID(
            name: "Phindex Technologies, Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0x80
        )

        /// Pillsy, Inc..
        public static let pillsyInc = AssignedNumberWithoutID(
            name: "Pillsy, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x9
        )

        /// Plantronics Inc..
        public static let plantronicsInc = AssignedNumberWithoutID(
            name: "Plantronics Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xd5
        )

        /// Plastc Corporation.
        public static let plastcCorporation = AssignedNumberWithoutID(
            name: "Plastc Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0x5e
        )

        /// Plockat Solutions AB.
        public static let plockatSolutionsAb = AssignedNumberWithoutID(
            name: "Plockat Solutions AB",
            uuidByte3: 0xfc,
            uuidByte4: 0x9a
        )

        /// Plume Design Inc.
        public static let plumeDesignInc = AssignedNumberWithoutID(
            name: "Plume Design Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0x71
        )

        /// PLUS Location Systems.
        public static let plusLocationSystems = AssignedNumberWithoutID(
            name: "PLUS Location Systems",
            uuidByte3: 0xfe,
            uuidByte4: 0xc4
        )

        /// Polar Electro Oy.
        public static let polarElectroOy = AssignedNumberWithoutID(
            name: "Polar Electro Oy",
            uuidByte3: 0xfe,
            uuidByte4: 0xef
        )

        /// Pole Star.
        public static let poleStar = AssignedNumberWithoutID(
            name: "Pole Star",
            uuidByte3: 0xfd,
            uuidByte4: 0xed
        )

        /// Polidea sp. z o.o..
        public static let polideaSpZOo = AssignedNumberWithoutID(
            name: "Polidea sp. z o.o.",
            uuidByte3: 0xfd,
            uuidByte4: 0x6e
        )

        /// Portable Multimedia Ltd.
        public static let portableMultimediaLtd = AssignedNumberWithoutID(
            name: "Portable Multimedia Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0xb2
        )

        /// PowerPal Pty Ltd.
        public static let powerpalPtyLtd = AssignedNumberWithoutID(
            name: "PowerPal Pty Ltd",
            uuidByte3: 0xfc,
            uuidByte4: 0xd7
        )

        /// PREDIKTAS.
        public static let prediktas = AssignedNumberWithoutID(
            name: "PREDIKTAS",
            uuidByte3: 0xfd,
            uuidByte4: 0x39
        )

        /// Procter & Gamble.
        public static let procterGamble = AssignedNumberWithoutID(
            name: "Procter & Gamble",
            uuidByte3: 0xfe,
            uuidByte4: 0xd
        )

        /// Profoto.
        public static let profoto = AssignedNumberWithoutID(
            name: "Profoto",
            uuidByte3: 0xfd,
            uuidByte4: 0xbb
        )

        /// Pro-Mark, Inc..
        public static let promarkInc = AssignedNumberWithoutID(
            name: "Pro-Mark, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x32
        )

        /// PSA Peugeot Citroën.
        public static let psaPeugeotCitroën = AssignedNumberWithoutID(
            name: "PSA Peugeot Citroën",
            uuidByte3: 0xfd,
            uuidByte4: 0xa8
        )

        /// Pure Watercraft, inc..
        public static let pureWatercraftInc = AssignedNumberWithoutID(
            name: "Pure Watercraft, inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x3e
        )

        /// Qingdao Haier Technology Co., Ltd..
        public static let qingdaoHaierTechnologyCoLtd = AssignedNumberWithoutID(
            name: "Qingdao Haier Technology Co., Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0x54
        )

        /// Qingdao Yeelink Information Technology Co., Ltd. ( 青岛亿联客信息技术有限公司 ).
        public static let qingdaoYeelinkInformationTechnologyCoLtd青岛亿联客信息技术有限公司 = AssignedNumberWithoutID(
            name: "Qingdao Yeelink Information Technology Co., Ltd. ( 青岛亿联客信息技术有限公司 )",
            uuidByte3: 0xfe,
            uuidByte4: 0x87
        )

        /// Qingping Technology (Beijing) Co., Ltd..
        public static let qingpingTechnologyBeijingCoLtd = AssignedNumberWithoutID(
            name: "Qingping Technology (Beijing) Co., Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0xcd
        )

        /// Qualcomm Technologies, Inc..
        public static let qualcommTechnologiesInc = AssignedNumberWithoutID(
            name: "Qualcomm Technologies, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x6
        )

        /// Qualcomm Technologies International, Ltd. (QTIL).
        public static let qualcommTechnologiesInternationalLtdQtil = AssignedNumberWithoutID(
            name: "Qualcomm Technologies International, Ltd. (QTIL)",
            uuidByte3: 0xfd,
            uuidByte4: 0x92
        )

        /// Quintic Corp..
        public static let quinticCorp = AssignedNumberWithoutID(
            name: "Quintic Corp.",
            uuidByte3: 0xfe,
            uuidByte4: 0xe9
        )

        /// quip NYC Inc..
        public static let quipNycInc = AssignedNumberWithoutID(
            name: "quip NYC Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x8d
        )

        /// Quuppa Oy.
        public static let quuppaOy = AssignedNumberWithoutID(
            name: "Quuppa Oy",
            uuidByte3: 0xfd,
            uuidByte4: 0x3
        )

        /// RACE-AI LLC.
        public static let raceaiLlc = AssignedNumberWithoutID(
            name: "RACE-AI LLC",
            uuidByte3: 0xfd,
            uuidByte4: 0x6
        )

        /// rapitag GmbH.
        public static let rapitagGmbh = AssignedNumberWithoutID(
            name: "rapitag GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0x6b
        )

        /// Razer Inc..
        public static let razerInc = AssignedNumberWithoutID(
            name: "Razer Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x65
        )

        /// React Mobile.
        public static let reactMobile = AssignedNumberWithoutID(
            name: "React Mobile",
            uuidByte3: 0xfd,
            uuidByte4: 0x5c
        )

        /// Realtek Semiconductor Corp..
        public static let realtekSemiconductorCorp = AssignedNumberWithoutID(
            name: "Realtek Semiconductor Corp.",
            uuidByte3: 0xfe,
            uuidByte4: 0xc5
        )

        /// RecursiveSoft Inc..
        public static let recursivesoftInc = AssignedNumberWithoutID(
            name: "RecursiveSoft Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xfd
        )

        /// Redline Communications Inc..
        public static let redlineCommunicationsInc = AssignedNumberWithoutID(
            name: "Redline Communications Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x3c
        )

        /// Resmed Ltd.
        public static let resmedLtd = AssignedNumberWithoutID(
            name: "Resmed Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0x56
        )

        /// RF Digital Corp.
        public static let rfDigitalCorp = AssignedNumberWithoutID(
            name: "RF Digital Corp",
            uuidByte3: 0xfe,
            uuidByte4: 0x85
        )

        /// Rhombus Systems, Inc..
        public static let rhombusSystemsInc = AssignedNumberWithoutID(
            name: "Rhombus Systems, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0xa9
        )

        /// Ribbiot, INC..
        public static let ribbiotInc = AssignedNumberWithoutID(
            name: "Ribbiot, INC.",
            uuidByte3: 0xfc,
            uuidByte4: 0xb8
        )

        /// Rigado.
        public static let rigado = AssignedNumberWithoutID(
            name: "Rigado",
            uuidByte3: 0xfd,
            uuidByte4: 0x95
        )

        /// Robert Bosch GmbH.
        public static let robertBoschGmbh = AssignedNumberWithoutID(
            name: "Robert Bosch GmbH",
            uuidByte3: 0xfe,
            uuidByte4: 0x2
        )

        /// Runtime, Inc..
        public static let runtimeInc = AssignedNumberWithoutID(
            name: "Runtime, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x18
        )

        /// Ruuvi Innovations Ltd..
        public static let ruuviInnovationsLtd = AssignedNumberWithoutID(
            name: "Ruuvi Innovations Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0x98
        )

        /// ruwido austria gmbh.
        public static let ruwidoAustriaGmbh = AssignedNumberWithoutID(
            name: "ruwido austria gmbh",
            uuidByte3: 0xfe,
            uuidByte4: 0xb
        )

        /// SALTO SYSTEMS S.L..
        public static let saltoSystemsSl = AssignedNumberWithoutID(
            name: "SALTO SYSTEMS S.L.",
            uuidByte3: 0xfe,
            uuidByte4: 0x88
        )

        /// Samsara Networks, Inc.
        public static let samsaraNetworksInc = AssignedNumberWithoutID(
            name: "Samsara Networks, Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0x9b
        )

        /// Samsung Electronics Co., Ltd..
        public static let samsungElectronicsCoLtd = AssignedNumberWithoutID(
            name: "Samsung Electronics Co., Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0xdb
        )

        /// Sanvita Medical Corporation.
        public static let sanvitaMedicalCorporation = AssignedNumberWithoutID(
            name: "Sanvita Medical Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x1
        )

        /// Savant Systems LLC.
        public static let savantSystemsLlc = AssignedNumberWithoutID(
            name: "Savant Systems LLC",
            uuidByte3: 0xfe,
            uuidByte4: 0xa9
        )

        /// SECOM Co., LTD.
        public static let secomCoLtd = AssignedNumberWithoutID(
            name: "SECOM Co., LTD",
            uuidByte3: 0xfd,
            uuidByte4: 0xe7
        )

        /// Secugen Corporation.
        public static let secugenCorporation = AssignedNumberWithoutID(
            name: "Secugen Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0xa0
        )

        /// Security Enhancement Systems, LLC.
        public static let securityEnhancementSystemsLlc = AssignedNumberWithoutID(
            name: "Security Enhancement Systems, LLC",
            uuidByte3: 0xfc,
            uuidByte4: 0xf0
        )

        /// SeeScan, Inc.
        public static let seescanInc = AssignedNumberWithoutID(
            name: "SeeScan, Inc",
            uuidByte3: 0xfd,
            uuidByte4: 0xea
        )

        /// SenionLab AB.
        public static let senionlabAb = AssignedNumberWithoutID(
            name: "SenionLab AB",
            uuidByte3: 0xfe,
            uuidByte4: 0x49
        )

        /// SENNHEISER electronic GmbH & Co. KG.
        public static let sennheiserElectronicGmbhCoKg = AssignedNumberWithoutID(
            name: "SENNHEISER electronic GmbH & Co. KG",
            uuidByte3: 0xfd,
            uuidByte4: 0xce
        )

        /// Sensitech, Inc..
        public static let sensitechInc = AssignedNumberWithoutID(
            name: "Sensitech, Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x16
        )

        /// Sercomm Corporation.
        public static let sercommCorporation = AssignedNumberWithoutID(
            name: "Sercomm Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x60
        )

        /// Sesam Solutions BV.
        public static let sesamSolutionsBv = AssignedNumberWithoutID(
            name: "Sesam Solutions BV",
            uuidByte3: 0xfd,
            uuidByte4: 0x30
        )

        /// SES-Imagotag.
        public static let sesimagotag = AssignedNumberWithoutID(
            name: "SES-Imagotag",
            uuidByte3: 0xfc,
            uuidByte4: 0x8c
        )

        /// Setec Pty Ltd.
        public static let setecPtyLtd = AssignedNumberWithoutID(
            name: "Setec Pty Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0xe
        )

        /// SetPoint Medical.
        public static let setpointMedical = AssignedNumberWithoutID(
            name: "SetPoint Medical",
            uuidByte3: 0xfe,
            uuidByte4: 0x52
        )

        /// Shanghai Imilab Technology Co.,Ltd.
        public static let shanghaiImilabTechnologyColtd = AssignedNumberWithoutID(
            name: "Shanghai Imilab Technology Co.,Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0x91
        )

        /// SharkNinja Operating LLC.
        public static let sharkninjaOperatingLlc = AssignedNumberWithoutID(
            name: "SharkNinja Operating LLC",
            uuidByte3: 0xfc,
            uuidByte4: 0xbb
        )

        /// Shenzhen Benwei Media Co., Ltd..
        public static let shenzhenBenweiMediaCoLtd = AssignedNumberWithoutID(
            name: "Shenzhen Benwei Media Co., Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0xfb
        )

        /// Shenzhen Benwei Media Co.,Ltd..
        public static let shenzhenBenweiMediaColtd = AssignedNumberWithoutID(
            name: "Shenzhen Benwei Media Co.,Ltd.",
            uuidByte3: 0xfc,
            uuidByte4: 0xd1
        )

        /// Shoof Technologies.
        public static let shoofTechnologies = AssignedNumberWithoutID(
            name: "Shoof Technologies",
            uuidByte3: 0xfd,
            uuidByte4: 0xcc
        )

        /// Shure Inc..
        public static let shureInc = AssignedNumberWithoutID(
            name: "Shure Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x4
        )

        /// Siemens AG.
        public static let siemensAg = AssignedNumberWithoutID(
            name: "Siemens AG",
            uuidByte3: 0xfe,
            uuidByte4: 0x64
        )

        /// Sigma Elektro GmbH.
        public static let sigmaElektroGmbh = AssignedNumberWithoutID(
            name: "Sigma Elektro GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0x6d
        )

        /// Signify Netherlands B.V..
        public static let signifyNetherlandsBv = AssignedNumberWithoutID(
            name: "Signify Netherlands B.V.",
            uuidByte3: 0xfd,
            uuidByte4: 0x8a
        )

        /// Signify Netherlands B.V. (formerly Philips Lighting B.V.).
        public static let signifyNetherlandsBvFormerlyPhilipsLightingBv = AssignedNumberWithoutID(
            name: "Signify Netherlands B.V. (formerly Philips Lighting B.V.)",
            uuidByte3: 0xfe,
            uuidByte4: 0x4b
        )

        /// Silvair, Inc..
        public static let silvairInc = AssignedNumberWithoutID(
            name: "Silvair, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xe6
        )

        /// Simavita (Aust) Pty Ltd.
        public static let simavitaAustPtyLtd = AssignedNumberWithoutID(
            name: "Simavita (Aust) Pty Ltd",
            uuidByte3: 0xfd,
            uuidByte4: 0xc4
        )

        /// SK Telecom.
        public static let skTelecom = AssignedNumberWithoutID(
            name: "SK Telecom",
            uuidByte3: 0xfe,
            uuidByte4: 0x44
        )

        /// SkyHawke Technologies.
        public static let skyhawkeTechnologies = AssignedNumberWithoutID(
            name: "SkyHawke Technologies",
            uuidByte3: 0xfc,
            uuidByte4: 0xc9
        )

        /// SmallLoop LLC.
        public static let smallloopLlc = AssignedNumberWithoutID(
            name: "SmallLoop LLC",
            uuidByte3: 0xfe,
            uuidByte4: 0x34
        )

        /// Smith & Nephew Medical Limited.
        public static let smithNephewMedicalLimited = AssignedNumberWithoutID(
            name: "Smith & Nephew Medical Limited",
            uuidByte3: 0xfd,
            uuidByte4: 0x19
        )

        /// SMK Corporation.
        public static let smkCorporation = AssignedNumberWithoutID(
            name: "SMK Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0xe5
        )

        /// Snapchat Inc.
        public static let snapchatInc = AssignedNumberWithoutID(
            name: "Snapchat Inc",
            uuidByte3: 0xfe,
            uuidByte4: 0x45
        )

        /// SONITOR TECHNOLOGIES AS.
        public static let sonitorTechnologiesAs = AssignedNumberWithoutID(
            name: "SONITOR TECHNOLOGIES AS",
            uuidByte3: 0xfd,
            uuidByte4: 0x4f
        )

        /// Sonos, Inc..
        public static let sonosInc = AssignedNumberWithoutID(
            name: "Sonos, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x7
        )

        /// Sonova Consumer Hearing GmbH.
        public static let sonovaConsumerHearingGmbh = AssignedNumberWithoutID(
            name: "Sonova Consumer Hearing GmbH",
            uuidByte3: 0xfc,
            uuidByte4: 0xfe
        )

        /// Sony Corporation.
        public static let sonyCorporation = AssignedNumberWithoutID(
            name: "Sony Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x82
        )

        /// Sony Group Corporation.
        public static let sonyGroupCorporation = AssignedNumberWithoutID(
            name: "Sony Group Corporation",
            uuidByte3: 0xfc,
            uuidByte4: 0xe1
        )

        /// Spaceek LTD.
        public static let spaceekLtd = AssignedNumberWithoutID(
            name: "Spaceek LTD",
            uuidByte3: 0xfe,
            uuidByte4: 0x38
        )

        /// Spacesaver Corporation.
        public static let spacesaverCorporation = AssignedNumberWithoutID(
            name: "Spacesaver Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0xe9
        )

        /// Spintly, Inc..
        public static let spintlyInc = AssignedNumberWithoutID(
            name: "Spintly, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0xaa
        )

        /// SRAM.
        public static let sram = AssignedNumberWithoutID(
            name: "SRAM",
            uuidByte3: 0xfe,
            uuidByte4: 0x51
        )

        /// Swedlock AB.
        public static let swedlockAb = AssignedNumberWithoutID(
            name: "Swedlock AB",
            uuidByte3: 0xfd,
            uuidByte4: 0x7
        )

        /// SWEEN.
        public static let sween = AssignedNumberWithoutID(
            name: "SWEEN",
            uuidByte3: 0xfc,
            uuidByte4: 0xb3
        )

        /// Swirl Networks, Inc..
        public static let swirlNetworksInc = AssignedNumberWithoutID(
            name: "Swirl Networks, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xeb
        )

        /// SWISSINNO SOLUTIONS AG.
        public static let swissinnoSolutionsAg = AssignedNumberWithoutID(
            name: "SWISSINNO SOLUTIONS AG",
            uuidByte3: 0xfc,
            uuidByte4: 0xd6
        )

        /// Syntronix Corporation.
        public static let syntronixCorporation = AssignedNumberWithoutID(
            name: "Syntronix Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0xeb
        )

        /// Tandem Diabetes Care.
        public static let tandemDiabetesCare = AssignedNumberWithoutID(
            name: "Tandem Diabetes Care",
            uuidByte3: 0xfd,
            uuidByte4: 0xfb
        )

        /// TangoMe.
        public static let tangome = AssignedNumberWithoutID(
            name: "TangoMe",
            uuidByte3: 0xfe,
            uuidByte4: 0x76
        )

        /// Taobao.
        public static let taobao = AssignedNumberWithoutID(
            name: "Taobao",
            uuidByte3: 0xfe,
            uuidByte4: 0xb3
        )

        /// Tapkey GmbH.
        public static let tapkeyGmbh = AssignedNumberWithoutID(
            name: "Tapkey GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0x5e
        )

        /// TASER International, Inc..
        public static let taserInternationalInc = AssignedNumberWithoutID(
            name: "TASER International, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x6c
        )

        /// Telit Wireless Solutions (Formerly Stollmann E+V GmbH).
        public static let telitWirelessSolutionsFormerlyStollmannEvGmbh = AssignedNumberWithoutID(
            name: "Telit Wireless Solutions (Formerly Stollmann E+V GmbH)",
            uuidByte3: 0xfe,
            uuidByte4: 0xfb
        )

        /// Telit Wireless Solutions GmbH.
        public static let telitWirelessSolutionsGmbh = AssignedNumberWithoutID(
            name: "Telit Wireless Solutions GmbH",
            uuidByte3: 0xfe,
            uuidByte4: 0x17
        )

        /// Tencent Holdings Limited..
        public static let tencentHoldingsLimited = AssignedNumberWithoutID(
            name: "Tencent Holdings Limited.",
            uuidByte3: 0xfe,
            uuidByte4: 0xe7
        )

        /// Tentacle Sync GmbH.
        public static let tentacleSyncGmbh = AssignedNumberWithoutID(
            name: "Tentacle Sync GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0xac
        )

        /// Tesla Motors Inc..
        public static let teslaMotorsInc = AssignedNumberWithoutID(
            name: "Tesla Motors Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x97
        )

        /// The Access Technologies.
        public static let theAccessTechnologies = AssignedNumberWithoutID(
            name: "The Access Technologies",
            uuidByte3: 0xfd,
            uuidByte4: 0x2c
        )

        /// The Coca-Cola Company.
        public static let theCocacolaCompany = AssignedNumberWithoutID(
            name: "The Coca-Cola Company",
            uuidByte3: 0xfd,
            uuidByte4: 0x9e
        )

        /// The Linux Foundation.
        public static let theLinuxFoundation = AssignedNumberWithoutID(
            name: "The Linux Foundation",
            uuidByte3: 0xfc,
            uuidByte4: 0xf6
        )

        /// The University of Tokyo.
        public static let theUniversityOfTokyo = AssignedNumberWithoutID(
            name: "The University of Tokyo",
            uuidByte3: 0xfe,
            uuidByte4: 0x6e
        )

        /// Tile, Inc..
        public static let tileInc = AssignedNumberWithoutID(
            name: "Tile, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xed
        )

        /// TIMECODE SYSTEMS LIMITED.
        public static let timecodeSystemsLimited = AssignedNumberWithoutID(
            name: "TIMECODE SYSTEMS LIMITED",
            uuidByte3: 0xfc,
            uuidByte4: 0xc1
        )

        /// TireCheck GmbH.
        public static let tirecheckGmbh = AssignedNumberWithoutID(
            name: "TireCheck GmbH",
            uuidByte3: 0xfd,
            uuidByte4: 0x37
        )

        /// TKH Security B.V..
        public static let tkhSecurityBv = AssignedNumberWithoutID(
            name: "TKH Security B.V.",
            uuidByte3: 0xfc,
            uuidByte4: 0xe7
        )

        /// T-Mobile USA.
        public static let tmobileUsa = AssignedNumberWithoutID(
            name: "T-Mobile USA",
            uuidByte3: 0xfc,
            uuidByte4: 0xb7
        )

        /// Toshiba Corporation.
        public static let toshibaCorporation = AssignedNumberWithoutID(
            name: "Toshiba Corporation",
            uuidByte3: 0xfc,
            uuidByte4: 0xbd
        )

        /// Toshiba Information Systems(Japan) Corporation.
        public static let toshibaInformationSystemsjapanCorporation = AssignedNumberWithoutID(
            name: "Toshiba Information Systems(Japan) Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x7c
        )

        /// TOTO LTD..
        public static let totoLtd = AssignedNumberWithoutID(
            name: "TOTO LTD.",
            uuidByte3: 0xfc,
            uuidByte4: 0xcb
        )

        /// Transsion Holdings Limited.
        public static let transsionHoldingsLimited = AssignedNumberWithoutID(
            name: "Transsion Holdings Limited",
            uuidByte3: 0xfd,
            uuidByte4: 0x35
        )

        /// Trident Communication Technology, LLC.
        public static let tridentCommunicationTechnologyLlc = AssignedNumberWithoutID(
            name: "Trident Communication Technology, LLC",
            uuidByte3: 0xfc,
            uuidByte4: 0xf5
        )

        /// TRON Forum.
        public static let tronForum = AssignedNumberWithoutID(
            name: "TRON Forum",
            uuidByte3: 0xfe,
            uuidByte4: 0x8c
        )

        /// TTS Tooltechnic Systems AG & Co. KG.
        public static let ttsTooltechnicSystemsAgCoKg = AssignedNumberWithoutID(
            name: "TTS Tooltechnic Systems AG & Co. KG",
            uuidByte3: 0xfe,
            uuidByte4: 0x3a
        )

        /// Tyto Life LLC.
        public static let tytoLifeLlc = AssignedNumberWithoutID(
            name: "Tyto Life LLC",
            uuidByte3: 0xfe,
            uuidByte4: 0x1b
        )

        /// Ubique Innovation AG.
        public static let ubiqueInnovationAg = AssignedNumberWithoutID(
            name: "Ubique Innovation AG",
            uuidByte3: 0xfd,
            uuidByte4: 0x68
        )

        /// unwire.
        public static let unwire = AssignedNumberWithoutID(
            name: "unwire",
            uuidByte3: 0xfe,
            uuidByte4: 0x74
        )

        /// Urbanminded LTD.
        public static let urbanmindedLtd = AssignedNumberWithoutID(
            name: "Urbanminded LTD",
            uuidByte3: 0xfd,
            uuidByte4: 0x89
        )

        /// UTC Fire and Security.
        public static let utcFireAndSecurity = AssignedNumberWithoutID(
            name: "UTC Fire and Security",
            uuidByte3: 0xfe,
            uuidByte4: 0xa7
        )

        /// V2SOFT INC..
        public static let v2softInc = AssignedNumberWithoutID(
            name: "V2SOFT INC.",
            uuidByte3: 0xfd,
            uuidByte4: 0x5b
        )

        /// Velentium, LLC.
        public static let velentiumLlc = AssignedNumberWithoutID(
            name: "Velentium, LLC",
            uuidByte3: 0xfc,
            uuidByte4: 0xee
        )

        /// Vencer Co., Ltd.
        public static let vencerCoLtd = AssignedNumberWithoutID(
            name: "Vencer Co., Ltd",
            uuidByte3: 0xfe,
            uuidByte4: 0xb6
        )

        /// Verkada Inc..
        public static let verkadaInc = AssignedNumberWithoutID(
            name: "Verkada Inc.",
            uuidByte3: 0xfd,
            uuidByte4: 0x3b
        )

        /// VitalTech Affiliates LLC.
        public static let vitaltechAffiliatesLlc = AssignedNumberWithoutID(
            name: "VitalTech Affiliates LLC",
            uuidByte3: 0xfd,
            uuidByte4: 0x9f
        )

        /// Volkswagen AG.
        public static let volkswagenAg = AssignedNumberWithoutID(
            name: "Volkswagen AG",
            uuidByte3: 0xfe,
            uuidByte4: 0x4c
        )

        /// Volvo Car Corporation.
        public static let volvoCarCorporation = AssignedNumberWithoutID(
            name: "Volvo Car Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x58
        )

        /// Wicentric, Inc..
        public static let wicentricInc = AssignedNumberWithoutID(
            name: "Wicentric, Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xf6
        )

        /// Wi-Fi Alliance.
        public static let wifiAlliance = AssignedNumberWithoutID(
            name: "Wi-Fi Alliance",
            uuidByte3: 0xfc,
            uuidByte4: 0xcc
        )

        /// Wiliot LTD.
        public static let wiliotLtd = AssignedNumberWithoutID(
            name: "Wiliot LTD",
            uuidByte3: 0xfd,
            uuidByte4: 0xaf
        )

        /// WiSilica Inc..
        public static let wisilicaInc = AssignedNumberWithoutID(
            name: "WiSilica Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0xb5
        )

        /// Withings.
        public static let withings = AssignedNumberWithoutID(
            name: "Withings",
            uuidByte3: 0xfd,
            uuidByte4: 0x7a
        )

        /// Woan Technology (Shenzhen) Co., Ltd..
        public static let woanTechnologyShenzhenCoLtd = AssignedNumberWithoutID(
            name: "Woan Technology (Shenzhen) Co., Ltd.",
            uuidByte3: 0xfd,
            uuidByte4: 0x3d
        )

        /// Workaround Gmbh.
        public static let workaroundGmbh = AssignedNumberWithoutID(
            name: "Workaround Gmbh",
            uuidByte3: 0xfc,
            uuidByte4: 0xed
        )

        /// WWZN Information Technology Company Limited.
        public static let wwznInformationTechnologyCompanyLimited = AssignedNumberWithoutID(
            name: "WWZN Information Technology Company Limited",
            uuidByte3: 0xfd,
            uuidByte4: 0xa7
        )

        /// WYZE LABS, INC..
        public static let wyzeLabsInc = AssignedNumberWithoutID(
            name: "WYZE LABS, INC.",
            uuidByte3: 0xfd,
            uuidByte4: 0x7b
        )

        /// Xiaomi Inc..
        public static let xiaomiInc = AssignedNumberWithoutID(
            name: "Xiaomi Inc.",
            uuidByte3: 0xfe,
            uuidByte4: 0x95
        )

        /// Zebra Technologies.
        public static let zebraTechnologies = AssignedNumberWithoutID(
            name: "Zebra Technologies",
            uuidByte3: 0xfe,
            uuidByte4: 0x79
        )

        /// Zebra Technologies Corporation.
        public static let zebraTechnologiesCorporation = AssignedNumberWithoutID(
            name: "Zebra Technologies Corporation",
            uuidByte3: 0xfd,
            uuidByte4: 0x66
        )

        /// Zhejiang Huanfu Technology Co., LTD.
        public static let zhejiangHuanfuTechnologyCoLtd = AssignedNumberWithoutID(
            name: "Zhejiang Huanfu Technology Co., LTD",
            uuidByte3: 0xfc,
            uuidByte4: 0x85
        )

        /// Zoll Medical Corporation.
        public static let zollMedicalCorporation = AssignedNumberWithoutID(
            name: "Zoll Medical Corporation",
            uuidByte3: 0xfe,
            uuidByte4: 0x23
        )

        /// Zound Industries International AB.
        public static let zoundIndustriesInternationalAb = AssignedNumberWithoutID(
            name: "Zound Industries International AB",
            uuidByte3: 0xfc,
            uuidByte4: 0xcd
        )

        /// Zwift, Inc..
        public static let zwiftInc = AssignedNumberWithoutID(
            name: "Zwift, Inc.",
            uuidByte3: 0xfc,
            uuidByte4: 0x82
        )

        public static let all: [any AssignedNumberProtocol] = [
            _360flyInc,
            _3m,
            _4iiiiInnovationsInc,
            _701x,
            _70maiColtd,
            abbOy,
            abbott,
            abbottDiabetesCare,
            abbottFormerlyStJudeMedicalInc,
            aconnoGmbh,
            adafruitIndustries,
            adheriumnzLimited,
            adolfWuerthGmbhCoKg,
            aeonMotorColtd,
            aerosensLlc,
            aiaiaiAps,
            akcijuSabiedribaSafTehnika,
            alibaba,
            allegion,
            alltercoRoboticsLtd,
            allthenticateInc,
            altobeamInc,
            amazonLab126,
            amazoncomServicesInc,
            amazoncomServicesLlc,
            amersports,
            amiccomElectronicsCorporation,
            andreasStihlAgCoKg,
            anhuiHuamiInformationTechnologyCoLtd,
            ankiInc,
            aplixCorporation,
            appexFactorySl,
            appleInc,
            archSystemsInc,
            arctopInc,
            arendiAg,
            armLtd,
            armaturaLlc,
            artAndProgramInc,
            asahiKaseiCorporation,
            assaAbloyOpeningSolutionsSwedenAb,
            atericaHealthInc,
            audiodoAb,
            augustHomeInc,
            automaticLabs,
            avion,
            awearSolutionsLtd,
            axonEnterpriseInc,
            aylaNetworks,
            badgerMeter,
            baiduOnlineNetworkTechnologyBeijingCoLtd,
            baracodaDailyHealthtech,
            barrotTechnologyColtd,
            bayerischeMotorenWerkeAg,
            bdMedical,
            beflexInc,
            beijing99HelpSafetyTechnologyCoLtd,
            beijingJingdongCenturyTradingCoLtd,
            binaryPowerInc,
            bitstrataSystemsInc,
            bitwardsOy,
            bleconLtd,
            blueBite,
            blueIrisLabsInc,
            blueSparkTechnologiesInc,
            blueidGmbh,
            boPlayAs,
            boseCorporation,
            bradyWorldwideInc,
            bragiGmbh,
            braveheartWirelessInc,
            brcontrolsProductsBv,
            brgSportsInc,
            broadcom,
            bromptonBicycleLtd,
            bullGroupIncorporatedCompany,
            buschjaegerElektroGmbh,
            caireInc,
            californiaThingsInc,
            candyHouseInc,
            capsleTechnologiesInc,
            casambiTechnologiesOy,
            cccDelUruguay,
            centerForAdvancedResearchWernherVonBraun,
            chessWiseBv,
            chipoloDoo,
            cloverNetworkInc,
            cognososInc,
            coinInc,
            comcastCableCorporation,
            connectedYardInc,
            coreTransportTechnologiesNzLimited,
            cosmedSrl,
            cousinsAndSearsLlc,
            crescoWirelessInc,
            cronologicsCorporation,
            csiro,
            csr,
            currantInc,
            daisyworksInc,
            danfossAs,
            dashlogicInc,
            dellComputerCorporation,
            deltaDevelopmentTeamInc,
            designShift,
            dexcomInc,
            dialogSemiconductorBv,
            dialogSemiconductorGmbh,
            disneyWorldwideServicesInc,
            divesoftSro,
            dolbyLaboratories,
            domSicherheitstechnikGmbhCoKg,
            dopplerLab,
            dottedLabs,
            draeger,
            drowsyDigitalInc,
            duracellUsOperationsInc,
            ecsg,
            electronicsTomorrowLimited,
            eliLillyAndCompany,
            emerson,
            eriinc,
            estimote,
            eyefiInc,
            fisherPaykelHealthcare,
            flextronicsInternationalUsaInc,
            footmarksInc,
            fordMotorCompany,
            fortinElectronicSystems,
            fridayLabsLimited,
            fubaAutomotiveElectronicsGmbh,
            furunoElectricCoLtd,
            futekAdvancedSensorTechnologyInc,
            garminInternationalInc,
            gastecCorporation,
            gbSolutionColtd,
            gdMideaAirconditioningEquipmentCoLtd,
            geberitInternationalAg,
            gemaltoHoldingBv,
            generalMotors,
            gibsonInnovations,
            gimbalInc,
            globeJiangsuColtd,
            gmciMesstechnikGmbh,
            gnHearingAs,
            gnNetcom,
            googleLlc,
            goproInc,
            griffwerkGmbh,
            grooveXInc,
            grundfosAs,
            gsiLaboratoriesInc,
            gttronicsHkLtd,
            guangdongOppoMobileTelecommunicationsCorpLtd,
            guangzhouSupersoundInformationTechnologyColtd,
            guardRfidSolutionsInc,
            gunneboAktiebolag,
            gwaHygieneGmbh,
            hachDanaher,
            hangzhouTuyaInformationTechnologyCoLtd,
            harmanInternational,
            haywardIndustriesInc,
            heliosSportsInc,
            herddoggInc,
            hewlettPackardEnterprise,
            hewlettpackardCompany,
            hippoCampSoftwareLtd,
            honorDeviceCoLtd,
            houwaSystemDesignKk,
            hpInc,
            huaweiTechnologiesCoLtd,
            hubbleNetworkInc,
            hunterDouglas,
            husoInc,
            husqvarnaAb,
            ihealthLabsInc,
            illuminatiInstrumentCorporation,
            imagineMarketingLimited,
            indagemTechLlc,
            informTechnologyGmbh,
            inia,
            inria,
            inseegoCorp,
            insuletCorporation,
            integratedIlluminationSystemsInc,
            intel,
            intelCorporation,
            intellettoTechnologiesInc,
            interaxonInc,
            intrepidControlSystemsInc,
            inugoSystemsLimited,
            irissInc,
            isscTechnologiesCorp,
            ittIndustries,
            japanDisplayInc,
            jardenSafetySecurity,
            jawbone,
            jiangsuTeranovoTechCoLtd,
            jigowattsInc,
            johnDeere,
            juliusBlumGmbh,
            juma,
            juneLifeInc,
            juulLabsInc,
            kasperskyLabMiddleEastFzllc,
            kddiCorporation,
            kocomojoLlc,
            komatsuLtd,
            kontaktMicrolocationSpZOo,
            labSensorSolutions,
            laerdalMedicalAs,
            lamplightCoLtd,
            lamplightColtd,
            lapisTechnologyCoLtd,
            legicIdentsystemsAg,
            legoSystemAs,
            lemcoIke,
            lenovoSingaporePteLtd,
            leupoldStevensInc,
            lgElectronics,
            lgElectronicsInc,
            libertyGlobalInc,
            lierdaScienceTechnologyGroupCoLtd,
            lineCorporation,
            livanovaUsaInc,
            logitechInternationalSa,
            lumiUnitedTechnologyCoLtd,
            luminosticsInc,
            lunaHealthInc,
            lxSolutionsPtyLimited,
            mannkindCorporation,
            matrixComsecPvtLtd,
            maxonMotorLtd,
            medtronicInc,
            meggittSa,
            meizuTechnologyCoLtd,
            merryElectronicsSPteLtd,
            metaPlatformsInc,
            metaPlatformsTechnologiesLlc,
            mhcs,
            microsoft,
            microsoftCorporation,
            millionHuntersGmbh,
            milwaukeeElectricTools,
            mindrhythmInc,
            ministryOfSupply,
            mobilarisAb,
            mobiquityNetworksInc,
            molekuleInc,
            montblancSimploGmbh,
            motivInc,
            motorolaSolutions,
            motorolaSolutionsInc,
            musenConnectInc,
            mwaySolutionsGmbh,
            naluMedicalInc,
            nestLabsInc,
            netmediaInc,
            netsAs,
            neurostimOabInc,
            ningboFotileKitchenwareCoLtd,
            nioUsaInc,
            nodInc,
            nokia,
            noodleTechnologyInc,
            nordicSemiconductorAsa,
            nortekSecurityControl,
            novoNordiskAs,
            nttDocomo,
            oEMControlsInc,
            omronHealthcare,
            omronHealthcareCoLtd,
            omrondalianColtd,
            onvocal,
            optrelAg,
            orionLabsInc,
            osmHkLimited,
            osramGmbh,
            ottoqIn,
            ouraHealthLtd,
            panasonicCorporation,
            paxtonAccessLtd,
            paypalInc,
            pbInc,
            pciPrivateLimited,
            pebbleTechnologyCorporation,
            perkaInc,
            pfSchweisstechnologieGmbh,
            phindexTechnologiesInc,
            pillsyInc,
            plantronicsInc,
            plastcCorporation,
            plockatSolutionsAb,
            plumeDesignInc,
            plusLocationSystems,
            polarElectroOy,
            poleStar,
            polideaSpZOo,
            portableMultimediaLtd,
            powerpalPtyLtd,
            prediktas,
            procterGamble,
            profoto,
            promarkInc,
            psaPeugeotCitroën,
            pureWatercraftInc,
            qingdaoHaierTechnologyCoLtd,
            qingdaoYeelinkInformationTechnologyCoLtd青岛亿联客信息技术有限公司,
            qingpingTechnologyBeijingCoLtd,
            qualcommTechnologiesInc,
            qualcommTechnologiesInternationalLtdQtil,
            quinticCorp,
            quipNycInc,
            quuppaOy,
            raceaiLlc,
            rapitagGmbh,
            razerInc,
            reactMobile,
            realtekSemiconductorCorp,
            recursivesoftInc,
            redlineCommunicationsInc,
            resmedLtd,
            rfDigitalCorp,
            rhombusSystemsInc,
            ribbiotInc,
            rigado,
            robertBoschGmbh,
            runtimeInc,
            ruuviInnovationsLtd,
            ruwidoAustriaGmbh,
            saltoSystemsSl,
            samsaraNetworksInc,
            samsungElectronicsCoLtd,
            sanvitaMedicalCorporation,
            savantSystemsLlc,
            secomCoLtd,
            secugenCorporation,
            securityEnhancementSystemsLlc,
            seescanInc,
            senionlabAb,
            sennheiserElectronicGmbhCoKg,
            sensitechInc,
            sercommCorporation,
            sesamSolutionsBv,
            sesimagotag,
            setecPtyLtd,
            setpointMedical,
            shanghaiImilabTechnologyColtd,
            sharkninjaOperatingLlc,
            shenzhenBenweiMediaCoLtd,
            shenzhenBenweiMediaColtd,
            shoofTechnologies,
            shureInc,
            siemensAg,
            sigmaElektroGmbh,
            signifyNetherlandsBv,
            signifyNetherlandsBvFormerlyPhilipsLightingBv,
            silvairInc,
            simavitaAustPtyLtd,
            skTelecom,
            skyhawkeTechnologies,
            smallloopLlc,
            smithNephewMedicalLimited,
            smkCorporation,
            snapchatInc,
            sonitorTechnologiesAs,
            sonosInc,
            sonovaConsumerHearingGmbh,
            sonyCorporation,
            sonyGroupCorporation,
            spaceekLtd,
            spacesaverCorporation,
            spintlyInc,
            sram,
            swedlockAb,
            sween,
            swirlNetworksInc,
            swissinnoSolutionsAg,
            syntronixCorporation,
            tandemDiabetesCare,
            tangome,
            taobao,
            tapkeyGmbh,
            taserInternationalInc,
            telitWirelessSolutionsFormerlyStollmannEvGmbh,
            telitWirelessSolutionsGmbh,
            tencentHoldingsLimited,
            tentacleSyncGmbh,
            teslaMotorsInc,
            theAccessTechnologies,
            theCocacolaCompany,
            theLinuxFoundation,
            theUniversityOfTokyo,
            tileInc,
            timecodeSystemsLimited,
            tirecheckGmbh,
            tkhSecurityBv,
            tmobileUsa,
            toshibaCorporation,
            toshibaInformationSystemsjapanCorporation,
            totoLtd,
            transsionHoldingsLimited,
            tridentCommunicationTechnologyLlc,
            tronForum,
            ttsTooltechnicSystemsAgCoKg,
            tytoLifeLlc,
            ubiqueInnovationAg,
            unwire,
            urbanmindedLtd,
            utcFireAndSecurity,
            v2softInc,
            velentiumLlc,
            vencerCoLtd,
            verkadaInc,
            vitaltechAffiliatesLlc,
            volkswagenAg,
            volvoCarCorporation,
            wicentricInc,
            wifiAlliance,
            wiliotLtd,
            wisilicaInc,
            withings,
            woanTechnologyShenzhenCoLtd,
            workaroundGmbh,
            wwznInformationTechnologyCompanyLimited,
            wyzeLabsInc,
            xiaomiInc,
            zebraTechnologies,
            zebraTechnologiesCorporation,
            zhejiangHuanfuTechnologyCoLtd,
            zollMedicalCorporation,
            zoundIndustriesInternationalAb,
            zwiftInc,
        ]
    }

    /// From `assigned_numbers/uuids/mesh_profile_uuids.yaml`.
    public enum MeshProfileUuids {
        /// Ambient Light Sensor NLC Profile 1.0.
        public static let ambientLightSensorNlcProfile10 = AssignedNumberWithoutID(
            name: "Ambient Light Sensor NLC Profile 1.0",
            uuidByte3: 0x16,
            uuidByte4: 0x0
        )

        /// Basic Lightness Controller NLC Profile 1.0.
        public static let basicLightnessControllerNlcProfile10 = AssignedNumberWithoutID(
            name: "Basic Lightness Controller NLC Profile 1.0",
            uuidByte3: 0x16,
            uuidByte4: 0x1
        )

        /// Basic Scene Selector NLC Profile 1.0.
        public static let basicSceneSelectorNlcProfile10 = AssignedNumberWithoutID(
            name: "Basic Scene Selector NLC Profile 1.0",
            uuidByte3: 0x16,
            uuidByte4: 0x2
        )

        /// Dimming Control NLC Profile 1.0.
        public static let dimmingControlNlcProfile10 = AssignedNumberWithoutID(
            name: "Dimming Control NLC Profile 1.0",
            uuidByte3: 0x16,
            uuidByte4: 0x3
        )

        /// Energy Monitor NLC Profile 1.0.
        public static let energyMonitorNlcProfile10 = AssignedNumberWithoutID(
            name: "Energy Monitor NLC Profile 1.0",
            uuidByte3: 0x16,
            uuidByte4: 0x4
        )

        /// Occupancy Sensor NLC Profile 1.0.
        public static let occupancySensorNlcProfile10 = AssignedNumberWithoutID(
            name: "Occupancy Sensor NLC Profile 1.0",
            uuidByte3: 0x16,
            uuidByte4: 0x5
        )

        public static let all: [any AssignedNumberProtocol] = [
            ambientLightSensorNlcProfile10,
            basicLightnessControllerNlcProfile10,
            basicSceneSelectorNlcProfile10,
            dimmingControlNlcProfile10,
            energyMonitorNlcProfile10,
            occupancySensorNlcProfile10,
        ]
    }

    /// From `assigned_numbers/uuids/object_types.yaml`.
    public enum ObjectTypes {
        /// Directory Listing. ID is `org.bluetooth.object.directory_listing`.
        public static let directoryListing = AssignedNumberWithID(
            name: "Directory Listing",
            id: "org.bluetooth.object.directory_listing",
            uuidByte3: 0x2a,
            uuidByte4: 0xcb
        )

        /// Group. ID is `org.bluetooth.object.group`.
        public static let group = AssignedNumberWithID(
            name: "Group",
            id: "org.bluetooth.object.group",
            uuidByte3: 0x2b,
            uuidByte4: 0xac
        )

        /// Media Player Icon. ID is `org.bluetooth.object.media_player_icon`.
        public static let mediaPlayerIcon = AssignedNumberWithID(
            name: "Media Player Icon",
            id: "org.bluetooth.object.media_player_icon",
            uuidByte3: 0x2b,
            uuidByte4: 0xa9
        )

        /// Track. ID is `org.bluetooth.object.track`.
        public static let track = AssignedNumberWithID(
            name: "Track",
            id: "org.bluetooth.object.track",
            uuidByte3: 0x2b,
            uuidByte4: 0xab
        )

        /// Track Segment. ID is `org.bluetooth.object.track_segments`.
        public static let trackSegment = AssignedNumberWithID(
            name: "Track Segment",
            id: "org.bluetooth.object.track_segments",
            uuidByte3: 0x2b,
            uuidByte4: 0xaa
        )

        /// Unspecified. ID is `org.bluetooth.object.unspecified`.
        public static let unspecified = AssignedNumberWithID(
            name: "Unspecified",
            id: "org.bluetooth.object.unspecified",
            uuidByte3: 0x2a,
            uuidByte4: 0xca
        )

        public static let all: [any AssignedNumberProtocol] = [
            directoryListing,
            group,
            mediaPlayerIcon,
            track,
            trackSegment,
            unspecified,
        ]
    }

    /// From `assigned_numbers/uuids/protocol_identifiers.yaml`.
    public enum ProtocolIdentifiers {
        /// ATT.
        public static let att = AssignedNumberWithoutID(
            name: "ATT",
            uuidByte3: 0x0,
            uuidByte4: 0x7
        )

        /// AVCTP.
        public static let avctp = AssignedNumberWithoutID(
            name: "AVCTP",
            uuidByte3: 0x0,
            uuidByte4: 0x17
        )

        /// AVDTP.
        public static let avdtp = AssignedNumberWithoutID(
            name: "AVDTP",
            uuidByte3: 0x0,
            uuidByte4: 0x19
        )

        /// BNEP.
        public static let bnep = AssignedNumberWithoutID(
            name: "BNEP",
            uuidByte3: 0x0,
            uuidByte4: 0xf
        )

        /// CMTP.
        public static let cmtp = AssignedNumberWithoutID(
            name: "CMTP",
            uuidByte3: 0x0,
            uuidByte4: 0x1b
        )

        /// FTP.
        public static let ftp = AssignedNumberWithoutID(
            name: "FTP",
            uuidByte3: 0x0,
            uuidByte4: 0xa
        )

        /// HardcopyControlChannel.
        public static let hardcopycontrolchannel = AssignedNumberWithoutID(
            name: "HardcopyControlChannel",
            uuidByte3: 0x0,
            uuidByte4: 0x12
        )

        /// HardcopyDataChannel.
        public static let hardcopydatachannel = AssignedNumberWithoutID(
            name: "HardcopyDataChannel",
            uuidByte3: 0x0,
            uuidByte4: 0x14
        )

        /// HardcopyNotificationChannel.
        public static let hardcopynotificationchannel = AssignedNumberWithoutID(
            name: "HardcopyNotificationChannel",
            uuidByte3: 0x0,
            uuidByte4: 0x16
        )

        /// HID Protocol.
        public static let hidProtocol = AssignedNumberWithoutID(
            name: "HID Protocol",
            uuidByte3: 0x0,
            uuidByte4: 0x11
        )

        /// HTTP.
        public static let http = AssignedNumberWithoutID(
            name: "HTTP",
            uuidByte3: 0x0,
            uuidByte4: 0xc
        )

        /// IP.
        public static let ip = AssignedNumberWithoutID(
            name: "IP",
            uuidByte3: 0x0,
            uuidByte4: 0x9
        )

        /// L2CAP.
        public static let l2cap = AssignedNumberWithoutID(
            name: "L2CAP",
            uuidByte3: 0x1,
            uuidByte4: 0x0
        )

        /// MCAP Control Channel.
        public static let mcapControlChannel = AssignedNumberWithoutID(
            name: "MCAP Control Channel",
            uuidByte3: 0x0,
            uuidByte4: 0x1e
        )

        /// MCAP Data Channel.
        public static let mcapDataChannel = AssignedNumberWithoutID(
            name: "MCAP Data Channel",
            uuidByte3: 0x0,
            uuidByte4: 0x1f
        )

        /// OBEX.
        public static let obex = AssignedNumberWithoutID(
            name: "OBEX",
            uuidByte3: 0x0,
            uuidByte4: 0x8
        )

        /// RFCOMM.
        public static let rfcomm = AssignedNumberWithoutID(
            name: "RFCOMM",
            uuidByte3: 0x0,
            uuidByte4: 0x3
        )

        /// SDP.
        public static let sdp = AssignedNumberWithoutID(
            name: "SDP",
            uuidByte3: 0x0,
            uuidByte4: 0x1
        )

        /// TCP.
        public static let tcp = AssignedNumberWithoutID(
            name: "TCP",
            uuidByte3: 0x0,
            uuidByte4: 0x4
        )

        /// TCS-AT.
        public static let tcsat = AssignedNumberWithoutID(
            name: "TCS-AT",
            uuidByte3: 0x0,
            uuidByte4: 0x6
        )

        /// TCS-BIN.
        public static let tcsbin = AssignedNumberWithoutID(
            name: "TCS-BIN",
            uuidByte3: 0x0,
            uuidByte4: 0x5
        )

        /// UDP.
        public static let udp = AssignedNumberWithoutID(
            name: "UDP",
            uuidByte3: 0x0,
            uuidByte4: 0x2
        )

        /// UPNP.
        public static let upnp = AssignedNumberWithoutID(
            name: "UPNP",
            uuidByte3: 0x0,
            uuidByte4: 0x10
        )

        /// WSP.
        public static let wsp = AssignedNumberWithoutID(
            name: "WSP",
            uuidByte3: 0x0,
            uuidByte4: 0xe
        )

        public static let all: [any AssignedNumberProtocol] = [
            att,
            avctp,
            avdtp,
            bnep,
            cmtp,
            ftp,
            hardcopycontrolchannel,
            hardcopydatachannel,
            hardcopynotificationchannel,
            hidProtocol,
            http,
            ip,
            l2cap,
            mcapControlChannel,
            mcapDataChannel,
            obex,
            rfcomm,
            sdp,
            tcp,
            tcsat,
            tcsbin,
            udp,
            upnp,
            wsp,
        ]
    }

    /// From `assigned_numbers/uuids/sdo_uuids.yaml`.
    public enum SdoUuids {
        /// Aliro.
        public static let aliro = AssignedNumberWithoutID(
            name: "Aliro",
            uuidByte3: 0xff,
            uuidByte4: 0xf2
        )

        /// ASTM Remote ID.
        public static let astmRemoteId = AssignedNumberWithoutID(
            name: "ASTM Remote ID",
            uuidByte3: 0xff,
            uuidByte4: 0xfa
        )

        /// Car Connectivity Consortium, LLC.
        public static let carConnectivityConsortiumLlc = AssignedNumberWithoutID(
            name: "Car Connectivity Consortium, LLC",
            uuidByte3: 0xff,
            uuidByte4: 0xf5
        )

        /// Direct Thread Commissioning.
        public static let directThreadCommissioning = AssignedNumberWithoutID(
            name: "Direct Thread Commissioning",
            uuidByte3: 0xff,
            uuidByte4: 0xfb
        )

        /// FIDO2 secure client-to-authenticator transport.
        public static let fido2SecureClienttoauthenticatorTransport = AssignedNumberWithoutID(
            name: "FIDO2 secure client-to-authenticator transport",
            uuidByte3: 0xff,
            uuidByte4: 0xf9
        )

        /// FiRa Consortium.
        public static let firaConsortium = AssignedNumberWithoutID(
            name: "FiRa Consortium",
            uuidByte3: 0xff,
            uuidByte4: 0xf4
        )

        /// ICCE Digital Key.
        public static let icceDigitalKey = AssignedNumberWithoutID(
            name: "ICCE Digital Key",
            uuidByte3: 0xff,
            uuidByte4: 0xf1
        )

        /// Matter Profile ID.
        public static let matterProfileId = AssignedNumberWithoutID(
            name: "Matter Profile ID",
            uuidByte3: 0xff,
            uuidByte4: 0xf6
        )

        /// Mopria Alliance BLE.
        public static let mopriaAllianceBle = AssignedNumberWithoutID(
            name: "Mopria Alliance BLE",
            uuidByte3: 0xff,
            uuidByte4: 0xf8
        )

        /// Public Key Open Credential (PKOC).
        public static let publicKeyOpenCredentialPkoc = AssignedNumberWithoutID(
            name: "Public Key Open Credential (PKOC)",
            uuidByte3: 0xff,
            uuidByte4: 0xf0
        )

        /// Universal Second Factor Authenticator.
        public static let universalSecondFactorAuthenticator = AssignedNumberWithoutID(
            name: "Universal Second Factor Authenticator",
            uuidByte3: 0xff,
            uuidByte4: 0xfd
        )

        /// Wireless Power Transfer.
        public static let wirelessPowerTransfer = AssignedNumberWithoutID(
            name: "Wireless Power Transfer",
            uuidByte3: 0xff,
            uuidByte4: 0xfe
        )

        /// Wireless Power Transfer (WPT).
        public static let wirelessPowerTransferWpt = AssignedNumberWithoutID(
            name: "Wireless Power Transfer (WPT)",
            uuidByte3: 0xff,
            uuidByte4: 0xfc
        )

        /// Zigbee Direct.
        public static let zigbeeDirect = AssignedNumberWithoutID(
            name: "Zigbee Direct",
            uuidByte3: 0xff,
            uuidByte4: 0xf7
        )

        public static let all: [any AssignedNumberProtocol] = [
            aliro,
            astmRemoteId,
            carConnectivityConsortiumLlc,
            directThreadCommissioning,
            fido2SecureClienttoauthenticatorTransport,
            firaConsortium,
            icceDigitalKey,
            matterProfileId,
            mopriaAllianceBle,
            publicKeyOpenCredentialPkoc,
            universalSecondFactorAuthenticator,
            wirelessPowerTransfer,
            wirelessPowerTransferWpt,
            zigbeeDirect,
        ]
    }

    /// From `assigned_numbers/uuids/service_class.yaml`.
    public enum ServiceClass {
        /// 3D Display. ID is `org.bluetooth.service_class.3d_display`.
        public static let _3dDisplay = AssignedNumberWithID(
            name: "3D Display",
            id: "org.bluetooth.service_class.3d_display",
            uuidByte3: 0x11,
            uuidByte4: 0x37
        )

        /// 3D Glasses. ID is `org.bluetooth.service_class.3d_glasses`.
        public static let _3dGlasses = AssignedNumberWithID(
            name: "3D Glasses",
            id: "org.bluetooth.service_class.3d_glasses",
            uuidByte3: 0x11,
            uuidByte4: 0x38
        )

        /// 3D Synch Profile. ID is `org.bluetooth.profile.3d_synch_profile`.
        public static let _3dSynchProfile = AssignedNumberWithID(
            name: "3D Synch Profile",
            id: "org.bluetooth.profile.3d_synch_profile",
            uuidByte3: 0x11,
            uuidByte4: 0x39
        )

        /// Advanced Audio Distribution. ID is `org.bluetooth.profile.a2dp`.
        public static let advancedAudioDistribution = AssignedNumberWithID(
            name: "Advanced Audio Distribution",
            id: "org.bluetooth.profile.a2dp",
            uuidByte3: 0x11,
            uuidByte4: 0xd
        )

        /// AG Hands-Free. ID is `org.bluetooth.service_class.ag_hands_free`.
        public static let agHandsfree = AssignedNumberWithID(
            name: "AG Hands-Free",
            id: "org.bluetooth.service_class.ag_hands_free",
            uuidByte3: 0x11,
            uuidByte4: 0x1f
        )

        /// Audio Sink. ID is `org.bluetooth.profile.a2dp_audio_sink`.
        public static let audioSink = AssignedNumberWithID(
            name: "Audio Sink",
            id: "org.bluetooth.profile.a2dp_audio_sink",
            uuidByte3: 0x11,
            uuidByte4: 0xb
        )

        /// Audio Source. ID is `org.bluetooth.profile.a2dp_audio_source`.
        public static let audioSource = AssignedNumberWithID(
            name: "Audio Source",
            id: "org.bluetooth.profile.a2dp_audio_source",
            uuidByte3: 0x11,
            uuidByte4: 0xa
        )

        /// A/V Remote Control. ID is `org.bluetooth.profile.avrcp_remote_control_remote_control`.
        public static let avRemoteControl = AssignedNumberWithID(
            name: "A/V Remote Control",
            id: "org.bluetooth.profile.avrcp_remote_control_remote_control",
            uuidByte3: 0x11,
            uuidByte4: 0xe
        )

        /// A/V Remote Control Controller. ID is `org.bluetooth.profile.avrcp_remote_control_remote_control_controller`.
        public static let avRemoteControlController = AssignedNumberWithID(
            name: "A/V Remote Control Controller",
            id: "org.bluetooth.profile.avrcp_remote_control_remote_control_controller",
            uuidByte3: 0x11,
            uuidByte4: 0xf
        )

        /// A/V Remote Control Target. ID is `org.bluetooth.profile.avrcp_remote_control_target`.
        public static let avRemoteControlTarget = AssignedNumberWithID(
            name: "A/V Remote Control Target",
            id: "org.bluetooth.profile.avrcp_remote_control_target",
            uuidByte3: 0x11,
            uuidByte4: 0xc
        )

        /// BasicPrinting. ID is `org.bluetooth.profile.bpp`.
        public static let basicprinting = AssignedNumberWithID(
            name: "BasicPrinting",
            id: "org.bluetooth.profile.bpp",
            uuidByte3: 0x11,
            uuidByte4: 0x22
        )

        /// BrowseGroupDescriptorServiceClassID. ID is `org.bluetooth.service_class.browse_group_descriptor`.
        public static let browsegroupdescriptorserviceclassid = AssignedNumberWithID(
            name: "BrowseGroupDescriptorServiceClassID",
            id: "org.bluetooth.service_class.browse_group_descriptor",
            uuidByte3: 0x10,
            uuidByte4: 0x1
        )

        /// Calendar Tasks and Notes Profile. ID is `org.bluetooth.profile.calendar_task_notes_profile`.
        public static let calendarTasksAndNotesProfile = AssignedNumberWithID(
            name: "Calendar Tasks and Notes Profile",
            id: "org.bluetooth.profile.calendar_task_notes_profile",
            uuidByte3: 0x11,
            uuidByte4: 0x3e
        )

        /// Common_ISDN_Access. ID is `org.bluetooth.service_class.isdn`.
        public static let commonisdnaccess = AssignedNumberWithID(
            name: "Common_ISDN_Access",
            id: "org.bluetooth.service_class.isdn",
            uuidByte3: 0x11,
            uuidByte4: 0x28
        )

        /// CordlessTelephony. ID is `org.bluetooth.profile.cordless_telephony`.
        public static let cordlesstelephony = AssignedNumberWithID(
            name: "CordlessTelephony",
            id: "org.bluetooth.profile.cordless_telephony",
            uuidByte3: 0x11,
            uuidByte4: 0x9
        )

        /// CTN Access Service. ID is `org.bluetooth.service_class.calendar_task_note_access`.
        public static let ctnAccessService = AssignedNumberWithID(
            name: "CTN Access Service",
            id: "org.bluetooth.service_class.calendar_task_note_access",
            uuidByte3: 0x11,
            uuidByte4: 0x3c
        )

        /// CTN Notification Service. ID is `org.bluetooth.service_class.calendar_task_note_notification`.
        public static let ctnNotificationService = AssignedNumberWithID(
            name: "CTN Notification Service",
            id: "org.bluetooth.service_class.calendar_task_note_notification",
            uuidByte3: 0x11,
            uuidByte4: 0x3d
        )

        /// Dial-Up Networking. ID is `org.bluetooth.profile.dial_up_networking`.
        public static let dialupNetworking = AssignedNumberWithID(
            name: "Dial-Up Networking",
            id: "org.bluetooth.profile.dial_up_networking",
            uuidByte3: 0x11,
            uuidByte4: 0x3
        )

        /// DirectPrinting. ID is `org.bluetooth.profile.bpp_direct_printing`.
        public static let directprinting = AssignedNumberWithID(
            name: "DirectPrinting",
            id: "org.bluetooth.profile.bpp_direct_printing",
            uuidByte3: 0x11,
            uuidByte4: 0x18
        )

        /// DirectPrintingReferencedObjectsService. ID is `org.bluetooth.service_class.bpp_direct_printing_referenced_objects`.
        public static let directprintingreferencedobjectsservice = AssignedNumberWithID(
            name: "DirectPrintingReferencedObjectsService",
            id: "org.bluetooth.service_class.bpp_direct_printing_referenced_objects",
            uuidByte3: 0x11,
            uuidByte4: 0x20
        )

        /// ESDP_UPNP_IP_LAP. ID is `org.bluetooth.service_class.enhanced_service_discovery_ip_lap_service`.
        public static let esdpupnpiplap = AssignedNumberWithID(
            name: "ESDP_UPNP_IP_LAP",
            id: "org.bluetooth.service_class.enhanced_service_discovery_ip_lap_service",
            uuidByte3: 0x13,
            uuidByte4: 0x1
        )

        /// ESDP_UPNP_IP_PAN. ID is `org.bluetooth.service_class.enhanced_service_discovery_ip_pan_service`.
        public static let esdpupnpippan = AssignedNumberWithID(
            name: "ESDP_UPNP_IP_PAN",
            id: "org.bluetooth.service_class.enhanced_service_discovery_ip_pan_service",
            uuidByte3: 0x13,
            uuidByte4: 0x0
        )

        /// ESDP_UPNP_L2CAP. ID is `org.bluetooth.service_class.enhanced_service_discovery_l2cap_service`.
        public static let esdpupnpl2cap = AssignedNumberWithID(
            name: "ESDP_UPNP_L2CAP",
            id: "org.bluetooth.service_class.enhanced_service_discovery_l2cap_service",
            uuidByte3: 0x13,
            uuidByte4: 0x2
        )

        /// Fax. ID is `org.bluetooth.profile.fax`.
        public static let fax = AssignedNumberWithID(
            name: "Fax",
            id: "org.bluetooth.profile.fax",
            uuidByte3: 0x11,
            uuidByte4: 0x11
        )

        /// Generic Audio. ID is `org.bluetooth.service_class.generic_audio`.
        public static let genericAudio = AssignedNumberWithID(
            name: "Generic Audio",
            id: "org.bluetooth.service_class.generic_audio",
            uuidByte3: 0x12,
            uuidByte4: 0x3
        )

        /// Generic Networking. ID is `org.bluetooth.service_class.generic_networking`.
        public static let genericNetworking = AssignedNumberWithID(
            name: "Generic Networking",
            id: "org.bluetooth.service_class.generic_networking",
            uuidByte3: 0x12,
            uuidByte4: 0x1
        )

        /// GenericFileTransfer. ID is `org.bluetooth.service_class.generic_file_transfer`.
        public static let genericfiletransfer = AssignedNumberWithID(
            name: "GenericFileTransfer",
            id: "org.bluetooth.service_class.generic_file_transfer",
            uuidByte3: 0x12,
            uuidByte4: 0x2
        )

        /// GenericTelephony. ID is `org.bluetooth.service_class.generic_telephony`.
        public static let generictelephony = AssignedNumberWithID(
            name: "GenericTelephony",
            id: "org.bluetooth.service_class.generic_telephony",
            uuidByte3: 0x12,
            uuidByte4: 0x4
        )

        /// GN. ID is `org.bluetooth.profile.pan_gn`.
        public static let gn = AssignedNumberWithID(
            name: "GN",
            id: "org.bluetooth.profile.pan_gn",
            uuidByte3: 0x11,
            uuidByte4: 0x17
        )

        /// GNSS. ID is `org.bluetooth.profile.global_navigiation_satellite_system`.
        public static let gnss = AssignedNumberWithID(
            name: "GNSS",
            id: "org.bluetooth.profile.global_navigiation_satellite_system",
            uuidByte3: 0x11,
            uuidByte4: 0x35
        )

        /// GNSS_Server. ID is `org.bluetooth.service_class.global_navigiation_satellite_system_server`.
        public static let gnssserver = AssignedNumberWithID(
            name: "GNSS_Server",
            id: "org.bluetooth.service_class.global_navigiation_satellite_system_server",
            uuidByte3: 0x11,
            uuidByte4: 0x36
        )

        /// Hands-Free. ID is `org.bluetooth.profile.hands_free`.
        public static let handsfree = AssignedNumberWithID(
            name: "Hands-Free",
            id: "org.bluetooth.profile.hands_free",
            uuidByte3: 0x11,
            uuidByte4: 0x1e
        )

        /// HardcopyCableReplacement. ID is `org.bluetooth.profile.hcrp`.
        public static let hardcopycablereplacement = AssignedNumberWithID(
            name: "HardcopyCableReplacement",
            id: "org.bluetooth.profile.hcrp",
            uuidByte3: 0x11,
            uuidByte4: 0x25
        )

        /// HCR_Print. ID is `org.bluetooth.service_class.hcr_print`.
        public static let hcrprint = AssignedNumberWithID(
            name: "HCR_Print",
            id: "org.bluetooth.service_class.hcr_print",
            uuidByte3: 0x11,
            uuidByte4: 0x26
        )

        /// HCR_Scan. ID is `org.bluetooth.service_class.hcr_scan`.
        public static let hcrscan = AssignedNumberWithID(
            name: "HCR_Scan",
            id: "org.bluetooth.service_class.hcr_scan",
            uuidByte3: 0x11,
            uuidByte4: 0x27
        )

        /// HDP. ID is `org.bluetooth.profile.health_device`.
        public static let hdp = AssignedNumberWithID(
            name: "HDP",
            id: "org.bluetooth.profile.health_device",
            uuidByte3: 0x14,
            uuidByte4: 0x0
        )

        /// HDP Sink. ID is `org.bluetooth.service_class.health_device_sink`.
        public static let hdpSink = AssignedNumberWithID(
            name: "HDP Sink",
            id: "org.bluetooth.service_class.health_device_sink",
            uuidByte3: 0x14,
            uuidByte4: 0x2
        )

        /// HDP Source. ID is `org.bluetooth.service_class.health_device_source`.
        public static let hdpSource = AssignedNumberWithID(
            name: "HDP Source",
            id: "org.bluetooth.service_class.health_device_source",
            uuidByte3: 0x14,
            uuidByte4: 0x1
        )

        /// Headset. ID is `org.bluetooth.profile.headset`.
        public static let headset = AssignedNumberWithID(
            name: "Headset",
            id: "org.bluetooth.profile.headset",
            uuidByte3: 0x11,
            uuidByte4: 0x8
        )

        /// Headset Audio Gateway. ID is `org.bluetooth.profile.headset_audio_gateway`.
        public static let headsetAudioGateway = AssignedNumberWithID(
            name: "Headset Audio Gateway",
            id: "org.bluetooth.profile.headset_audio_gateway",
            uuidByte3: 0x11,
            uuidByte4: 0x12
        )

        /// Headset - HS. ID is `org.bluetooth.service_class.headset_hs`.
        public static let headsetHs = AssignedNumberWithID(
            name: "Headset - HS",
            id: "org.bluetooth.service_class.headset_hs",
            uuidByte3: 0x11,
            uuidByte4: 0x31
        )

        /// HID. ID is `org.bluetooth.profile.hid`.
        public static let hid = AssignedNumberWithID(
            name: "HID",
            id: "org.bluetooth.profile.hid",
            uuidByte3: 0x11,
            uuidByte4: 0x24
        )

        /// Imaging. ID is `org.bluetooth.profile.bip_imaging`.
        public static let imaging = AssignedNumberWithID(
            name: "Imaging",
            id: "org.bluetooth.profile.bip_imaging",
            uuidByte3: 0x11,
            uuidByte4: 0x1a
        )

        /// Imaging Automatic Archive. ID is `org.bluetooth.profile.bip_imaging_automatic_archive`.
        public static let imagingAutomaticArchive = AssignedNumberWithID(
            name: "Imaging Automatic Archive",
            id: "org.bluetooth.profile.bip_imaging_automatic_archive",
            uuidByte3: 0x11,
            uuidByte4: 0x1c
        )

        /// Imaging Referenced Objects. ID is `org.bluetooth.profile.bip_imaging_referenced_objects`.
        public static let imagingReferencedObjects = AssignedNumberWithID(
            name: "Imaging Referenced Objects",
            id: "org.bluetooth.profile.bip_imaging_referenced_objects",
            uuidByte3: 0x11,
            uuidByte4: 0x1d
        )

        /// Imaging Responder. ID is `org.bluetooth.profile.bip_imaging_responder`.
        public static let imagingResponder = AssignedNumberWithID(
            name: "Imaging Responder",
            id: "org.bluetooth.profile.bip_imaging_responder",
            uuidByte3: 0x11,
            uuidByte4: 0x1b
        )

        /// Intercom. ID is `org.bluetooth.profile.intercom`.
        public static let intercom = AssignedNumberWithID(
            name: "Intercom",
            id: "org.bluetooth.profile.intercom",
            uuidByte3: 0x11,
            uuidByte4: 0x10
        )

        /// IrMCSync. ID is `org.bluetooth.profile.synchronization_profile`.
        public static let irmcsync = AssignedNumberWithID(
            name: "IrMCSync",
            id: "org.bluetooth.profile.synchronization_profile",
            uuidByte3: 0x11,
            uuidByte4: 0x4
        )

        /// IrMCSyncCommand. ID is `org.bluetooth.profile.synchronization_command`.
        public static let irmcsynccommand = AssignedNumberWithID(
            name: "IrMCSyncCommand",
            id: "org.bluetooth.profile.synchronization_command",
            uuidByte3: 0x11,
            uuidByte4: 0x7
        )

        /// LANAccessUsingPPP. ID is `org.bluetooth.profile.lan_access`.
        public static let lanaccessusingppp = AssignedNumberWithID(
            name: "LANAccessUsingPPP",
            id: "org.bluetooth.profile.lan_access",
            uuidByte3: 0x11,
            uuidByte4: 0x2
        )

        /// Message Access Profile. ID is `org.bluetooth.profile.message_access_profile`.
        public static let messageAccessProfile = AssignedNumberWithID(
            name: "Message Access Profile",
            id: "org.bluetooth.profile.message_access_profile",
            uuidByte3: 0x11,
            uuidByte4: 0x34
        )

        /// Message Access Server. ID is `org.bluetooth.service_class.map_server`.
        public static let messageAccessServer = AssignedNumberWithID(
            name: "Message Access Server",
            id: "org.bluetooth.service_class.map_server",
            uuidByte3: 0x11,
            uuidByte4: 0x32
        )

        /// Message Notification Server. ID is `org.bluetooth.service_class.map_notification_server`.
        public static let messageNotificationServer = AssignedNumberWithID(
            name: "Message Notification Server",
            id: "org.bluetooth.service_class.map_notification_server",
            uuidByte3: 0x11,
            uuidByte4: 0x33
        )

        /// MPS. ID is `org.bluetooth.service_class.multi_profile_service`.
        public static let mps = AssignedNumberWithID(
            name: "MPS",
            id: "org.bluetooth.service_class.multi_profile_service",
            uuidByte3: 0x11,
            uuidByte4: 0x3b
        )

        /// Multi Profile Specification. ID is `org.bluetooth.profile.multi_profile_specification`.
        public static let multiProfileSpecification = AssignedNumberWithID(
            name: "Multi Profile Specification",
            id: "org.bluetooth.profile.multi_profile_specification",
            uuidByte3: 0x11,
            uuidByte4: 0x3a
        )

        /// NAP. ID is `org.bluetooth.profile.pan_network_access_point`.
        public static let nap = AssignedNumberWithID(
            name: "NAP",
            id: "org.bluetooth.profile.pan_network_access_point",
            uuidByte3: 0x11,
            uuidByte4: 0x16
        )

        /// OBEX File Transfer. ID is `org.bluetooth.profile.file_transfer_profile`.
        public static let obexFileTransfer = AssignedNumberWithID(
            name: "OBEX File Transfer",
            id: "org.bluetooth.profile.file_transfer_profile",
            uuidByte3: 0x11,
            uuidByte4: 0x6
        )

        /// OBEXObjectPush. ID is `org.bluetooth.profile.object_push`.
        public static let obexobjectpush = AssignedNumberWithID(
            name: "OBEXObjectPush",
            id: "org.bluetooth.profile.object_push",
            uuidByte3: 0x11,
            uuidByte4: 0x5
        )

        /// PANU. ID is `org.bluetooth.profile.pan_user`.
        public static let panu = AssignedNumberWithID(
            name: "PANU",
            id: "org.bluetooth.profile.pan_user",
            uuidByte3: 0x11,
            uuidByte4: 0x15
        )

        /// Phonebook Access Client. ID is `org.bluetooth.service_class.phone_book_access_client`.
        public static let phonebookAccessClient = AssignedNumberWithID(
            name: "Phonebook Access Client",
            id: "org.bluetooth.service_class.phone_book_access_client",
            uuidByte3: 0x11,
            uuidByte4: 0x2e
        )

        /// Phonebook Access Profile. ID is `org.bluetooth.profile.phone_book_access_profile`.
        public static let phonebookAccessProfile = AssignedNumberWithID(
            name: "Phonebook Access Profile",
            id: "org.bluetooth.profile.phone_book_access_profile",
            uuidByte3: 0x11,
            uuidByte4: 0x30
        )

        /// Phonebook Access Server. ID is `org.bluetooth.service_class.phone_book_access_server`.
        public static let phonebookAccessServer = AssignedNumberWithID(
            name: "Phonebook Access Server",
            id: "org.bluetooth.service_class.phone_book_access_server",
            uuidByte3: 0x11,
            uuidByte4: 0x2f
        )

        /// PnPInformation. ID is `org.bluetooth.service_class.device_identification`.
        public static let pnpinformation = AssignedNumberWithID(
            name: "PnPInformation",
            id: "org.bluetooth.service_class.device_identification",
            uuidByte3: 0x12,
            uuidByte4: 0x0
        )

        /// PrintingStatus. ID is `org.bluetooth.service_class.bpp_printing_status`.
        public static let printingstatus = AssignedNumberWithID(
            name: "PrintingStatus",
            id: "org.bluetooth.service_class.bpp_printing_status",
            uuidByte3: 0x11,
            uuidByte4: 0x23
        )

        /// ReferencePrinting. ID is `org.bluetooth.profile.bpp_reference_printing`.
        public static let referenceprinting = AssignedNumberWithID(
            name: "ReferencePrinting",
            id: "org.bluetooth.profile.bpp_reference_printing",
            uuidByte3: 0x11,
            uuidByte4: 0x19
        )

        /// ReflectedUI. ID is `org.bluetooth.service_class.bpp_reflected_ui`.
        public static let reflectedui = AssignedNumberWithID(
            name: "ReflectedUI",
            id: "org.bluetooth.service_class.bpp_reflected_ui",
            uuidByte3: 0x11,
            uuidByte4: 0x21
        )

        /// SerialPort. ID is `org.bluetooth.profile.serial_port`.
        public static let serialport = AssignedNumberWithID(
            name: "SerialPort",
            id: "org.bluetooth.profile.serial_port",
            uuidByte3: 0x11,
            uuidByte4: 0x1
        )

        /// ServiceDiscoveryServerServiceClassID. ID is `org.bluetooth.service_class.service_discovery_server`.
        public static let servicediscoveryserverserviceclassid = AssignedNumberWithID(
            name: "ServiceDiscoveryServerServiceClassID",
            id: "org.bluetooth.service_class.service_discovery_server",
            uuidByte3: 0x10,
            uuidByte4: 0x0
        )

        /// SIM Access. ID is `org.bluetooth.profile.sap`.
        public static let simAccess = AssignedNumberWithID(
            name: "SIM Access",
            id: "org.bluetooth.profile.sap",
            uuidByte3: 0x11,
            uuidByte4: 0x2d
        )

        /// UPNP_IP_Service. ID is `org.bluetooth.service_class.enhanced_service_discovery_ip_service`.
        public static let upnpipservice = AssignedNumberWithID(
            name: "UPNP_IP_Service",
            id: "org.bluetooth.service_class.enhanced_service_discovery_ip_service",
            uuidByte3: 0x12,
            uuidByte4: 0x6
        )

        /// UPNP_Service. ID is `org.bluetooth.service_class.enhanced_service_discovery_service`.
        public static let upnpservice = AssignedNumberWithID(
            name: "UPNP_Service",
            id: "org.bluetooth.service_class.enhanced_service_discovery_service",
            uuidByte3: 0x12,
            uuidByte4: 0x5
        )

        /// Video Distribution. ID is `org.bluetooth.profile.video_distribution`.
        public static let videoDistribution = AssignedNumberWithID(
            name: "Video Distribution",
            id: "org.bluetooth.profile.video_distribution",
            uuidByte3: 0x13,
            uuidByte4: 0x5
        )

        /// Video Sink. ID is `org.bluetooth.service_class.video_distribution_sink`.
        public static let videoSink = AssignedNumberWithID(
            name: "Video Sink",
            id: "org.bluetooth.service_class.video_distribution_sink",
            uuidByte3: 0x13,
            uuidByte4: 0x4
        )

        /// Video Source. ID is `org.bluetooth.service_class.video_distribution_source`.
        public static let videoSource = AssignedNumberWithID(
            name: "Video Source",
            id: "org.bluetooth.service_class.video_distribution_source",
            uuidByte3: 0x13,
            uuidByte4: 0x3
        )

        /// WAP. ID is `org.bluetooth.profile.wap`.
        public static let wap = AssignedNumberWithID(
            name: "WAP",
            id: "org.bluetooth.profile.wap",
            uuidByte3: 0x11,
            uuidByte4: 0x13
        )

        /// WAP_CLIENT. ID is `org.bluetooth.profile.wap_client`.
        public static let wapclient = AssignedNumberWithID(
            name: "WAP_CLIENT",
            id: "org.bluetooth.profile.wap_client",
            uuidByte3: 0x11,
            uuidByte4: 0x14
        )

        public static let all: [any AssignedNumberProtocol] = [
            _3dDisplay,
            _3dGlasses,
            _3dSynchProfile,
            advancedAudioDistribution,
            agHandsfree,
            audioSink,
            audioSource,
            avRemoteControl,
            avRemoteControlController,
            avRemoteControlTarget,
            basicprinting,
            browsegroupdescriptorserviceclassid,
            calendarTasksAndNotesProfile,
            commonisdnaccess,
            cordlesstelephony,
            ctnAccessService,
            ctnNotificationService,
            dialupNetworking,
            directprinting,
            directprintingreferencedobjectsservice,
            esdpupnpiplap,
            esdpupnpippan,
            esdpupnpl2cap,
            fax,
            genericAudio,
            genericNetworking,
            genericfiletransfer,
            generictelephony,
            gn,
            gnss,
            gnssserver,
            handsfree,
            hardcopycablereplacement,
            hcrprint,
            hcrscan,
            hdp,
            hdpSink,
            hdpSource,
            headset,
            headsetAudioGateway,
            headsetHs,
            hid,
            imaging,
            imagingAutomaticArchive,
            imagingReferencedObjects,
            imagingResponder,
            intercom,
            irmcsync,
            irmcsynccommand,
            lanaccessusingppp,
            messageAccessProfile,
            messageAccessServer,
            messageNotificationServer,
            mps,
            multiProfileSpecification,
            nap,
            obexFileTransfer,
            obexobjectpush,
            panu,
            phonebookAccessClient,
            phonebookAccessProfile,
            phonebookAccessServer,
            pnpinformation,
            printingstatus,
            referenceprinting,
            reflectedui,
            serialport,
            servicediscoveryserverserviceclassid,
            simAccess,
            upnpipservice,
            upnpservice,
            videoDistribution,
            videoSink,
            videoSource,
            wap,
            wapclient,
        ]
    }

    /// From `assigned_numbers/uuids/service_uuids.yaml`.
    public enum ServiceUuids {
        /// Alert Notification. ID is `org.bluetooth.service.alert_notification`.
        public static let alertNotification = AssignedNumberWithID(
            name: "Alert Notification",
            id: "org.bluetooth.service.alert_notification",
            uuidByte3: 0x18,
            uuidByte4: 0x11
        )

        /// Audio Input Control. ID is `org.bluetooth.service.audio_input_control`.
        public static let audioInputControl = AssignedNumberWithID(
            name: "Audio Input Control",
            id: "org.bluetooth.service.audio_input_control",
            uuidByte3: 0x18,
            uuidByte4: 0x43
        )

        /// Audio Stream Control. ID is `org.bluetooth.service.audio_stream_control`.
        public static let audioStreamControl = AssignedNumberWithID(
            name: "Audio Stream Control",
            id: "org.bluetooth.service.audio_stream_control",
            uuidByte3: 0x18,
            uuidByte4: 0x4e
        )

        /// Authorization Control. ID is `org.bluetooth.service.authorization_control`.
        public static let authorizationControl = AssignedNumberWithID(
            name: "Authorization Control",
            id: "org.bluetooth.service.authorization_control",
            uuidByte3: 0x18,
            uuidByte4: 0x3d
        )

        /// Automation IO. ID is `org.bluetooth.service.automation_io`.
        public static let automationIo = AssignedNumberWithID(
            name: "Automation IO",
            id: "org.bluetooth.service.automation_io",
            uuidByte3: 0x18,
            uuidByte4: 0x15
        )

        /// Basic Audio Announcement. ID is `org.bluetooth.service.basic_audio_announcement`.
        public static let basicAudioAnnouncement = AssignedNumberWithID(
            name: "Basic Audio Announcement",
            id: "org.bluetooth.service.basic_audio_announcement",
            uuidByte3: 0x18,
            uuidByte4: 0x51
        )

        /// Battery. ID is `org.bluetooth.service.battery_service`.
        public static let battery = AssignedNumberWithID(
            name: "Battery",
            id: "org.bluetooth.service.battery_service",
            uuidByte3: 0x18,
            uuidByte4: 0xf
        )

        /// Binary Sensor. ID is `org.bluetooth.service.binary_sensor`.
        public static let binarySensor = AssignedNumberWithID(
            name: "Binary Sensor",
            id: "org.bluetooth.service.binary_sensor",
            uuidByte3: 0x18,
            uuidByte4: 0x3b
        )

        /// Blood Pressure. ID is `org.bluetooth.service.blood_pressure`.
        public static let bloodPressure = AssignedNumberWithID(
            name: "Blood Pressure",
            id: "org.bluetooth.service.blood_pressure",
            uuidByte3: 0x18,
            uuidByte4: 0x10
        )

        /// Body Composition. ID is `org.bluetooth.service.body_composition`.
        public static let bodyComposition = AssignedNumberWithID(
            name: "Body Composition",
            id: "org.bluetooth.service.body_composition",
            uuidByte3: 0x18,
            uuidByte4: 0x1b
        )

        /// Bond Management. ID is `org.bluetooth.service.bond_management`.
        public static let bondManagement = AssignedNumberWithID(
            name: "Bond Management",
            id: "org.bluetooth.service.bond_management",
            uuidByte3: 0x18,
            uuidByte4: 0x1e
        )

        /// Broadcast Audio Announcement. ID is `org.bluetooth.service.broadcast_audio_announcement`.
        public static let broadcastAudioAnnouncement = AssignedNumberWithID(
            name: "Broadcast Audio Announcement",
            id: "org.bluetooth.service.broadcast_audio_announcement",
            uuidByte3: 0x18,
            uuidByte4: 0x52
        )

        /// Broadcast Audio Scan. ID is `org.bluetooth.service.broadcast_audio_scan`.
        public static let broadcastAudioScan = AssignedNumberWithID(
            name: "Broadcast Audio Scan",
            id: "org.bluetooth.service.broadcast_audio_scan",
            uuidByte3: 0x18,
            uuidByte4: 0x4f
        )

        /// Common Audio. ID is `org.bluetooth.service.common_audio`.
        public static let commonAudio = AssignedNumberWithID(
            name: "Common Audio",
            id: "org.bluetooth.service.common_audio",
            uuidByte3: 0x18,
            uuidByte4: 0x53
        )

        /// Constant Tone Extension. ID is `org.bluetooth.service.constant_tone_extension`.
        public static let constantToneExtension = AssignedNumberWithID(
            name: "Constant Tone Extension",
            id: "org.bluetooth.service.constant_tone_extension",
            uuidByte3: 0x18,
            uuidByte4: 0x4a
        )

        /// Continuous Glucose Monitoring. ID is `org.bluetooth.service.continuous_glucose_monitoring`.
        public static let continuousGlucoseMonitoring = AssignedNumberWithID(
            name: "Continuous Glucose Monitoring",
            id: "org.bluetooth.service.continuous_glucose_monitoring",
            uuidByte3: 0x18,
            uuidByte4: 0x1f
        )

        /// Coordinated Set Identification. ID is `org.bluetooth.service.coordinated_set_identification`.
        public static let coordinatedSetIdentification = AssignedNumberWithID(
            name: "Coordinated Set Identification",
            id: "org.bluetooth.service.coordinated_set_identification",
            uuidByte3: 0x18,
            uuidByte4: 0x46
        )

        /// Current Time. ID is `org.bluetooth.service.current_time`.
        public static let currentTime = AssignedNumberWithID(
            name: "Current Time",
            id: "org.bluetooth.service.current_time",
            uuidByte3: 0x18,
            uuidByte4: 0x5
        )

        /// Cycling Power. ID is `org.bluetooth.service.cycling_power`.
        public static let cyclingPower = AssignedNumberWithID(
            name: "Cycling Power",
            id: "org.bluetooth.service.cycling_power",
            uuidByte3: 0x18,
            uuidByte4: 0x18
        )

        /// Cycling Speed and Cadence. ID is `org.bluetooth.service.cycling_speed_and_cadence`.
        public static let cyclingSpeedAndCadence = AssignedNumberWithID(
            name: "Cycling Speed and Cadence",
            id: "org.bluetooth.service.cycling_speed_and_cadence",
            uuidByte3: 0x18,
            uuidByte4: 0x16
        )

        /// Device Information. ID is `org.bluetooth.service.device_information`.
        public static let deviceInformation = AssignedNumberWithID(
            name: "Device Information",
            id: "org.bluetooth.service.device_information",
            uuidByte3: 0x18,
            uuidByte4: 0xa
        )

        /// Device Time. ID is `org.bluetooth.service.device_time`.
        public static let deviceTime = AssignedNumberWithID(
            name: "Device Time",
            id: "org.bluetooth.service.device_time",
            uuidByte3: 0x18,
            uuidByte4: 0x47
        )

        /// Elapsed Time. ID is `org.bluetooth.service.elapsed_time`.
        public static let elapsedTime = AssignedNumberWithID(
            name: "Elapsed Time",
            id: "org.bluetooth.service.elapsed_time",
            uuidByte3: 0x18,
            uuidByte4: 0x3f
        )

        /// Electronic Shelf Label. ID is `org.bluetooth.service.electronic_shelf_label`.
        public static let electronicShelfLabel = AssignedNumberWithID(
            name: "Electronic Shelf Label",
            id: "org.bluetooth.service.electronic_shelf_label",
            uuidByte3: 0x18,
            uuidByte4: 0x57
        )

        /// Emergency Configuration. ID is `org.bluetooth.service.emergency_configuration`.
        public static let emergencyConfiguration = AssignedNumberWithID(
            name: "Emergency Configuration",
            id: "org.bluetooth.service.emergency_configuration",
            uuidByte3: 0x18,
            uuidByte4: 0x3c
        )

        /// Environmental Sensing. ID is `org.bluetooth.service.environmental_sensing`.
        public static let environmentalSensing = AssignedNumberWithID(
            name: "Environmental Sensing",
            id: "org.bluetooth.service.environmental_sensing",
            uuidByte3: 0x18,
            uuidByte4: 0x1a
        )

        /// Fitness Machine. ID is `org.bluetooth.service.fitness_machine`.
        public static let fitnessMachine = AssignedNumberWithID(
            name: "Fitness Machine",
            id: "org.bluetooth.service.fitness_machine",
            uuidByte3: 0x18,
            uuidByte4: 0x26
        )

        /// Gaming Audio. ID is `org.bluetooth.service.gaming_audio`.
        public static let gamingAudio = AssignedNumberWithID(
            name: "Gaming Audio",
            id: "org.bluetooth.service.gaming_audio",
            uuidByte3: 0x18,
            uuidByte4: 0x58
        )

        /// GAP. ID is `org.bluetooth.service.gap`.
        public static let gap = AssignedNumberWithID(
            name: "GAP",
            id: "org.bluetooth.service.gap",
            uuidByte3: 0x18,
            uuidByte4: 0x0
        )

        /// GATT. ID is `org.bluetooth.service.gatt`.
        public static let gatt = AssignedNumberWithID(
            name: "GATT",
            id: "org.bluetooth.service.gatt",
            uuidByte3: 0x18,
            uuidByte4: 0x1
        )

        /// Generic Health Sensor. ID is `org.bluetooth.service.generic_health_sensor`.
        public static let genericHealthSensor = AssignedNumberWithID(
            name: "Generic Health Sensor",
            id: "org.bluetooth.service.generic_health_sensor",
            uuidByte3: 0x18,
            uuidByte4: 0x40
        )

        /// Generic Media Control. ID is `org.bluetooth.service.generic_media_control`.
        public static let genericMediaControl = AssignedNumberWithID(
            name: "Generic Media Control",
            id: "org.bluetooth.service.generic_media_control",
            uuidByte3: 0x18,
            uuidByte4: 0x49
        )

        /// Generic Telephone Bearer. ID is `org.bluetooth.service.generic_telephone_bearer`.
        public static let genericTelephoneBearer = AssignedNumberWithID(
            name: "Generic Telephone Bearer",
            id: "org.bluetooth.service.generic_telephone_bearer",
            uuidByte3: 0x18,
            uuidByte4: 0x4c
        )

        /// Glucose. ID is `org.bluetooth.service.glucose`.
        public static let glucose = AssignedNumberWithID(
            name: "Glucose",
            id: "org.bluetooth.service.glucose",
            uuidByte3: 0x18,
            uuidByte4: 0x8
        )

        /// Health Thermometer. ID is `org.bluetooth.service.health_thermometer`.
        public static let healthThermometer = AssignedNumberWithID(
            name: "Health Thermometer",
            id: "org.bluetooth.service.health_thermometer",
            uuidByte3: 0x18,
            uuidByte4: 0x9
        )

        /// Hearing Access. ID is `org.bluetooth.service.hearing_access`.
        public static let hearingAccess = AssignedNumberWithID(
            name: "Hearing Access",
            id: "org.bluetooth.service.hearing_access",
            uuidByte3: 0x18,
            uuidByte4: 0x54
        )

        /// Heart Rate. ID is `org.bluetooth.service.heart_rate`.
        public static let heartRate = AssignedNumberWithID(
            name: "Heart Rate",
            id: "org.bluetooth.service.heart_rate",
            uuidByte3: 0x18,
            uuidByte4: 0xd
        )

        /// HTTP Proxy. ID is `org.bluetooth.service.http_proxy`.
        public static let httpProxy = AssignedNumberWithID(
            name: "HTTP Proxy",
            id: "org.bluetooth.service.http_proxy",
            uuidByte3: 0x18,
            uuidByte4: 0x23
        )

        /// Human Interface Device. ID is `org.bluetooth.service.human_interface_device`.
        public static let humanInterfaceDevice = AssignedNumberWithID(
            name: "Human Interface Device",
            id: "org.bluetooth.service.human_interface_device",
            uuidByte3: 0x18,
            uuidByte4: 0x12
        )

        /// Immediate Alert. ID is `org.bluetooth.service.immediate_alert`.
        public static let immediateAlert = AssignedNumberWithID(
            name: "Immediate Alert",
            id: "org.bluetooth.service.immediate_alert",
            uuidByte3: 0x18,
            uuidByte4: 0x2
        )

        /// Indoor Positioning. ID is `org.bluetooth.service.indoor_positioning`.
        public static let indoorPositioning = AssignedNumberWithID(
            name: "Indoor Positioning",
            id: "org.bluetooth.service.indoor_positioning",
            uuidByte3: 0x18,
            uuidByte4: 0x21
        )

        /// Insulin Delivery. ID is `org.bluetooth.service.insulin_delivery`.
        public static let insulinDelivery = AssignedNumberWithID(
            name: "Insulin Delivery",
            id: "org.bluetooth.service.insulin_delivery",
            uuidByte3: 0x18,
            uuidByte4: 0x3a
        )

        /// Internet Protocol Support. ID is `org.bluetooth.service.internet_protocol_support`.
        public static let internetProtocolSupport = AssignedNumberWithID(
            name: "Internet Protocol Support",
            id: "org.bluetooth.service.internet_protocol_support",
            uuidByte3: 0x18,
            uuidByte4: 0x20
        )

        /// Link Loss. ID is `org.bluetooth.service.link_loss`.
        public static let linkLoss = AssignedNumberWithID(
            name: "Link Loss",
            id: "org.bluetooth.service.link_loss",
            uuidByte3: 0x18,
            uuidByte4: 0x3
        )

        /// Location and Navigation. ID is `org.bluetooth.service.location_and_navigation`.
        public static let locationAndNavigation = AssignedNumberWithID(
            name: "Location and Navigation",
            id: "org.bluetooth.service.location_and_navigation",
            uuidByte3: 0x18,
            uuidByte4: 0x19
        )

        /// Media Control. ID is `org.bluetooth.service.media_control`.
        public static let mediaControl = AssignedNumberWithID(
            name: "Media Control",
            id: "org.bluetooth.service.media_control",
            uuidByte3: 0x18,
            uuidByte4: 0x48
        )

        /// Mesh Provisioning. ID is `org.bluetooth.service.mesh_provisioning`.
        public static let meshProvisioning = AssignedNumberWithID(
            name: "Mesh Provisioning",
            id: "org.bluetooth.service.mesh_provisioning",
            uuidByte3: 0x18,
            uuidByte4: 0x27
        )

        /// Mesh Proxy. ID is `org.bluetooth.service.mesh_proxy`.
        public static let meshProxy = AssignedNumberWithID(
            name: "Mesh Proxy",
            id: "org.bluetooth.service.mesh_proxy",
            uuidByte3: 0x18,
            uuidByte4: 0x28
        )

        /// Mesh Proxy Solicitation. ID is `org.bluetooth.service.mesh_proxy_solicitation`.
        public static let meshProxySolicitation = AssignedNumberWithID(
            name: "Mesh Proxy Solicitation",
            id: "org.bluetooth.service.mesh_proxy_solicitation",
            uuidByte3: 0x18,
            uuidByte4: 0x59
        )

        /// Microphone Control. ID is `org.bluetooth.service.microphone_control`.
        public static let microphoneControl = AssignedNumberWithID(
            name: "Microphone Control",
            id: "org.bluetooth.service.microphone_control",
            uuidByte3: 0x18,
            uuidByte4: 0x4d
        )

        /// Next DST Change. ID is `org.bluetooth.service.next_dst_change`.
        public static let nextDstChange = AssignedNumberWithID(
            name: "Next DST Change",
            id: "org.bluetooth.service.next_dst_change",
            uuidByte3: 0x18,
            uuidByte4: 0x7
        )

        /// Object Transfer. ID is `org.bluetooth.service.object_transfer`.
        public static let objectTransfer = AssignedNumberWithID(
            name: "Object Transfer",
            id: "org.bluetooth.service.object_transfer",
            uuidByte3: 0x18,
            uuidByte4: 0x25
        )

        /// Phone Alert Status. ID is `org.bluetooth.service.phone_alert_status`.
        public static let phoneAlertStatus = AssignedNumberWithID(
            name: "Phone Alert Status",
            id: "org.bluetooth.service.phone_alert_status",
            uuidByte3: 0x18,
            uuidByte4: 0xe
        )

        /// Physical Activity Monitor. ID is `org.bluetooth.service.physical_activity_monitor`.
        public static let physicalActivityMonitor = AssignedNumberWithID(
            name: "Physical Activity Monitor",
            id: "org.bluetooth.service.physical_activity_monitor",
            uuidByte3: 0x18,
            uuidByte4: 0x3e
        )

        /// Public Broadcast Announcement. ID is `org.bluetooth.service.public_broadcast_announcement`.
        public static let publicBroadcastAnnouncement = AssignedNumberWithID(
            name: "Public Broadcast Announcement",
            id: "org.bluetooth.service.public_broadcast_announcement",
            uuidByte3: 0x18,
            uuidByte4: 0x56
        )

        /// Published Audio Capabilities. ID is `org.bluetooth.service.published_audio_capabilities`.
        public static let publishedAudioCapabilities = AssignedNumberWithID(
            name: "Published Audio Capabilities",
            id: "org.bluetooth.service.published_audio_capabilities",
            uuidByte3: 0x18,
            uuidByte4: 0x50
        )

        /// Pulse Oximeter. ID is `org.bluetooth.service.pulse_oximeter`.
        public static let pulseOximeter = AssignedNumberWithID(
            name: "Pulse Oximeter",
            id: "org.bluetooth.service.pulse_oximeter",
            uuidByte3: 0x18,
            uuidByte4: 0x22
        )

        /// Reconnection Configuration. ID is `org.bluetooth.service.reconnection_configuration`.
        public static let reconnectionConfiguration = AssignedNumberWithID(
            name: "Reconnection Configuration",
            id: "org.bluetooth.service.reconnection_configuration",
            uuidByte3: 0x18,
            uuidByte4: 0x29
        )

        /// Reference Time Update. ID is `org.bluetooth.service.reference_time_update`.
        public static let referenceTimeUpdate = AssignedNumberWithID(
            name: "Reference Time Update",
            id: "org.bluetooth.service.reference_time_update",
            uuidByte3: 0x18,
            uuidByte4: 0x6
        )

        /// Running Speed and Cadence. ID is `org.bluetooth.service.running_speed_and_cadence`.
        public static let runningSpeedAndCadence = AssignedNumberWithID(
            name: "Running Speed and Cadence",
            id: "org.bluetooth.service.running_speed_and_cadence",
            uuidByte3: 0x18,
            uuidByte4: 0x14
        )

        /// Scan Parameters. ID is `org.bluetooth.service.scan_parameters`.
        public static let scanParameters = AssignedNumberWithID(
            name: "Scan Parameters",
            id: "org.bluetooth.service.scan_parameters",
            uuidByte3: 0x18,
            uuidByte4: 0x13
        )

        /// Telephone Bearer. ID is `org.bluetooth.service.telephone_bearer`.
        public static let telephoneBearer = AssignedNumberWithID(
            name: "Telephone Bearer",
            id: "org.bluetooth.service.telephone_bearer",
            uuidByte3: 0x18,
            uuidByte4: 0x4b
        )

        /// Telephony and Media Audio. ID is `org.bluetooth.service.telephony_and_media_audio`.
        public static let telephonyAndMediaAudio = AssignedNumberWithID(
            name: "Telephony and Media Audio",
            id: "org.bluetooth.service.telephony_and_media_audio",
            uuidByte3: 0x18,
            uuidByte4: 0x55
        )

        /// Transport Discovery. ID is `org.bluetooth.service.transport_discovery`.
        public static let transportDiscovery = AssignedNumberWithID(
            name: "Transport Discovery",
            id: "org.bluetooth.service.transport_discovery",
            uuidByte3: 0x18,
            uuidByte4: 0x24
        )

        /// Tx Power. ID is `org.bluetooth.service.tx_power`.
        public static let txPower = AssignedNumberWithID(
            name: "Tx Power",
            id: "org.bluetooth.service.tx_power",
            uuidByte3: 0x18,
            uuidByte4: 0x4
        )

        /// User Data. ID is `org.bluetooth.service.user_data`.
        public static let userData = AssignedNumberWithID(
            name: "User Data",
            id: "org.bluetooth.service.user_data",
            uuidByte3: 0x18,
            uuidByte4: 0x1c
        )

        /// Volume Control. ID is `org.bluetooth.service.volume_control`.
        public static let volumeControl = AssignedNumberWithID(
            name: "Volume Control",
            id: "org.bluetooth.service.volume_control",
            uuidByte3: 0x18,
            uuidByte4: 0x44
        )

        /// Volume Offset Control. ID is `org.bluetooth.service.volume_offset`.
        public static let volumeOffsetControl = AssignedNumberWithID(
            name: "Volume Offset Control",
            id: "org.bluetooth.service.volume_offset",
            uuidByte3: 0x18,
            uuidByte4: 0x45
        )

        /// Weight Scale. ID is `org.bluetooth.service.weight_scale`.
        public static let weightScale = AssignedNumberWithID(
            name: "Weight Scale",
            id: "org.bluetooth.service.weight_scale",
            uuidByte3: 0x18,
            uuidByte4: 0x1d
        )

        public static let all: [any AssignedNumberProtocol] = [
            alertNotification,
            audioInputControl,
            audioStreamControl,
            authorizationControl,
            automationIo,
            basicAudioAnnouncement,
            battery,
            binarySensor,
            bloodPressure,
            bodyComposition,
            bondManagement,
            broadcastAudioAnnouncement,
            broadcastAudioScan,
            commonAudio,
            constantToneExtension,
            continuousGlucoseMonitoring,
            coordinatedSetIdentification,
            currentTime,
            cyclingPower,
            cyclingSpeedAndCadence,
            deviceInformation,
            deviceTime,
            elapsedTime,
            electronicShelfLabel,
            emergencyConfiguration,
            environmentalSensing,
            fitnessMachine,
            gamingAudio,
            gap,
            gatt,
            genericHealthSensor,
            genericMediaControl,
            genericTelephoneBearer,
            glucose,
            healthThermometer,
            hearingAccess,
            heartRate,
            httpProxy,
            humanInterfaceDevice,
            immediateAlert,
            indoorPositioning,
            insulinDelivery,
            internetProtocolSupport,
            linkLoss,
            locationAndNavigation,
            mediaControl,
            meshProvisioning,
            meshProxy,
            meshProxySolicitation,
            microphoneControl,
            nextDstChange,
            objectTransfer,
            phoneAlertStatus,
            physicalActivityMonitor,
            publicBroadcastAnnouncement,
            publishedAudioCapabilities,
            pulseOximeter,
            reconnectionConfiguration,
            referenceTimeUpdate,
            runningSpeedAndCadence,
            scanParameters,
            telephoneBearer,
            telephonyAndMediaAudio,
            transportDiscovery,
            txPower,
            userData,
            volumeControl,
            volumeOffsetControl,
            weightScale,
        ]
    }

    /// From `assigned_numbers/uuids/units.yaml`.
    public enum Units {
        /// absorbed dose (gray). ID is `org.bluetooth.unit.absorbed_dose.gray`.
        public static let absorbedDoseGray = AssignedNumberWithID(
            name: "absorbed dose (gray)",
            id: "org.bluetooth.unit.absorbed_dose.gray",
            uuidByte3: 0x27,
            uuidByte4: 0x33
        )

        /// absorbed dose rate (gray per second). ID is `org.bluetooth.unit.absorbed_dose_rate.gray_per_second`.
        public static let absorbedDoseRateGrayPerSecond = AssignedNumberWithID(
            name: "absorbed dose rate (gray per second)",
            id: "org.bluetooth.unit.absorbed_dose_rate.gray_per_second",
            uuidByte3: 0x27,
            uuidByte4: 0x54
        )

        /// acceleration (metres per second squared). ID is `org.bluetooth.unit.acceleration.metres_per_second_squared`.
        public static let accelerationMetresPerSecondSquared = AssignedNumberWithID(
            name: "acceleration (metres per second squared)",
            id: "org.bluetooth.unit.acceleration.metres_per_second_squared",
            uuidByte3: 0x27,
            uuidByte4: 0x13
        )

        /// activity referred to a radionuclide (becquerel). ID is `org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel`.
        public static let activityReferredToARadionuclideBecquerel = AssignedNumberWithID(
            name: "activity referred to a radionuclide (becquerel)",
            id: "org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel",
            uuidByte3: 0x27,
            uuidByte4: 0x32
        )

        /// amount concentration (mole per cubic metre). ID is `org.bluetooth.unit.amount_concentration.mole_per_cubic_metre`.
        public static let amountConcentrationMolePerCubicMetre = AssignedNumberWithID(
            name: "amount concentration (mole per cubic metre)",
            id: "org.bluetooth.unit.amount_concentration.mole_per_cubic_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x1a
        )

        /// amount of substance (mole). ID is `org.bluetooth.unit.amount_of_substance.mole`.
        public static let amountOfSubstanceMole = AssignedNumberWithID(
            name: "amount of substance (mole)",
            id: "org.bluetooth.unit.amount_of_substance.mole",
            uuidByte3: 0x27,
            uuidByte4: 0x6
        )

        /// angular acceleration (radian per second squared). ID is `org.bluetooth.unit.angular_acceleration.radian_per_second_squared`.
        public static let angularAccelerationRadianPerSecondSquared = AssignedNumberWithID(
            name: "angular acceleration (radian per second squared)",
            id: "org.bluetooth.unit.angular_acceleration.radian_per_second_squared",
            uuidByte3: 0x27,
            uuidByte4: 0x44
        )

        /// angular velocity (radian per second). ID is `org.bluetooth.unit.angular_velocity.radian_per_second`.
        public static let angularVelocityRadianPerSecond = AssignedNumberWithID(
            name: "angular velocity (radian per second)",
            id: "org.bluetooth.unit.angular_velocity.radian_per_second",
            uuidByte3: 0x27,
            uuidByte4: 0x43
        )

        /// angular velocity (revolution per minute). ID is `org.bluetooth.unit.angular_velocity.revolution_per_minute`.
        public static let angularVelocityRevolutionPerMinute = AssignedNumberWithID(
            name: "angular velocity (revolution per minute)",
            id: "org.bluetooth.unit.angular_velocity.revolution_per_minute",
            uuidByte3: 0x27,
            uuidByte4: 0xa8
        )

        /// area (barn). ID is `org.bluetooth.unit.area.barn`.
        public static let areaBarn = AssignedNumberWithID(
            name: "area (barn)",
            id: "org.bluetooth.unit.area.barn",
            uuidByte3: 0x27,
            uuidByte4: 0x84
        )

        /// area (hectare). ID is `org.bluetooth.unit.area.hectare`.
        public static let areaHectare = AssignedNumberWithID(
            name: "area (hectare)",
            id: "org.bluetooth.unit.area.hectare",
            uuidByte3: 0x27,
            uuidByte4: 0x66
        )

        /// area (square metres). ID is `org.bluetooth.unit.area.square_metres`.
        public static let areaSquareMetres = AssignedNumberWithID(
            name: "area (square metres)",
            id: "org.bluetooth.unit.area.square_metres",
            uuidByte3: 0x27,
            uuidByte4: 0x10
        )

        /// capacitance (farad). ID is `org.bluetooth.unit.capacitance.farad`.
        public static let capacitanceFarad = AssignedNumberWithID(
            name: "capacitance (farad)",
            id: "org.bluetooth.unit.capacitance.farad",
            uuidByte3: 0x27,
            uuidByte4: 0x29
        )

        /// catalytic activity concentration (katal per cubic metre). ID is `org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre`.
        public static let catalyticActivityConcentrationKatalPerCubicMetre = AssignedNumberWithID(
            name: "catalytic activity concentration (katal per cubic metre)",
            id: "org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x57
        )

        /// catalytic activity (katal). ID is `org.bluetooth.unit.catalytic_activity.katal`.
        public static let catalyticActivityKatal = AssignedNumberWithID(
            name: "catalytic activity (katal)",
            id: "org.bluetooth.unit.catalytic_activity.katal",
            uuidByte3: 0x27,
            uuidByte4: 0x35
        )

        /// Celsius temperature (degree Celsius). ID is `org.bluetooth.unit.thermodynamic_temperature.degree_celsius`.
        public static let celsiusTemperatureDegreeCelsius = AssignedNumberWithID(
            name: "Celsius temperature (degree Celsius)",
            id: "org.bluetooth.unit.thermodynamic_temperature.degree_celsius",
            uuidByte3: 0x27,
            uuidByte4: 0x2f
        )

        /// concentration (count per cubic metre). ID is `org.bluetooth.unit.concentration.count_per_cubic_metre`.
        public static let concentrationCountPerCubicMetre = AssignedNumberWithID(
            name: "concentration (count per cubic metre)",
            id: "org.bluetooth.unit.concentration.count_per_cubic_metre",
            uuidByte3: 0x27,
            uuidByte4: 0xb5
        )

        /// current density (ampere per square metre). ID is `org.bluetooth.unit.current_density.ampere_per_square_metre`.
        public static let currentDensityAmperePerSquareMetre = AssignedNumberWithID(
            name: "current density (ampere per square metre)",
            id: "org.bluetooth.unit.current_density.ampere_per_square_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x18
        )

        /// density (kilogram per cubic metre). ID is `org.bluetooth.unit.density.kilogram_per_cubic_metre`.
        public static let densityKilogramPerCubicMetre = AssignedNumberWithID(
            name: "density (kilogram per cubic metre)",
            id: "org.bluetooth.unit.density.kilogram_per_cubic_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x15
        )

        /// dose equivalent (sievert). ID is `org.bluetooth.unit.dose_equivalent.sievert`.
        public static let doseEquivalentSievert = AssignedNumberWithID(
            name: "dose equivalent (sievert)",
            id: "org.bluetooth.unit.dose_equivalent.sievert",
            uuidByte3: 0x27,
            uuidByte4: 0x34
        )

        /// dynamic viscosity (pascal second). ID is `org.bluetooth.unit.dynamic_viscosity.pascal_second`.
        public static let dynamicViscosityPascalSecond = AssignedNumberWithID(
            name: "dynamic viscosity (pascal second)",
            id: "org.bluetooth.unit.dynamic_viscosity.pascal_second",
            uuidByte3: 0x27,
            uuidByte4: 0x40
        )

        /// electric charge (ampere hours). ID is `org.bluetooth.unit.electric_charge.ampere_hours`.
        public static let electricChargeAmpereHours = AssignedNumberWithID(
            name: "electric charge (ampere hours)",
            id: "org.bluetooth.unit.electric_charge.ampere_hours",
            uuidByte3: 0x27,
            uuidByte4: 0xb0
        )

        /// electric charge (coulomb). ID is `org.bluetooth.unit.electric_charge.coulomb`.
        public static let electricChargeCoulomb = AssignedNumberWithID(
            name: "electric charge (coulomb)",
            id: "org.bluetooth.unit.electric_charge.coulomb",
            uuidByte3: 0x27,
            uuidByte4: 0x27
        )

        /// electric charge density (coulomb per cubic metre). ID is `org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre`.
        public static let electricChargeDensityCoulombPerCubicMetre = AssignedNumberWithID(
            name: "electric charge density (coulomb per cubic metre)",
            id: "org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x4c
        )

        /// electric conductance (siemens). ID is `org.bluetooth.unit.electric_conductance.siemens`.
        public static let electricConductanceSiemens = AssignedNumberWithID(
            name: "electric conductance (siemens)",
            id: "org.bluetooth.unit.electric_conductance.siemens",
            uuidByte3: 0x27,
            uuidByte4: 0x2b
        )

        /// electric current (ampere). ID is `org.bluetooth.unit.electric_current.ampere`.
        public static let electricCurrentAmpere = AssignedNumberWithID(
            name: "electric current (ampere)",
            id: "org.bluetooth.unit.electric_current.ampere",
            uuidByte3: 0x27,
            uuidByte4: 0x4
        )

        /// electric field strength (volt per metre). ID is `org.bluetooth.unit.electric_field_strength.volt_per_metre`.
        public static let electricFieldStrengthVoltPerMetre = AssignedNumberWithID(
            name: "electric field strength (volt per metre)",
            id: "org.bluetooth.unit.electric_field_strength.volt_per_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x4b
        )

        /// electric flux density (coulomb per square metre). ID is `org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre`.
        public static let electricFluxDensityCoulombPerSquareMetre = AssignedNumberWithID(
            name: "electric flux density (coulomb per square metre)",
            id: "org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x4e
        )

        /// electric potential difference (volt). ID is `org.bluetooth.unit.electric_potential_difference.volt`.
        public static let electricPotentialDifferenceVolt = AssignedNumberWithID(
            name: "electric potential difference (volt)",
            id: "org.bluetooth.unit.electric_potential_difference.volt",
            uuidByte3: 0x27,
            uuidByte4: 0x28
        )

        /// electric resistance (ohm). ID is `org.bluetooth.unit.electric_resistance.ohm`.
        public static let electricResistanceOhm = AssignedNumberWithID(
            name: "electric resistance (ohm)",
            id: "org.bluetooth.unit.electric_resistance.ohm",
            uuidByte3: 0x27,
            uuidByte4: 0x2a
        )

        /// Electrical Apparent Energy (kilovolt ampere hour). ID is `org.bluetooth.unit.energy.kilovolt_ampere_hour`.
        public static let electricalApparentEnergyKilovoltAmpereHour = AssignedNumberWithID(
            name: "Electrical Apparent Energy (kilovolt ampere hour)",
            id: "org.bluetooth.unit.energy.kilovolt_ampere_hour",
            uuidByte3: 0x27,
            uuidByte4: 0xc7
        )

        /// Electrical Apparent Power (volt ampere). ID is `org.bluetooth.unit.power.volt_ampere`.
        public static let electricalApparentPowerVoltAmpere = AssignedNumberWithID(
            name: "Electrical Apparent Power (volt ampere)",
            id: "org.bluetooth.unit.power.volt_ampere",
            uuidByte3: 0x27,
            uuidByte4: 0xc8
        )

        /// energy density (joule per cubic metre). ID is `org.bluetooth.unit.energy_density.joule_per_cubic_metre`.
        public static let energyDensityJoulePerCubicMetre = AssignedNumberWithID(
            name: "energy density (joule per cubic metre)",
            id: "org.bluetooth.unit.energy_density.joule_per_cubic_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x4a
        )

        /// energy (gram calorie). ID is `org.bluetooth.unit.energy.gram_calorie`.
        public static let energyGramCalorie = AssignedNumberWithID(
            name: "energy (gram calorie)",
            id: "org.bluetooth.unit.energy.gram_calorie",
            uuidByte3: 0x27,
            uuidByte4: 0xa9
        )

        /// energy (joule). ID is `org.bluetooth.unit.energy.joule`.
        public static let energyJoule = AssignedNumberWithID(
            name: "energy (joule)",
            id: "org.bluetooth.unit.energy.joule",
            uuidByte3: 0x27,
            uuidByte4: 0x25
        )

        /// energy (kilogram calorie). ID is `org.bluetooth.unit.energy.kilogram_calorie`.
        public static let energyKilogramCalorie = AssignedNumberWithID(
            name: "energy (kilogram calorie)",
            id: "org.bluetooth.unit.energy.kilogram_calorie",
            uuidByte3: 0x27,
            uuidByte4: 0xaa
        )

        /// energy (kilowatt hour). ID is `org.bluetooth.unit.energy.kilowatt_hour`.
        public static let energyKilowattHour = AssignedNumberWithID(
            name: "energy (kilowatt hour)",
            id: "org.bluetooth.unit.energy.kilowatt_hour",
            uuidByte3: 0x27,
            uuidByte4: 0xab
        )

        /// exposure (coulomb per kilogram). ID is `org.bluetooth.unit.exposure.coulomb_per_kilogram`.
        public static let exposureCoulombPerKilogram = AssignedNumberWithID(
            name: "exposure (coulomb per kilogram)",
            id: "org.bluetooth.unit.exposure.coulomb_per_kilogram",
            uuidByte3: 0x27,
            uuidByte4: 0x53
        )

        /// force (newton). ID is `org.bluetooth.unit.force.newton`.
        public static let forceNewton = AssignedNumberWithID(
            name: "force (newton)",
            id: "org.bluetooth.unit.force.newton",
            uuidByte3: 0x27,
            uuidByte4: 0x23
        )

        /// frequency (hertz). ID is `org.bluetooth.unit.frequency.hertz`.
        public static let frequencyHertz = AssignedNumberWithID(
            name: "frequency (hertz)",
            id: "org.bluetooth.unit.frequency.hertz",
            uuidByte3: 0x27,
            uuidByte4: 0x22
        )

        /// heat capacity (joule per kelvin). ID is `org.bluetooth.unit.heat_capacity.joule_per_kelvin`.
        public static let heatCapacityJoulePerKelvin = AssignedNumberWithID(
            name: "heat capacity (joule per kelvin)",
            id: "org.bluetooth.unit.heat_capacity.joule_per_kelvin",
            uuidByte3: 0x27,
            uuidByte4: 0x46
        )

        /// heat flux density (watt per square metre). ID is `org.bluetooth.unit.heat_flux_density.watt_per_square_metre`.
        public static let heatFluxDensityWattPerSquareMetre = AssignedNumberWithID(
            name: "heat flux density (watt per square metre)",
            id: "org.bluetooth.unit.heat_flux_density.watt_per_square_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x45
        )

        /// illuminance (lux). ID is `org.bluetooth.unit.illuminance.lux`.
        public static let illuminanceLux = AssignedNumberWithID(
            name: "illuminance (lux)",
            id: "org.bluetooth.unit.illuminance.lux",
            uuidByte3: 0x27,
            uuidByte4: 0x31
        )

        /// inductance (henry). ID is `org.bluetooth.unit.inductance.henry`.
        public static let inductanceHenry = AssignedNumberWithID(
            name: "inductance (henry)",
            id: "org.bluetooth.unit.inductance.henry",
            uuidByte3: 0x27,
            uuidByte4: 0x2e
        )

        /// irradiance (watt per square metre). ID is `org.bluetooth.unit.irradiance.watt_per_square_metre`.
        public static let irradianceWattPerSquareMetre = AssignedNumberWithID(
            name: "irradiance (watt per square metre)",
            id: "org.bluetooth.unit.irradiance.watt_per_square_metre",
            uuidByte3: 0x27,
            uuidByte4: 0xb6
        )

        /// length (foot). ID is `org.bluetooth.unit.length.foot`.
        public static let lengthFoot = AssignedNumberWithID(
            name: "length (foot)",
            id: "org.bluetooth.unit.length.foot",
            uuidByte3: 0x27,
            uuidByte4: 0xa3
        )

        /// length (inch). ID is `org.bluetooth.unit.length.inch`.
        public static let lengthInch = AssignedNumberWithID(
            name: "length (inch)",
            id: "org.bluetooth.unit.length.inch",
            uuidByte3: 0x27,
            uuidByte4: 0xa2
        )

        /// length (metre). ID is `org.bluetooth.unit.length.metre`.
        public static let lengthMetre = AssignedNumberWithID(
            name: "length (metre)",
            id: "org.bluetooth.unit.length.metre",
            uuidByte3: 0x27,
            uuidByte4: 0x1
        )

        /// length (mile). ID is `org.bluetooth.unit.length.mile`.
        public static let lengthMile = AssignedNumberWithID(
            name: "length (mile)",
            id: "org.bluetooth.unit.length.mile",
            uuidByte3: 0x27,
            uuidByte4: 0xa4
        )

        /// length (nautical mile). ID is `org.bluetooth.unit.length.nautical_mile`.
        public static let lengthNauticalMile = AssignedNumberWithID(
            name: "length (nautical mile)",
            id: "org.bluetooth.unit.length.nautical_mile",
            uuidByte3: 0x27,
            uuidByte4: 0x83
        )

        /// length (parsec). ID is `org.bluetooth.unit.length.parsec`.
        public static let lengthParsec = AssignedNumberWithID(
            name: "length (parsec)",
            id: "org.bluetooth.unit.length.parsec",
            uuidByte3: 0x27,
            uuidByte4: 0xa1
        )

        /// length (yard). ID is `org.bluetooth.unit.length.yard`.
        public static let lengthYard = AssignedNumberWithID(
            name: "length (yard)",
            id: "org.bluetooth.unit.length.yard",
            uuidByte3: 0x27,
            uuidByte4: 0xa0
        )

        /// length (ångström). ID is `org.bluetooth.unit.length.ångström`.
        public static let lengthÅngström = AssignedNumberWithID(
            name: "length (ångström)",
            id: "org.bluetooth.unit.length.ångström",
            uuidByte3: 0x27,
            uuidByte4: 0x82
        )

        /// logarithmic radio quantity (bel). ID is `org.bluetooth.unit.logarithmic_radio_quantity.bel`.
        public static let logarithmicRadioQuantityBel = AssignedNumberWithID(
            name: "logarithmic radio quantity (bel)",
            id: "org.bluetooth.unit.logarithmic_radio_quantity.bel",
            uuidByte3: 0x27,
            uuidByte4: 0x87
        )

        /// logarithmic radio quantity (neper). ID is `org.bluetooth.unit.logarithmic_radio_quantity.neper`.
        public static let logarithmicRadioQuantityNeper = AssignedNumberWithID(
            name: "logarithmic radio quantity (neper)",
            id: "org.bluetooth.unit.logarithmic_radio_quantity.neper",
            uuidByte3: 0x27,
            uuidByte4: 0x86
        )

        /// luminance (candela per square metre). ID is `org.bluetooth.unit.luminance.candela_per_square_metre`.
        public static let luminanceCandelaPerSquareMetre = AssignedNumberWithID(
            name: "luminance (candela per square metre)",
            id: "org.bluetooth.unit.luminance.candela_per_square_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x1c
        )

        /// luminous efficacy (lumen per watt). ID is `org.bluetooth.unit.luminous_efficacy.lumen_per_watt`.
        public static let luminousEfficacyLumenPerWatt = AssignedNumberWithID(
            name: "luminous efficacy (lumen per watt)",
            id: "org.bluetooth.unit.luminous_efficacy.lumen_per_watt",
            uuidByte3: 0x27,
            uuidByte4: 0xbe
        )

        /// luminous energy (lumen hour). ID is `org.bluetooth.unit.luminous_energy.lumen_hour`.
        public static let luminousEnergyLumenHour = AssignedNumberWithID(
            name: "luminous energy (lumen hour)",
            id: "org.bluetooth.unit.luminous_energy.lumen_hour",
            uuidByte3: 0x27,
            uuidByte4: 0xbf
        )

        /// luminous exposure (lux hour). ID is `org.bluetooth.unit.luminous_exposure.lux_hour`.
        public static let luminousExposureLuxHour = AssignedNumberWithID(
            name: "luminous exposure (lux hour)",
            id: "org.bluetooth.unit.luminous_exposure.lux_hour",
            uuidByte3: 0x27,
            uuidByte4: 0xc0
        )

        /// luminous flux (lumen). ID is `org.bluetooth.unit.luminous_flux.lumen`.
        public static let luminousFluxLumen = AssignedNumberWithID(
            name: "luminous flux (lumen)",
            id: "org.bluetooth.unit.luminous_flux.lumen",
            uuidByte3: 0x27,
            uuidByte4: 0x30
        )

        /// luminous intensity (candela). ID is `org.bluetooth.unit.luminous_intensity.candela`.
        public static let luminousIntensityCandela = AssignedNumberWithID(
            name: "luminous intensity (candela)",
            id: "org.bluetooth.unit.luminous_intensity.candela",
            uuidByte3: 0x27,
            uuidByte4: 0x7
        )

        /// magnetic field strength (ampere per metre). ID is `org.bluetooth.unit.magnetic_field_strength.ampere_per_metre`.
        public static let magneticFieldStrengthAmperePerMetre = AssignedNumberWithID(
            name: "magnetic field strength (ampere per metre)",
            id: "org.bluetooth.unit.magnetic_field_strength.ampere_per_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x19
        )

        /// magnetic flux density (tesla). ID is `org.bluetooth.unit.magnetic_flux_density.tesla`.
        public static let magneticFluxDensityTesla = AssignedNumberWithID(
            name: "magnetic flux density (tesla)",
            id: "org.bluetooth.unit.magnetic_flux_density.tesla",
            uuidByte3: 0x27,
            uuidByte4: 0x2d
        )

        /// magnetic flux (weber). ID is `org.bluetooth.unit.magnetic_flux.weber`.
        public static let magneticFluxWeber = AssignedNumberWithID(
            name: "magnetic flux (weber)",
            id: "org.bluetooth.unit.magnetic_flux.weber",
            uuidByte3: 0x27,
            uuidByte4: 0x2c
        )

        /// mass concentration (kilogram per cubic metre). ID is `org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre`.
        public static let massConcentrationKilogramPerCubicMetre = AssignedNumberWithID(
            name: "mass concentration (kilogram per cubic metre)",
            id: "org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x1b
        )

        /// mass density (milligram per decilitre). ID is `org.bluetooth.unit.mass_density.milligram_per_decilitre`.
        public static let massDensityMilligramPerDecilitre = AssignedNumberWithID(
            name: "mass density (milligram per decilitre)",
            id: "org.bluetooth.unit.mass_density.milligram_per_decilitre",
            uuidByte3: 0x27,
            uuidByte4: 0xb1
        )

        /// mass density (millimole per litre). ID is `org.bluetooth.unit.mass_density.millimole_per_litre`.
        public static let massDensityMillimolePerLitre = AssignedNumberWithID(
            name: "mass density (millimole per litre)",
            id: "org.bluetooth.unit.mass_density.millimole_per_litre",
            uuidByte3: 0x27,
            uuidByte4: 0xb2
        )

        /// mass density rate ((milligram per decilitre) per minute). ID is `org.bluetooth.unit.mass_density_rate.milligram_per_decilitre_per_minute`.
        public static let massDensityRateMilligramPerDecilitrePerMinute = AssignedNumberWithID(
            name: "mass density rate ((milligram per decilitre) per minute)",
            id: "org.bluetooth.unit.mass_density_rate.milligram_per_decilitre_per_minute",
            uuidByte3: 0x27,
            uuidByte4: 0xc6
        )

        /// mass flow (gram per second). ID is `org.bluetooth.unit.mass_flow.gram_per_second`.
        public static let massFlowGramPerSecond = AssignedNumberWithID(
            name: "mass flow (gram per second)",
            id: "org.bluetooth.unit.mass_flow.gram_per_second",
            uuidByte3: 0x27,
            uuidByte4: 0xc1
        )

        /// mass (kilogram). ID is `org.bluetooth.unit.mass.kilogram`.
        public static let massKilogram = AssignedNumberWithID(
            name: "mass (kilogram)",
            id: "org.bluetooth.unit.mass.kilogram",
            uuidByte3: 0x27,
            uuidByte4: 0x2
        )

        /// mass (pound). ID is `org.bluetooth.unit.mass.pound`.
        public static let massPound = AssignedNumberWithID(
            name: "mass (pound)",
            id: "org.bluetooth.unit.mass.pound",
            uuidByte3: 0x27,
            uuidByte4: 0xb8
        )

        /// mass (tonne). ID is `org.bluetooth.unit.mass.tonne`.
        public static let massTonne = AssignedNumberWithID(
            name: "mass (tonne)",
            id: "org.bluetooth.unit.mass.tonne",
            uuidByte3: 0x27,
            uuidByte4: 0x68
        )

        /// metabolic equivalent. ID is `org.bluetooth.unit.metabolic_equivalent`.
        public static let metabolicEquivalent = AssignedNumberWithID(
            name: "metabolic equivalent",
            id: "org.bluetooth.unit.metabolic_equivalent",
            uuidByte3: 0x27,
            uuidByte4: 0xb9
        )

        /// milliliter (per kilogram per minute). ID is `org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute`.
        public static let milliliterPerKilogramPerMinute = AssignedNumberWithID(
            name: "milliliter (per kilogram per minute)",
            id: "org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute",
            uuidByte3: 0x27,
            uuidByte4: 0xb7
        )

        /// molar energy (joule per mole). ID is `org.bluetooth.unit.molar_energy.joule_per_mole`.
        public static let molarEnergyJoulePerMole = AssignedNumberWithID(
            name: "molar energy (joule per mole)",
            id: "org.bluetooth.unit.molar_energy.joule_per_mole",
            uuidByte3: 0x27,
            uuidByte4: 0x51
        )

        /// molar entropy (joule per mole kelvin). ID is `org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin`.
        public static let molarEntropyJoulePerMoleKelvin = AssignedNumberWithID(
            name: "molar entropy (joule per mole kelvin)",
            id: "org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin",
            uuidByte3: 0x27,
            uuidByte4: 0x52
        )

        /// moment of force (newton metre). ID is `org.bluetooth.unit.moment_of_force.newton_metre`.
        public static let momentOfForceNewtonMetre = AssignedNumberWithID(
            name: "moment of force (newton metre)",
            id: "org.bluetooth.unit.moment_of_force.newton_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x41
        )

        /// pace (kilometre per minute). ID is `org.bluetooth.unit.velocity.kilometer_per_minute`.
        public static let paceKilometrePerMinute = AssignedNumberWithID(
            name: "pace (kilometre per minute)",
            id: "org.bluetooth.unit.velocity.kilometer_per_minute",
            uuidByte3: 0x27,
            uuidByte4: 0xbd
        )

        /// parts per billion. ID is `org.bluetooth.unit.ppb`.
        public static let partsPerBillion = AssignedNumberWithID(
            name: "parts per billion",
            id: "org.bluetooth.unit.ppb",
            uuidByte3: 0x27,
            uuidByte4: 0xc5
        )

        /// parts per million. ID is `org.bluetooth.unit.ppm`.
        public static let partsPerMillion = AssignedNumberWithID(
            name: "parts per million",
            id: "org.bluetooth.unit.ppm",
            uuidByte3: 0x27,
            uuidByte4: 0xc4
        )

        /// per mille. ID is `org.bluetooth.unit.per_mille`.
        public static let perMille = AssignedNumberWithID(
            name: "per mille",
            id: "org.bluetooth.unit.per_mille",
            uuidByte3: 0x27,
            uuidByte4: 0xae
        )

        /// percentage. ID is `org.bluetooth.unit.percentage`.
        public static let percentage = AssignedNumberWithID(
            name: "percentage",
            id: "org.bluetooth.unit.percentage",
            uuidByte3: 0x27,
            uuidByte4: 0xad
        )

        /// period (beats per minute). ID is `org.bluetooth.unit.period.beats_per_minute`.
        public static let periodBeatsPerMinute = AssignedNumberWithID(
            name: "period (beats per minute)",
            id: "org.bluetooth.unit.period.beats_per_minute",
            uuidByte3: 0x27,
            uuidByte4: 0xaf
        )

        /// permeability (henry per metre). ID is `org.bluetooth.unit.permeability.henry_per_metre`.
        public static let permeabilityHenryPerMetre = AssignedNumberWithID(
            name: "permeability (henry per metre)",
            id: "org.bluetooth.unit.permeability.henry_per_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x50
        )

        /// permittivity (farad per metre). ID is `org.bluetooth.unit.permittivity.farad_per_metre`.
        public static let permittivityFaradPerMetre = AssignedNumberWithID(
            name: "permittivity (farad per metre)",
            id: "org.bluetooth.unit.permittivity.farad_per_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x4f
        )

        /// plane angle (degree). ID is `org.bluetooth.unit.plane_angle.degree`.
        public static let planeAngleDegree = AssignedNumberWithID(
            name: "plane angle (degree)",
            id: "org.bluetooth.unit.plane_angle.degree",
            uuidByte3: 0x27,
            uuidByte4: 0x63
        )

        /// plane angle (minute). ID is `org.bluetooth.unit.plane_angle.minute`.
        public static let planeAngleMinute = AssignedNumberWithID(
            name: "plane angle (minute)",
            id: "org.bluetooth.unit.plane_angle.minute",
            uuidByte3: 0x27,
            uuidByte4: 0x64
        )

        /// plane angle (radian). ID is `org.bluetooth.unit.plane_angle.radian`.
        public static let planeAngleRadian = AssignedNumberWithID(
            name: "plane angle (radian)",
            id: "org.bluetooth.unit.plane_angle.radian",
            uuidByte3: 0x27,
            uuidByte4: 0x20
        )

        /// plane angle (second). ID is `org.bluetooth.unit.plane_angle.second`.
        public static let planeAngleSecond = AssignedNumberWithID(
            name: "plane angle (second)",
            id: "org.bluetooth.unit.plane_angle.second",
            uuidByte3: 0x27,
            uuidByte4: 0x65
        )

        /// power (watt). ID is `org.bluetooth.unit.power.watt`.
        public static let powerWatt = AssignedNumberWithID(
            name: "power (watt)",
            id: "org.bluetooth.unit.power.watt",
            uuidByte3: 0x27,
            uuidByte4: 0x26
        )

        /// pressure (bar). ID is `org.bluetooth.unit.pressure.bar`.
        public static let pressureBar = AssignedNumberWithID(
            name: "pressure (bar)",
            id: "org.bluetooth.unit.pressure.bar",
            uuidByte3: 0x27,
            uuidByte4: 0x80
        )

        /// pressure (millimetre of mercury). ID is `org.bluetooth.unit.pressure.millimetre_of_mercury`.
        public static let pressureMillimetreOfMercury = AssignedNumberWithID(
            name: "pressure (millimetre of mercury)",
            id: "org.bluetooth.unit.pressure.millimetre_of_mercury",
            uuidByte3: 0x27,
            uuidByte4: 0x81
        )

        /// pressure (pascal). ID is `org.bluetooth.unit.pressure.pascal`.
        public static let pressurePascal = AssignedNumberWithID(
            name: "pressure (pascal)",
            id: "org.bluetooth.unit.pressure.pascal",
            uuidByte3: 0x27,
            uuidByte4: 0x24
        )

        /// pressure (pound-force per square inch). ID is `org.bluetooth.unit.pressure.pound_force_per_square_inch`.
        public static let pressurePoundforcePerSquareInch = AssignedNumberWithID(
            name: "pressure (pound-force per square inch)",
            id: "org.bluetooth.unit.pressure.pound_force_per_square_inch",
            uuidByte3: 0x27,
            uuidByte4: 0xa5
        )

        /// radiance (watt per square metre steradian). ID is `org.bluetooth.unit.radiance.watt_per_square_metre_steradian`.
        public static let radianceWattPerSquareMetreSteradian = AssignedNumberWithID(
            name: "radiance (watt per square metre steradian)",
            id: "org.bluetooth.unit.radiance.watt_per_square_metre_steradian",
            uuidByte3: 0x27,
            uuidByte4: 0x56
        )

        /// radiant intensity (watt per steradian). ID is `org.bluetooth.unit.radiant_intensity.watt_per_steradian`.
        public static let radiantIntensityWattPerSteradian = AssignedNumberWithID(
            name: "radiant intensity (watt per steradian)",
            id: "org.bluetooth.unit.radiant_intensity.watt_per_steradian",
            uuidByte3: 0x27,
            uuidByte4: 0x55
        )

        /// refractive index. ID is `org.bluetooth.unit.refractive_index`.
        public static let refractiveIndex = AssignedNumberWithID(
            name: "refractive index",
            id: "org.bluetooth.unit.refractive_index",
            uuidByte3: 0x27,
            uuidByte4: 0x1d
        )

        /// relative permeability. ID is `org.bluetooth.unit.relative_permeability`.
        public static let relativePermeability = AssignedNumberWithID(
            name: "relative permeability",
            id: "org.bluetooth.unit.relative_permeability",
            uuidByte3: 0x27,
            uuidByte4: 0x1e
        )

        /// solid angle (steradian). ID is `org.bluetooth.unit.solid_angle.steradian`.
        public static let solidAngleSteradian = AssignedNumberWithID(
            name: "solid angle (steradian)",
            id: "org.bluetooth.unit.solid_angle.steradian",
            uuidByte3: 0x27,
            uuidByte4: 0x21
        )

        /// sound pressure (decibel). ID is `org.bluetooth.unit.sound_pressure.decibel_spl`.
        public static let soundPressureDecibel = AssignedNumberWithID(
            name: "sound pressure (decibel)",
            id: "org.bluetooth.unit.sound_pressure.decibel_spl",
            uuidByte3: 0x27,
            uuidByte4: 0xc3
        )

        /// specific energy (joule per kilogram). ID is `org.bluetooth.unit.specific_energy.joule_per_kilogram`.
        public static let specificEnergyJoulePerKilogram = AssignedNumberWithID(
            name: "specific energy (joule per kilogram)",
            id: "org.bluetooth.unit.specific_energy.joule_per_kilogram",
            uuidByte3: 0x27,
            uuidByte4: 0x48
        )

        /// specific heat capacity (joule per kilogram kelvin). ID is `org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin`.
        public static let specificHeatCapacityJoulePerKilogramKelvin = AssignedNumberWithID(
            name: "specific heat capacity (joule per kilogram kelvin)",
            id: "org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin",
            uuidByte3: 0x27,
            uuidByte4: 0x47
        )

        /// specific volume (cubic metre per kilogram). ID is `org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram`.
        public static let specificVolumeCubicMetrePerKilogram = AssignedNumberWithID(
            name: "specific volume (cubic metre per kilogram)",
            id: "org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram",
            uuidByte3: 0x27,
            uuidByte4: 0x17
        )

        /// step (per minute). ID is `org.bluetooth.unit.step_per_minute`.
        public static let stepPerMinute = AssignedNumberWithID(
            name: "step (per minute)",
            id: "org.bluetooth.unit.step_per_minute",
            uuidByte3: 0x27,
            uuidByte4: 0xba
        )

        /// stroke (per minute). ID is `org.bluetooth.unit.stroke_per_minute`.
        public static let strokePerMinute = AssignedNumberWithID(
            name: "stroke (per minute)",
            id: "org.bluetooth.unit.stroke_per_minute",
            uuidByte3: 0x27,
            uuidByte4: 0xbc
        )

        /// surface charge density (coulomb per square metre). ID is `org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre`.
        public static let surfaceChargeDensityCoulombPerSquareMetre = AssignedNumberWithID(
            name: "surface charge density (coulomb per square metre)",
            id: "org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x4d
        )

        /// surface density (kilogram per square metre). ID is `org.bluetooth.unit.surface_density.kilogram_per_square_metre`.
        public static let surfaceDensityKilogramPerSquareMetre = AssignedNumberWithID(
            name: "surface density (kilogram per square metre)",
            id: "org.bluetooth.unit.surface_density.kilogram_per_square_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x16
        )

        /// surface tension (newton per metre). ID is `org.bluetooth.unit.surface_tension.newton_per_metre`.
        public static let surfaceTensionNewtonPerMetre = AssignedNumberWithID(
            name: "surface tension (newton per metre)",
            id: "org.bluetooth.unit.surface_tension.newton_per_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x42
        )

        /// thermal conductivity (watt per metre kelvin). ID is `org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin`.
        public static let thermalConductivityWattPerMetreKelvin = AssignedNumberWithID(
            name: "thermal conductivity (watt per metre kelvin)",
            id: "org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin",
            uuidByte3: 0x27,
            uuidByte4: 0x49
        )

        /// thermodynamic temperature (degree Fahrenheit). ID is `org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit`.
        public static let thermodynamicTemperatureDegreeFahrenheit = AssignedNumberWithID(
            name: "thermodynamic temperature (degree Fahrenheit)",
            id: "org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit",
            uuidByte3: 0x27,
            uuidByte4: 0xac
        )

        /// thermodynamic temperature (kelvin). ID is `org.bluetooth.unit.thermodynamic_temperature.kelvin`.
        public static let thermodynamicTemperatureKelvin = AssignedNumberWithID(
            name: "thermodynamic temperature (kelvin)",
            id: "org.bluetooth.unit.thermodynamic_temperature.kelvin",
            uuidByte3: 0x27,
            uuidByte4: 0x5
        )

        /// time (day). ID is `org.bluetooth.unit.time.day`.
        public static let timeDay = AssignedNumberWithID(
            name: "time (day)",
            id: "org.bluetooth.unit.time.day",
            uuidByte3: 0x27,
            uuidByte4: 0x62
        )

        /// time (hour). ID is `org.bluetooth.unit.time.hour`.
        public static let timeHour = AssignedNumberWithID(
            name: "time (hour)",
            id: "org.bluetooth.unit.time.hour",
            uuidByte3: 0x27,
            uuidByte4: 0x61
        )

        /// time (minute). ID is `org.bluetooth.unit.time.minute`.
        public static let timeMinute = AssignedNumberWithID(
            name: "time (minute)",
            id: "org.bluetooth.unit.time.minute",
            uuidByte3: 0x27,
            uuidByte4: 0x60
        )

        /// time (month). ID is `org.bluetooth.unit.time.month`.
        public static let timeMonth = AssignedNumberWithID(
            name: "time (month)",
            id: "org.bluetooth.unit.time.month",
            uuidByte3: 0x27,
            uuidByte4: 0xb4
        )

        /// time (second). ID is `org.bluetooth.unit.time.second`.
        public static let timeSecond = AssignedNumberWithID(
            name: "time (second)",
            id: "org.bluetooth.unit.time.second",
            uuidByte3: 0x27,
            uuidByte4: 0x3
        )

        /// time (year). ID is `org.bluetooth.unit.time.year`.
        public static let timeYear = AssignedNumberWithID(
            name: "time (year)",
            id: "org.bluetooth.unit.time.year",
            uuidByte3: 0x27,
            uuidByte4: 0xb3
        )

        /// unitless. ID is `org.bluetooth.unit.unitless`.
        public static let unitless = AssignedNumberWithID(
            name: "unitless",
            id: "org.bluetooth.unit.unitless",
            uuidByte3: 0x27,
            uuidByte4: 0x0
        )

        /// velocity (kilometre per hour). ID is `org.bluetooth.unit.velocity.kilometre_per_hour`.
        public static let velocityKilometrePerHour = AssignedNumberWithID(
            name: "velocity (kilometre per hour)",
            id: "org.bluetooth.unit.velocity.kilometre_per_hour",
            uuidByte3: 0x27,
            uuidByte4: 0xa6
        )

        /// velocity (knot). ID is `org.bluetooth.unit.velocity.knot`.
        public static let velocityKnot = AssignedNumberWithID(
            name: "velocity (knot)",
            id: "org.bluetooth.unit.velocity.knot",
            uuidByte3: 0x27,
            uuidByte4: 0x85
        )

        /// velocity (metres per second). ID is `org.bluetooth.unit.velocity.metres_per_second`.
        public static let velocityMetresPerSecond = AssignedNumberWithID(
            name: "velocity (metres per second)",
            id: "org.bluetooth.unit.velocity.metres_per_second",
            uuidByte3: 0x27,
            uuidByte4: 0x12
        )

        /// velocity (mile per hour). ID is `org.bluetooth.unit.velocity.mile_per_hour`.
        public static let velocityMilePerHour = AssignedNumberWithID(
            name: "velocity (mile per hour)",
            id: "org.bluetooth.unit.velocity.mile_per_hour",
            uuidByte3: 0x27,
            uuidByte4: 0xa7
        )

        /// volume (cubic metres). ID is `org.bluetooth.unit.volume.cubic_metres`.
        public static let volumeCubicMetres = AssignedNumberWithID(
            name: "volume (cubic metres)",
            id: "org.bluetooth.unit.volume.cubic_metres",
            uuidByte3: 0x27,
            uuidByte4: 0x11
        )

        /// volume flow (litre per second). ID is `org.bluetooth.unit.volume_flow.litre_per_second`.
        public static let volumeFlowLitrePerSecond = AssignedNumberWithID(
            name: "volume flow (litre per second)",
            id: "org.bluetooth.unit.volume_flow.litre_per_second",
            uuidByte3: 0x27,
            uuidByte4: 0xc2
        )

        /// volume (litre). ID is `org.bluetooth.unit.volume.litre`.
        public static let volumeLitre = AssignedNumberWithID(
            name: "volume (litre)",
            id: "org.bluetooth.unit.volume.litre",
            uuidByte3: 0x27,
            uuidByte4: 0x67
        )

        /// wavenumber (reciprocal metre). ID is `org.bluetooth.unit.wavenumber.reciprocal_metre`.
        public static let wavenumberReciprocalMetre = AssignedNumberWithID(
            name: "wavenumber (reciprocal metre)",
            id: "org.bluetooth.unit.wavenumber.reciprocal_metre",
            uuidByte3: 0x27,
            uuidByte4: 0x14
        )

        public static let all: [any AssignedNumberProtocol] = [
            absorbedDoseGray,
            absorbedDoseRateGrayPerSecond,
            accelerationMetresPerSecondSquared,
            activityReferredToARadionuclideBecquerel,
            amountConcentrationMolePerCubicMetre,
            amountOfSubstanceMole,
            angularAccelerationRadianPerSecondSquared,
            angularVelocityRadianPerSecond,
            angularVelocityRevolutionPerMinute,
            areaBarn,
            areaHectare,
            areaSquareMetres,
            capacitanceFarad,
            catalyticActivityConcentrationKatalPerCubicMetre,
            catalyticActivityKatal,
            celsiusTemperatureDegreeCelsius,
            concentrationCountPerCubicMetre,
            currentDensityAmperePerSquareMetre,
            densityKilogramPerCubicMetre,
            doseEquivalentSievert,
            dynamicViscosityPascalSecond,
            electricChargeAmpereHours,
            electricChargeCoulomb,
            electricChargeDensityCoulombPerCubicMetre,
            electricConductanceSiemens,
            electricCurrentAmpere,
            electricFieldStrengthVoltPerMetre,
            electricFluxDensityCoulombPerSquareMetre,
            electricPotentialDifferenceVolt,
            electricResistanceOhm,
            electricalApparentEnergyKilovoltAmpereHour,
            electricalApparentPowerVoltAmpere,
            energyDensityJoulePerCubicMetre,
            energyGramCalorie,
            energyJoule,
            energyKilogramCalorie,
            energyKilowattHour,
            exposureCoulombPerKilogram,
            forceNewton,
            frequencyHertz,
            heatCapacityJoulePerKelvin,
            heatFluxDensityWattPerSquareMetre,
            illuminanceLux,
            inductanceHenry,
            irradianceWattPerSquareMetre,
            lengthFoot,
            lengthInch,
            lengthMetre,
            lengthMile,
            lengthNauticalMile,
            lengthParsec,
            lengthYard,
            lengthÅngström,
            logarithmicRadioQuantityBel,
            logarithmicRadioQuantityNeper,
            luminanceCandelaPerSquareMetre,
            luminousEfficacyLumenPerWatt,
            luminousEnergyLumenHour,
            luminousExposureLuxHour,
            luminousFluxLumen,
            luminousIntensityCandela,
            magneticFieldStrengthAmperePerMetre,
            magneticFluxDensityTesla,
            magneticFluxWeber,
            massConcentrationKilogramPerCubicMetre,
            massDensityMilligramPerDecilitre,
            massDensityMillimolePerLitre,
            massDensityRateMilligramPerDecilitrePerMinute,
            massFlowGramPerSecond,
            massKilogram,
            massPound,
            massTonne,
            metabolicEquivalent,
            milliliterPerKilogramPerMinute,
            molarEnergyJoulePerMole,
            molarEntropyJoulePerMoleKelvin,
            momentOfForceNewtonMetre,
            paceKilometrePerMinute,
            partsPerBillion,
            partsPerMillion,
            perMille,
            percentage,
            periodBeatsPerMinute,
            permeabilityHenryPerMetre,
            permittivityFaradPerMetre,
            planeAngleDegree,
            planeAngleMinute,
            planeAngleRadian,
            planeAngleSecond,
            powerWatt,
            pressureBar,
            pressureMillimetreOfMercury,
            pressurePascal,
            pressurePoundforcePerSquareInch,
            radianceWattPerSquareMetreSteradian,
            radiantIntensityWattPerSteradian,
            refractiveIndex,
            relativePermeability,
            solidAngleSteradian,
            soundPressureDecibel,
            specificEnergyJoulePerKilogram,
            specificHeatCapacityJoulePerKilogramKelvin,
            specificVolumeCubicMetrePerKilogram,
            stepPerMinute,
            strokePerMinute,
            surfaceChargeDensityCoulombPerSquareMetre,
            surfaceDensityKilogramPerSquareMetre,
            surfaceTensionNewtonPerMetre,
            thermalConductivityWattPerMetreKelvin,
            thermodynamicTemperatureDegreeFahrenheit,
            thermodynamicTemperatureKelvin,
            timeDay,
            timeHour,
            timeMinute,
            timeMonth,
            timeSecond,
            timeYear,
            unitless,
            velocityKilometrePerHour,
            velocityKnot,
            velocityMetresPerSecond,
            velocityMilePerHour,
            volumeCubicMetres,
            volumeFlowLitrePerSecond,
            volumeLitre,
            wavenumberReciprocalMetre,
        ]
    }
}
