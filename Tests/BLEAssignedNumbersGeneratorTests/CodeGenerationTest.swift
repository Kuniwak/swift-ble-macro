import XCTest
import BLEAssignedNumbersGenerator


final class CodeGenerationTest: XCTestCase {
    func testGenerate() {
        let collections: [UUIDCollection] = [
            .init(url: URL(string: "assigned_numbers/uuids/example_one.yaml", relativeTo: URL(string: "file:///path/to/repo")!)!, entries: [
                .init(name: "example 1 a", id: "com.example.one.a", uuid: (0x11, 0x11)),
                .init(name: "example 1 b", id: "com.example.one.b", uuid: (0x11, 0x22)),
            ]),
            .init(url: URL(string: "assigned_numbers/uuids/example_one.yaml", relativeTo: URL(string: "file:///path/to/repo")!)!, entries: [
                .init(name: "example 2 a", id: nil, uuid: (0x22, 0x11)),
                .init(name: "example 2 b", id: nil, uuid: (0x22, 0x22)),
            ]),
        ]
        
        switch CodeGeneration.generate(fromCollections: collections) {
        case .failure(let error):
            XCTFail("\(error)")
        case .success(let actual):
            let expected = """
/// This file is generated by CodeGenerator.
/// Do not modify this file directly.

import Foundation


public enum AssignedNumbers {
    /// From `assigned_numbers/uuids/example_one.yaml`.
    public enum ExampleOne {
        /// example 1 a. ID is `com.example.one.a`.
        public static let example1A = AssignedNumberWithID(
            name: "example 1 a",
            id: "com.example.one.a",
            uuidByte3: 0x11,
            uuidByte4: 0x11
        )

        /// example 1 b. ID is `com.example.one.b`.
        public static let example1B = AssignedNumberWithID(
            name: "example 1 b",
            id: "com.example.one.b",
            uuidByte3: 0x11,
            uuidByte4: 0x22
        )

        public static let all: [any AssignedNumberProtocol] = [
            example1A,
            example1B,
        ]
    }

    /// From `assigned_numbers/uuids/example_one.yaml`.
    public enum ExampleOne {
        /// example 2 a.
        public static let example2A = AssignedNumberWithoutID(
            name: "example 2 a",
            uuidByte3: 0x22,
            uuidByte4: 0x11
        )

        /// example 2 b.
        public static let example2B = AssignedNumberWithoutID(
            name: "example 2 b",
            uuidByte3: 0x22,
            uuidByte4: 0x22
        )

        public static let all: [any AssignedNumberProtocol] = [
            example2A,
            example2B,
        ]
    }
}

"""
            
            XCTAssertEqual(expected, actual)
        }
    }
}
